(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"+8jh":function(t,e){t.exports='<pre><code class="language-css">$mdc-elevation-baseline-color: black;\n$mdc-elevation-umbra-opacity: 0.2;\n$mdc-elevation-penumbra-opacity: 0.14;\n$mdc-elevation-ambient-opacity: 0.12;\n\n/* The css property used for elevation. In most cases this should not be changed. It is exposed\n   as a variable for abstraction / easy use when needing to reference the property directly, for\n   example in a `will-change` rule. */\n$mdc-elevation-property: box-shadow;\n\n/* The default duration value for elevation transitions. */\n$mdc-elevation-transition-duration: 280ms;</code></pre>\n'},"+Gmk":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-file&gt;&lt;/ui-file&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>accept</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>File types that can be accepted.</td>\n</tr>\n<tr>\n<td><code>multiple</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Whether to support selected multiple file.</td>\n</tr>\n<tr>\n<td><code>preview</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Enabled preview file data.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Styles an outlined upload button that is flush with the surface.</td>\n</tr>\n<tr>\n<td><code>text</code></td>\n<td>string</td>\n<td><code>&#39;Upload&#39;</code></td>\n<td>Text for the default upload button.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the file button content and can contain HTML.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(files: array)</code></td>\n<td>Emits when the file is changed.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>file</code> props in <code>files</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>uuid</code></td>\n<td>string</td>\n<td>UUID.</td>\n</tr>\n<tr>\n<td><code>lastModified</code></td>\n<td>number</td>\n<td>Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>string</td>\n<td>Returns the name of the file referenced by the File object.</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>number</td>\n<td>Returns the size of the file in bytes.</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td>string</td>\n<td>Returns the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME</a> type of the file.</td>\n</tr>\n<tr>\n<td><code>sourceFile</code></td>\n<td>file</td>\n<td>Returns a new Blob object containing the data in the specified range of bytes of the source Blob.</td>\n</tr>\n<tr>\n<td><code>previewSrc</code></td>\n<td>string</td>\n<td>The <code>src</code> data for preview. Applicable only for <code>preview</code> status.</td>\n</tr>\n<tr>\n<td><code>previewError</code></td>\n<td>number</td>\n<td>Preview error code: <code>{0: &#39;OK&#39;, 1: &#39;Not image type&#39;, 2: &#39;Unsupported&#39;}</code>.</td>\n</tr>\n</tbody></table>\n'},"+Hk6":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-slider&gt;` props.\n  UiSlider: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiSlider from &#39;balm-ui/components/slider&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/slider.css&#39;;\n\n// Optional. Overwrite `&lt;ui-slider&gt;` props.\nVue.use(UiSlider, {\n  // some props\n});</code></pre>\n'},"+Lqg":function(t,e){t.exports='<pre><code class="language-html">&lt;section class=&quot;demo-surfaces&quot;&gt;\n  &lt;figure class=&quot;demo-surface&quot; v-shadow=&quot;0&quot;&gt;\n    &lt;figcaption&gt;0dp (&lt;code&gt;mdc-elevation--z0&lt;/code&gt;)&lt;/figcaption&gt;\n  &lt;/figure&gt;\n  &lt;figure v-for=&quot;i in 24&quot;\n    :key=&quot;i&quot;\n    class=&quot;demo-surface&quot;\n    v-shadow=&quot;i&quot;&gt;\n    &lt;figcaption&gt;{{ i }}dp (&lt;code&gt;mdc-elevation--z{{ i }}&lt;/code&gt;)&lt;/figcaption&gt;\n  &lt;/figure&gt;\n&lt;/section&gt;</code></pre>\n'},"+LzF":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list&gt;\n  &lt;ui-item v-for=&quot;i in 3&quot; :key=&quot;i&quot;&gt;\n    &lt;ui-item-text-content&gt;Line item&lt;/ui-item-text-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;</code></pre>\n'},"+eER":function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;icons-preview-code&quot;&gt;\n  &lt;div v-for=&quot;i in [18, 24, 36, 48]&quot; :key=&quot;i&quot; class=&quot;icons-preview&quot;&gt;\n    &lt;ui-icon :size=&quot;i&quot;&gt;face&lt;/ui-icon&gt;\n    &lt;div class=&quot;icon-caption&quot;&gt;{{ i }}px&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n'},"+g3H":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-form-field&gt;\n  &lt;ui-radio id=&quot;male&quot; name=&quot;sex&quot; value=&quot;M&quot; v-model=&quot;gender&quot;&gt;&lt;/ui-radio&gt;\n  &lt;label for=&quot;male&quot;&gt;Male&lt;/label&gt;\n&lt;/ui-form-field&gt;\n&lt;ui-form-field&gt;\n  &lt;ui-radio id=&quot;female&quot; name=&quot;sex&quot; value=&quot;F&quot; v-model=&quot;gender&quot;&gt;&lt;/ui-radio&gt;\n  &lt;label for=&quot;female&quot;&gt;Female&lt;/label&gt;\n&lt;/ui-form-field&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      gender: &#39;&#39;\n    };\n  }\n};</code></pre>\n'},"/78/":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-image-list&gt;&lt;!-- the image item components --&gt;&lt;/ui-image-list&gt;</code></pre>\n<h3 id="ui-image-list-types"><code>&lt;ui-image-list&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;standard&#39;</code></li>\n<li><code>1</code>: <code>&#39;masonry&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Image list types.</td>\n</tr>\n<tr>\n<td><code>masonry</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Indicates that this Image List should use the Masonry variant.</td>\n</tr>\n<tr>\n<td><code>textProtection</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Indicates that supporting content should be positioned in a scrim overlaying each image (instead of positioned separately under each image).</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the image item components.</td>\n</tr>\n</tbody></table>\n'},"/Ew2":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-dialog-content&gt;&lt;!-- the dialog content --&gt;&lt;/ui-dialog-content&gt;</code></pre>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the dialog content and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},"/P1D":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-dropdown&gt;&lt;/ui-dropdown&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>string, number</td>\n<td><code>null</code></td>\n<td>The <code>value</code> of the currently selected option.</td>\n</tr>\n<tr>\n<td><code>options</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>An array of options to show to the user.</td>\n</tr>\n<tr>\n<td><code>optionLabel</code></td>\n<td>string</td>\n<td><code>&#39;label&#39;</code></td>\n<td>Option item label&#39;s name of the <code>options</code>.</td>\n</tr>\n<tr>\n<td><code>optionValue</code></td>\n<td>string</td>\n<td><code>&#39;value&#39;</code></td>\n<td>Option item value&#39;s name of the <code>options</code>.</td>\n</tr>\n<tr>\n<td><code>selectedIndex</code></td>\n<td>number</td>\n<td><code>0</code></td>\n<td>The index of the currently selected option. Set to -1 if no option is currently selected. Changing this property will update the select element.</td>\n</tr>\n<tr>\n<td><code>defaultLabel</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Placeholder item label.</td>\n</tr>\n<tr>\n<td><code>defaultValue</code></td>\n<td>string, number</td>\n<td><code>&#39;&#39;</code></td>\n<td>Placeholder item value.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the select as disabled.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the selected label text for the dropdown.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td></td>\n<td>The icon slot holds an expand icon for the dropdown .</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(model: string|number)</code></td>\n<td>Emits when the dropdown value is changed.</td>\n</tr>\n<tr>\n<td><code>selected</code></td>\n<td><code>function(option: object)</code></td>\n<td>Emits when an option is selected.</td>\n</tr>\n<tr>\n<td><code>cancel</code></td>\n<td><code>function()</code></td>\n<td>Emits when the dropdown is closed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the dropdown using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-dropdown v-model=&quot;value&quot;&gt;&lt;/ui-dropdown&gt;\n\n// Manual\n&lt;ui-dropdown :model=&quot;value&quot; @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;&gt;&lt;/ui-dropdown&gt;</code></pre>\n'},"/ZUr":function(t,e){t.exports='<pre><code class="language-css">$mdc-data-table-fill-color: surface;\n$mdc-data-table-header-row-fill-color: inherit;\n$mdc-data-table-row-fill-color: inherit;\n$mdc-data-table-selected-row-fill-color: rgba(\n  mdc-theme-prop-value(primary),\n  0.04\n);\n\n$mdc-data-table-checked-icon-color: primary;\n$mdc-data-table-divider-color: rgba(mdc-theme-prop-value(on-surface), 0.12);\n$mdc-data-table-divider-size: 1px;\n$mdc-data-table-row-hover-fill-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.04\n);\n$mdc-data-table-checkbox-touch-dimension: 48px;\n\n$mdc-data-table-header-row-text-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.87\n);\n$mdc-data-table-row-text-color: rgba(mdc-theme-prop-value(on-surface), 0.87);\n\n$mdc-data-table-shape-radius: medium;\n$mdc-data-table-stroke-size: 1px;\n$mdc-data-table-stroke-color: rgba(mdc-theme-prop-value(on-surface), 0.12);\n\n$mdc-data-table-cell-height: 52px;\n$mdc-data-table-header-cell-height: mdc-data-table-get-header-cell-height(\n  $mdc-data-table-cell-height\n);\n$mdc-data-table-cell-leading-padding: 16px;\n$mdc-data-table-cell-trailing-padding: 16px;\n\n$mdc-data-table-minimum-cell-height: 36px;\n$mdc-data-table-maximum-cell-height: $mdc-data-table-cell-height;\n$mdc-data-table-default-density-scale: $mdc-density-default-scale;</code></pre>\n'},"/epX":function(t,e){t.exports='<pre><code class="language-html">&lt;h1 :class=&quot;$tt(&#39;headline1&#39;)&quot;&gt;Headline 1&lt;/h1&gt;\n&lt;h2 :class=&quot;$tt(&#39;headline2&#39;)&quot;&gt;Headline 2&lt;/h2&gt;\n&lt;h3 :class=&quot;$tt(&#39;headline3&#39;)&quot;&gt;Headline 3&lt;/h3&gt;\n&lt;h4 :class=&quot;$tt(&#39;headline4&#39;)&quot;&gt;Headline 4&lt;/h4&gt;\n&lt;h5 :class=&quot;$tt(&#39;headline5&#39;)&quot;&gt;Headline 5&lt;/h5&gt;\n&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Headline 6&lt;/h6&gt;\n\n&lt;h6 :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Subtitle 1&lt;/h6&gt;\n&lt;h6 :class=&quot;$tt(&#39;subtitle2&#39;)&quot;&gt;Subtitle 2&lt;/h6&gt;\n\n&lt;p :class=&quot;$tt(&#39;body1&#39;)&quot;&gt;\n  Body 1 paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n  ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n  aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\n  eu fugiat nulla pariatur.\n&lt;/p&gt;\n&lt;p :class=&quot;$tt(&#39;body2&#39;)&quot;&gt;\n  Body 2 paragraph. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n  ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n  aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore\n  eu fugiat nulla pariatur.\n&lt;/p&gt;\n\n&lt;div&gt;&lt;span :class=&quot;$tt(&#39;button&#39;)&quot;&gt;Button text&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span :class=&quot;$tt(&#39;caption&#39;)&quot;&gt;Caption text&lt;/span&gt;&lt;/div&gt;\n\n&lt;div&gt;&lt;span :class=&quot;$tt(&#39;overline&#39;)&quot;&gt;Overline text&lt;/span&gt;&lt;/div&gt;</code></pre>\n'},"/tRe":function(t,e){t.exports='<pre><code class="language-html">&lt;section :dir=&quot;controls.rtl ? &#39;rtl&#39; : null&quot;&gt;\n  &lt;ui-select id=&quot;full-func-js-select&quot;\n    v-model=&quot;selected.value&quot;\n    :selectedIndex=&quot;selected.index&quot;\n    :options=&quot;options&quot;\n    :class=&quot;{&#39;demo-select-custom-colors&#39;: controls.customColor}&quot;\n    :disabled=&quot;controls.disabled&quot;\n    @selected=&quot;onSelected($event)&quot;&gt;\n    Food Group\n  &lt;/ui-select&gt;\n\n  &lt;ui-button raised\n    @click=&quot;$balmUI.onChange(&#39;selected.index&#39;, 0)&quot;&gt;\n    Set Selected Index (0)\n  &lt;/ui-button&gt;\n  &lt;ui-button raised\n    @click=&quot;$balmUI.onChange(&#39;selected.value&#39;, &#39;meat&#39;)&quot;&gt;\n    Set Value to Meat\n  &lt;/ui-button&gt;\n&lt;/section&gt;</code></pre>\n<pre><code class="language-js">const options = [\n  {\n    label: &#39;Bread, Cereal, Rice, and Pasta&#39;,\n    value: &#39;grains&#39;\n  },\n  {\n    label: &#39;Vegetables&#39;,\n    value: &#39;vegetables&#39;,\n    disabled: true\n  },\n  {\n    label: &#39;Fruit&#39;,\n    value: &#39;fruit&#39;\n  },\n  {\n    label: &#39;Milk, Yogurt, and Cheese&#39;,\n    value: &#39;dairy&#39;\n  },\n  {\n    label: &#39;Meat, Poultry, Fish, Dry Beans, Eggs, and Nuts&#39;,\n    value: &#39;meat&#39;\n  },\n  {\n    label: &#39;Fats, Oils, and Sweets&#39;,\n    value: &#39;fats&#39;\n  }\n];\n\nexport default {\n  data() {\n    return {\n      options,\n      selected: {\n        value: &#39;&#39;,\n        index: 0\n      },\n      controls: {\n        rtl: false,\n        customColor: false,\n        disabled: false\n      }\n    };\n  },\n  methods: {\n    onSelected(selected) {\n      this.selected = selected;\n    }\n  }\n};</code></pre>\n'},"/yRN":function(t,e){t.exports='<pre><code class="language-css">$mdc-dialog-scrim-color: on-surface;\n$mdc-dialog-title-ink-color: on-surface;\n$mdc-dialog-content-ink-color: on-surface;\n$mdc-dialog-scroll-divider-color: on-surface;\n\n$mdc-dialog-scrim-opacity: 0.32;\n$mdc-dialog-title-ink-opacity: 0.87;\n$mdc-dialog-content-ink-opacity: 0.6;\n$mdc-dialog-scroll-divider-opacity: 0.12;\n\n$mdc-dialog-min-width: 280px;\n$mdc-dialog-max-width: 560px;\n$mdc-dialog-margin: 16px;\n$mdc-dialog-title-bottom-padding: 9px;\n$mdc-dialog-actions-padding: 8px;\n\n$mdc-dialog-z-index: 7;</code></pre>\n'},"0HsE":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-switch id=&quot;basic-switch&quot;\n  :trueValue=&quot;1&quot;\n  :falseValue=&quot;0&quot;\n  v-model=&quot;toggle1&quot;&gt;\n  {{ toggle1 }}\n&lt;/ui-switch&gt;\n&lt;label for=&quot;basic-switch&quot;&gt;{{ toggle1 }}&lt;/label&gt;\n\n&lt;ui-switch id=&quot;basic-switch-custom&quot;\n  class=&quot;demo-switch--custom&quot;\n  trueValue=&quot;on&quot;\n  falseValue=&quot;off&quot;\n  v-model=&quot;toggle2&quot;&gt;\n  {{ toggle2 }} (custom color)\n&lt;/ui-switch&gt;\n&lt;label for=&quot;basic-switch-custom&quot;&gt;{{ toggle2 }} (custom color)&lt;/label&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      toggle1: 0,\n      toggle2: &#39;on&#39;\n    };\n  }\n};</code></pre>\n<pre><code class="language-css">/* Sass code */\n.demo-switch--custom {\n  $color: $material-color-red-500;\n\n  @include mdc-switch-track-color($color);\n  @include mdc-switch-knob-color($color);\n  @include mdc-switch-focus-indicator-color($color);\n}</code></pre>\n'},"0Uhr":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-fab&gt;\n  &lt;i class=&quot;fa fa-flag fa-lg&quot;&gt;&lt;/i&gt;\n&lt;/ui-fab&gt;\n&lt;ui-fab&gt;\n  &lt;i class=&quot;fa fa-smile-o fa-lg&quot;&gt;&lt;/i&gt;\n&lt;/ui-fab&gt;\n&lt;ui-fab&gt;\n  &lt;i class=&quot;fa fa-camera-retro fa-lg&quot;&gt;&lt;/i&gt;\n&lt;/ui-fab&gt;\n&lt;ui-fab&gt;\n  &lt;i class=&quot;fa fa-spinner fa-pulse fa-lg fa-fw&quot;&gt;&lt;/i&gt;\n&lt;/ui-fab&gt;</code></pre>\n'},"0W7t":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-form-field&gt;\n  &lt;ui-switch&gt;&lt;/ui-switch&gt;\n  &lt;label&gt;Switch&lt;/label&gt;\n&lt;/ui-form-field&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>boolean, number, string</td>\n<td><code>false</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>trueValue</code></td>\n<td>boolean, number, string</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>falseValue</code></td>\n<td>boolean, number, string</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>name</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the switch as a disabled switch.</td>\n</tr>\n<tr>\n<td><code>attrs</code></td>\n<td>object</td>\n<td><code>null</code></td>\n<td>Other attributes for <code>&lt;input&gt;</code>.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(model: boolean|string|number)</code></td>\n<td>Emits when the switch is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the switch using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-switch v-model=&quot;value&quot;&gt;&lt;/ui-switch&gt;\n\n// Manual\n&lt;ui-switch\n  :model=&quot;value&quot;\n  @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-switch&gt;</code></pre>\n'},"1Pfi":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid&quot;&gt;\n  &lt;ui-grid-cell v-for=&quot;i in 12&quot; :key=&quot;i&quot; class=&quot;demo-cell&quot; columns=&quot;1&quot;\n    &gt;1&lt;/ui-grid-cell\n  &gt;\n&lt;/ui-grid&gt;</code></pre>\n'},"1fpl":function(t,e){t.exports='<pre><code class="language-html">&lt;fieldset class=&quot;demo-fieldset--color&quot;&gt;\n  &lt;legend :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Theme colors as text&lt;/legend&gt;\n\n  &lt;div class=&quot;demo-theme-color-group&quot;&gt;\n    &lt;div class=&quot;demo-theme-color-swatches&quot;&gt;\n      &lt;div :class=&quot;[\n        &#39;demo-theme-color-swatch demo-theme-color-swatch--elevated&#39;,\n        $themeColor(&#39;primary&#39;)]&quot;&gt;Primary&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;demo-theme-color-swatches&quot;&gt;\n      &lt;div :class=&quot;[\n        &#39;demo-theme-color-swatch demo-theme-color-swatch--elevated&#39;,\n        $themeColor(&#39;secondary&#39;)]&quot;&gt;Secondary&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/fieldset&gt;\n\n&lt;fieldset class=&quot;demo-fieldset--color&quot;&gt;\n  &lt;legend :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Theme colors as background&lt;/legend&gt;\n\n  &lt;div class=&quot;demo-theme-color-group&quot;&gt;\n    &lt;div class=&quot;demo-theme-color-swatches&quot;&gt;\n      &lt;div :class=&quot;[\n        &#39;demo-theme-color-swatch demo-theme-color-swatch--elevated&#39;,\n        $themeColor(&#39;primary-bg&#39;),\n        $themeColor(&#39;on-primary&#39;)]&quot;&gt;Primary&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;demo-theme-color-swatches&quot;&gt;\n      &lt;div :class=&quot;[\n        &#39;demo-theme-color-swatch demo-theme-color-swatch--elevated&#39;,\n        $themeColor(&#39;secondary-bg&#39;),\n        $themeColor(&#39;on-secondary&#39;)]&quot;&gt;Secondary&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=&quot;demo-theme-color-swatches&quot;&gt;\n      &lt;div :class=&quot;[\n        &#39;demo-theme-color-swatch demo-theme-color-swatch--elevated&#39;,\n        $themeColor(&#39;background&#39;),\n        $textColor(&#39;primary&#39;)]&quot;&gt;Background&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/fieldset&gt;</code></pre>\n'},"2Esg":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-table :data=&quot;data&quot; :thead=&quot;thead&quot; :tbody=&quot;tbody&quot;&gt;&lt;/ui-table&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      data: [\n        {\n          id: 1,\n          dessert: &#39;Frozen yogurt&#39;,\n          calories: 159,\n          fat: 6,\n          carbs: 24,\n          protein: 4\n        },\n        {\n          id: 2,\n          dessert: &#39;Ice cream sandwich&#39;,\n          calories: 237,\n          fat: 9,\n          carbs: 37,\n          protein: 4.3\n        },\n        {\n          id: 3,\n          dessert: &#39;Eclair&#39;,\n          calories: 262,\n          fat: 16,\n          carbs: 24,\n          protein: 6\n        }\n      ],\n      thead: [\n        &#39;ID&#39;,\n        &#39;Dessert (100g serving)&#39;,\n        &#39;Calories&#39;,\n        &#39;Fat (g)&#39;,\n        &#39;Carbs (g)&#39;,\n        &#39;Protein (g)&#39;\n      ],\n      tbody: [&#39;id&#39;, &#39;dessert&#39;, &#39;calories&#39;, &#39;fat&#39;, &#39;carbs&#39;, &#39;protein&#39;]\n    };\n  }\n};</code></pre>\n'},"2nuX":function(t,e){t.exports='<pre><code class="language-js">// Usage 1\n$confirm(message);\n\n// Usage 2\n$confirm(options);</code></pre>\n<h4 id="options">Options</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>className</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The custom class name for the confirm dialog.</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The title of the confirm dialog.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The content to be displayed in the confirm dialog.</td>\n</tr>\n<tr>\n<td><code>acceptText</code></td>\n<td>string</td>\n<td><code>&#39;OK&#39;</code></td>\n<td>Accept button content.</td>\n</tr>\n<tr>\n<td><code>cancelText</code></td>\n<td>string</td>\n<td><code>&#39;Cancel&#39;</code></td>\n<td>Cancel button content.</td>\n</tr>\n<tr>\n<td><code>callback</code></td>\n<td>function</td>\n<td><code>false</code></td>\n<td>Handle some event when the confirm button is clicked.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<pre><code class="language-js">// Usage 1\n$confirm({\n  message,\n  callback(result) {\n    // ...\n  }\n});\n\n// Usage 2 (Recommended)\n$confirm(message).then(result =&gt; {\n  // ...\n});</code></pre>\n<blockquote>\n<p><code>result</code> is a boolean value indicating whether OK or Cancel was selected (<code>true</code> means OK).</p>\n</blockquote>\n'},"2qo9":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-chips type=&quot;filter&quot; v-model=&quot;selectedValue&quot;&gt;\n  &lt;ui-chip v-for=&quot;(item, index) in filterList&quot; :key=&quot;index&quot;&gt;{{ item }}&lt;/ui-chip&gt;\n&lt;/ui-chips&gt;\n\n&lt;ui-chips type=&quot;filter&quot; v-model=&quot;selectedValue2&quot;&gt;\n  &lt;ui-chip\n    v-for=&quot;(item, index) in filterList2&quot;\n    :key=&quot;index&quot;\n    icon=&quot;face&quot;\n    :hidden=&quot;selectedValue2.includes(index)&quot;\n  &gt;\n    {{ item }}\n  &lt;/ui-chip&gt;\n&lt;/ui-chips&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      selectedValue: [1, 2],\n      selectedValue2: [0],\n      filterList: [&#39;Tops&#39;, &#39;Bottoms&#39;, &#39;Shoes&#39;, &#39;Accessories&#39;],\n      filterList2: [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Charlie&#39;, &#39;David&#39;]\n    };\n  }\n};</code></pre>\n'},"3qKF":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-fab&gt;&lt;!-- Icon --&gt;&lt;/ui-fab&gt;\n\n&lt;ui-fab extended&gt;&lt;!-- Text label --&gt;&lt;/ui-fab&gt;</code></pre>\n<h3 id="ui-fab-types"><code>&lt;ui-fab&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;regular&#39;</code></li>\n<li><code>1</code>: <code>&#39;extended&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. FAB types.</td>\n</tr>\n<tr>\n<td><code>extended</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. modifies the FAB to wider size which includes a text label.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional. for the icon element. See <a href="/#/icons">Material Icons</a> usage.</td>\n</tr>\n<tr>\n<td><code>mini</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. modifies the FAB to a smaller size.</td>\n</tr>\n<tr>\n<td><code>exited</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. animates the FAB out of view. When this class is removed, the FAB will return to view.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td><code>iconClass</code></td>\n<td>The default slot holds the floating action button icon or text label.</td>\n</tr>\n<tr>\n<td><code>before</code></td>\n<td><code>iconClass</code></td>\n<td>The label slot holds the label text of the extended FAB.</td>\n</tr>\n<tr>\n<td><code>after</code></td>\n<td><code>iconClass</code></td>\n<td>The label slot holds the label text of the extended FAB.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: the default slot of the extended FAB has not <code>slot-scope</code>.</p>\n</blockquote>\n<pre><code class="language-html">&lt;ui-fab&gt;\n  &lt;template #default=&quot;{ iconClass }&quot;&gt;\n    &lt;ui-icon :class=&quot;iconClass&quot;&gt;ICON&lt;/ui-icon&gt;\n  &lt;/template&gt;\n&lt;/ui-fab&gt;\n\n&lt;ui-fab extended&gt;\n  &lt;template #before=&quot;{ iconClass }&quot;&gt;\n    &lt;ui-icon :class=&quot;iconClass&quot;&gt;ICON&lt;/ui-icon&gt;\n  &lt;/template&gt;\n  Text label\n&lt;/ui-fab&gt;</code></pre>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the floating action button is clicked.</td>\n</tr>\n</tbody></table>\n'},"4L9t":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-drawer&gt;\n  &lt;ui-drawer-header&gt;\n    &lt;ui-drawer-title&gt;{{ title }}&lt;/ui-drawer-title&gt;\n    &lt;ui-drawer-subtitle&gt;{{ subtitle }}&lt;/ui-drawer-subtitle&gt;\n  &lt;/ui-drawer-header&gt;\n  &lt;ui-drawer-content&gt;\n    &lt;ui-list&gt;\n      &lt;template v-for=&quot;(item, index) in menu&quot;&gt;\n        &lt;ui-list-divider\n          v-if=&quot;item === &#39;-&#39;&quot;\n          :key=&quot;`divider-${index}`&quot;\n        &gt;&lt;/ui-list-divider&gt;\n        &lt;template v-else&gt;\n          &lt;ui-list-group-subheader\n            v-if=&quot;item.subheader&quot;\n            :key=&quot;`subheader-${index}`&quot;\n          &gt;\n            {{ item.subheader }}\n          &lt;/ui-list-group-subheader&gt;\n          &lt;ui-item\n            v-for=&quot;(subItem, subIndex) in item.items&quot;\n            :key=&quot;`item-${index}-${subIndex}`&quot;\n          &gt;\n            &lt;ui-item-first-content&gt;\n              &lt;ui-icon&gt;{{ subItem.icon }}&lt;/ui-icon&gt;\n            &lt;/ui-item-first-content&gt;\n            &lt;ui-item-text-content&gt;{{ subItem.name }}&lt;/ui-item-text-content&gt;\n          &lt;/ui-item&gt;\n        &lt;/template&gt;\n      &lt;/template&gt;\n    &lt;/ui-list&gt;\n  &lt;/ui-drawer-content&gt;\n&lt;/ui-drawer&gt;\n\n&lt;main class=&quot;demo-main&quot;&gt;\n  &lt;ui-top-app-bar\n    contentSelector=&quot;.demo-content&quot;\n    class=&quot;demo-top-app-bar&quot;\n    v-shadow=&quot;4&quot;\n  &gt;\n    &lt;template #nav-icon&gt;\n      &lt;ui-icon @click=&quot;$router.back()&quot;&gt;arrow_back&lt;/ui-icon&gt;\n    &lt;/template&gt;\n    Permanent Drawer Above Toolbar\n  &lt;/ui-top-app-bar&gt;\n\n  &lt;div :class=&quot;[$tt(&#39;body1&#39;), &#39;demo-content&#39;]&quot;&gt;\n    &lt;div :class=&quot;$tt(&#39;body2&#39;)&quot;&gt;\n      &lt;h1 :class=&quot;$tt(&#39;headline4&#39;)&quot;&gt;Permanent Drawer&lt;/h1&gt;\n      &lt;p&gt;It sits to the left of this content.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/main&gt;</code></pre>\n'},"4TXR":function(t,e){t.exports='<pre><code class="language-js">$tt(style);</code></pre>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>style</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Typography style name.</td>\n</tr>\n</tbody></table>\n<p>The typographic styles in this module are derived from thirteen styles:</p>\n<ul>\n<li><code>headline1</code></li>\n<li><code>headline2</code></li>\n<li><code>headline3</code></li>\n<li><code>headline4</code></li>\n<li><code>headline5</code></li>\n<li><code>headline6</code></li>\n<li><code>subtitle1</code></li>\n<li><code>subtitle2</code></li>\n<li><code>body1</code></li>\n<li><code>body2</code></li>\n<li><code>caption</code></li>\n<li><code>button</code></li>\n<li><code>overline</code></li>\n</ul>\n<blockquote>\n<p>You can overwrite typography CSS Classes for your project so easy.</p>\n</blockquote>\n'},"5RkR":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tab-indicator&gt;&lt;/ui-tab-indicator&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string</td>\n<td><code>&#39;underline&#39;</code></td>\n<td>Mandatory. Indicator type. <code>[&#39;underline&#39;, &#39;icon&#39;]</code></td>\n</tr>\n<tr>\n<td><code>fade</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Sets up the tab indicator to fade in on activation and fade out on deactivation.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the tab indicator icon and can contain HTML.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>underline</code> type has not slot.</p>\n</blockquote>\n'},"5VFu":function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-scroller\n    ref=&quot;scroller&quot;\n    class=&quot;demo-scroller&quot;\n    v-model=&quot;value&quot;\n    @change=&quot;$balmUI.onChange(&#39;scrollValue&#39;, $event)&quot;\n  &gt;\n    &lt;span v-for=&quot;i in 32&quot; :key=&quot;i&quot; class=&quot;demo-cube&quot;&gt;&lt;/span&gt;\n  &lt;/ui-tab-scroller&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;demo-controller&quot;&gt;\n  &lt;div class=&quot;demo-controller-row&quot;&gt;\n    &lt;label for=&quot;id0&quot;&gt;Scroll to&lt;/label&gt;\n    &lt;input\n      id=&quot;id0&quot;\n      class=&quot;demo-scroll-value&quot;\n      type=&quot;number&quot;\n      name=&quot;scrollLeft&quot;\n      v-model=&quot;scrollValue&quot;\n    /&gt;\n    &lt;button type=&quot;submit&quot; @click=&quot;$balmUI.onChange(&#39;value&#39;, +scrollValue)&quot;&gt;\n      Scroll\n    &lt;/button&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;demo-controller-row&quot;&gt;\n    &lt;button\n      type=&quot;button&quot;\n      class=&quot;demo-decrement&quot;\n      @click=&quot;$refs.scroller.increment(-50)&quot;\n    &gt;\n      -50\n    &lt;/button&gt;\n    &lt;button\n      type=&quot;button&quot;\n      class=&quot;demo-increment&quot;\n      @click=&quot;$refs.scroller.increment(+50)&quot;\n    &gt;\n      +50\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      value: 0,\n      scrollValue: 0\n    };\n  }\n};</code></pre>\n'},"5qYn":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-grid&gt;` props.\n  UiGrid: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiGridComponents from &#39;balm-ui/components/grid&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/grid.css&#39;;\n\nVue.use(UiGridComponents, {\n  // Optional. Overwrite `&lt;ui-grid&gt;` props.\n  UiGrid: {\n    // some props\n  }\n});</code></pre>\n'},"5rKl":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-icon&gt;&lt;!-- the material design icon name --&gt;&lt;/ui-icon&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Material icon theme.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Outlined icons customize stroke and fill attributes for a light, clean style that works well in dense UIs. The stroke weight of outlined icons can be adjusted to complement or contrast the weight of your typography.</td>\n</tr>\n<tr>\n<td><code>round</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Rounded icons use a corner radius that pairs well with brands that use heavier typography, curved logos, or circular elements to express their style.</td>\n</tr>\n<tr>\n<td><code>twoTone</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Two-tone icons have added dimension, using the attributes of stroke, fill, and color. Contrasting stroke and fill colors enables the use of multiple brand colors and can improve legibility.</td>\n</tr>\n<tr>\n<td><code>sharp</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Sharp icons display corners with straight edges, for a crisp style that remains legible even at smaller scales. These rectangular shapes can support brand styles that aren\u2019t well-reflected by rounded shapes.</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>number, string</td>\n<td><code>24</code></td>\n<td>Material icon sizing.</td>\n</tr>\n<tr>\n<td><code>dark</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>An icon on a light background with a dark foreground color.</td>\n</tr>\n<tr>\n<td><code>light</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>An icon on a dark background with a light foreground color.</td>\n</tr>\n<tr>\n<td><code>inactive</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>An icon is disabled or inactive.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>Types:</strong> <code>0: &#39;filled&#39;</code>, <code>1: &#39;outlined&#39;</code>, <code>2: &#39;round&#39;</code>, <code>3: &#39;twoTone&#39;</code>, <code>4: &#39;sharp&#39;</code></li>\n</ul>\n<blockquote>\n<p>Although the icons in the font can be scaled to any size, in accordance with material design icons guidelines, we recommend them to be shown in either <code>18</code>, <code>24</code>, <code>36</code> or <code>48</code>px.</p>\n</blockquote>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the material design icon name and can contain HTML.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the icon is clicked.</td>\n</tr>\n</tbody></table>\n'},"6DCT":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-autocomplete&gt;&lt;/ui-autocomplete&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>string, number</td>\n<td><code>&#39;&#39;</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>source</code></td>\n<td>array</td>\n<td>(required)</td>\n<td>Defines the data to use, must be specified.</td>\n</tr>\n<tr>\n<td><code>autofocus</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>If set to <code>true</code> the first item will automatically be focused when the menu is shown.</td>\n</tr>\n<tr>\n<td><code>delay</code></td>\n<td>number, string</td>\n<td><code>300</code></td>\n<td>The delay in milliseconds between when a keystroke occurs and when a search is performed. A zero-delay makes sense for local data (more responsive), but can produce a lot of load for remote data, while being less responsive.</td>\n</tr>\n<tr>\n<td><code>minlength</code></td>\n<td>number, string</td>\n<td><code>1</code></td>\n<td>The minimum number of characters a user must type before a search is performed. Zero is useful for local data with just a few items, but a higher value should be used when a single character search could match a few thousand items.</td>\n</tr>\n<tr>\n<td><code>remote</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Get data by AJAX. Default usage for local data.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the autocomplete as an outlined text field.</td>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>label</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>A text caption or description for the autocomplete, which use the input&#39;s <code>placeholder</code> attribute instead.</td>\n</tr>\n<tr>\n<td><code>noLabel</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the autocomplete that has no label.</td>\n</tr>\n<tr>\n<td><code>placeholder</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>placeholder</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>fullwidth</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the autocomplete as a full width text field.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the autocomplete as a disabled text field.</td>\n</tr>\n<tr>\n<td><code>leadingIcon</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td>Styles the autocomplete as a text field with a leading icon. (Use with <code>before</code> slot)</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional. Indicates an icon element with a leading icon. See <a href="/#/icons">Material Icons</a> list. (No need to configure <code>leadingIcon</code>)</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong><code>source</code></strong> prop. There are two supported formats:<ul>\n<li>An array of strings: <code>[ &#39;Choice1&#39;, &#39;Choice2&#39; ]</code></li>\n<li>An array of objects with <code>label</code> and <code>value</code> properties: <code>[ { label: &#39;Choice1&#39;, value: &#39;value1&#39; }, ... ]</code></li>\n</ul>\n</li>\n</ul>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the label for the autocomplete.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td><code>iconClass</code></td>\n<td>The icon slot holds a custom leading icon.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>input</code></td>\n<td><code>function(model: string|number)</code></td>\n<td>Emits when the autocomplete value is changed.</td>\n</tr>\n<tr>\n<td><code>search</code></td>\n<td><code>function(keywords: string)</code></td>\n<td>Emits when the autocomplete value is changed. Applicable only for the <code>remote</code> autocomplete.</td>\n</tr>\n<tr>\n<td><code>selected</code></td>\n<td><code>function(item: object)</code></td>\n<td>Emits when the autocomplete item is selected.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>selected</code> event return data:</li>\n</ul>\n<pre><code class="language-js">{\n  label: &#39;Choice 1&#39;,\n  value: &#39;value 1&#39;\n}</code></pre>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the autocomplete using <code>@input</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-autocomplete v-model=&quot;value&quot;&gt;&lt;/ui-autocomplete&gt;\n\n// Manual\n&lt;ui-autocomplete\n  :model=&quot;value&quot;\n  @input=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-autocomplete&gt;</code></pre>\n'},"6iKR":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-snackbar\n  v-model=&quot;open&quot;\n  :timeoutMs=&quot;timeout&quot;\n  :message=&quot;message&quot;\n  :actionButtonText=&quot;actionText&quot;\n  :actionType=&quot;actionType ? 1 : 0&quot;\n&gt;&lt;/ui-snackbar&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      open: false,\n      timeout: 5000,\n      message: &#39;Hello Snackbar&#39;,\n      actionText: &#39;close&#39;,\n      actionType: false\n    };\n  }\n};</code></pre>\n'},"6tOm":function(t,e){t.exports='<pre><code class="language-css">$mdc-icon-button-icon-size: 24px;\n\n$mdc-icon-button-size: 48px;\n$mdc-icon-button-minimum-height: 28px;\n$mdc-icon-button-maximum-height: $mdc-icon-button-size;\n$mdc-icon-button-density-scale: $mdc-density-default-scale;\n$mdc-icon-button-density-config: (\n  size: (\n    default: $mdc-icon-button-size,\n    maximum: $mdc-icon-button-maximum-height,\n    minimum: $mdc-icon-button-minimum-height\n  )\n);</code></pre>\n'},"7/oN":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list&gt;\n  &lt;ui-item v-for=&quot;(item, index) in items&quot; :key=&quot;index&quot;&gt;\n    &lt;ui-item-first-content&gt;\n      &lt;ui-icon&gt;{{ item.icon }}&lt;/ui-icon&gt;\n    &lt;/ui-item-first-content&gt;\n    &lt;ui-item-text-content&gt;{{ item.text }}&lt;/ui-item-text-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;</code></pre>\n'},"7c5P":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-text-divider type=&quot;|&quot; class=&quot;vertical-divider-demo&quot;&gt;\n  &lt;template #left&gt;\n    &lt;div class=&quot;block red&quot;&gt;&lt;/div&gt;\n  &lt;/template&gt;\n  or\n  &lt;template #right&gt;\n    &lt;div class=&quot;block blue&quot;&gt;&lt;/div&gt;\n  &lt;/template&gt;\n&lt;/ui-text-divider&gt;</code></pre>\n<pre><code class="language-css">.vertical-divider-demo {\n  width: 300px;\n  height: 120px;\n  padding: 10px;\n  border: 1px solid currentColor;\n\n  .block {\n    width: 80px;\n    height: 80px;\n  }\n  .red {\n    background-color: red;\n  }\n  .blue {\n    background-color: blue;\n  }\n}</code></pre>\n'},"7cKi":function(t,e){t.exports='<pre><code class="language-css">$mdc-typography-font-family: Roboto, sans-serif;</code></pre>\n'},"8bja":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-datepicker\n  noLabel\n  placeholder=&quot;Select Multi Date..&quot;\n  :config=&quot;config&quot;\n  v-model=&quot;date&quot;\n&gt;&lt;/ui-datepicker&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      config: {\n        mode: &#39;multiple&#39;\n      },\n      date: [&#39;2017-11-05&#39;, &#39;2017-11-15&#39;, &#39;2017-11-25&#39;]\n    };\n  }\n};</code></pre>\n'},"9+tc":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport elevation from &#39;balm-ui/directives/elevation&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/directives/elevation.css&#39;;\n\nVue.directive(elevation.name, elevation);</code></pre>\n'},"98a3":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-item&gt;&lt;!-- the item child components --&gt;&lt;/ui-item&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>selected</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional, styles the row in an selected state.</td>\n</tr>\n<tr>\n<td><code>activated</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional, styles the row in an activated state.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the item child components and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>before</code></td>\n<td><code>iconClass</code></td>\n<td>Custom <code>&lt;ui-item-first-content&gt;</code>. Optional, the first tile in the row. Typically an icon or image.</td>\n</tr>\n<tr>\n<td><code>after</code></td>\n<td><code>iconClass</code></td>\n<td>Custom <code>&lt;ui-item-last-content&gt;</code>. Optional, the last tile in the row. Typically small text, icon. or image.</td>\n</tr>\n</tbody></table>\n<p><strong>Item child components:</strong></p>\n<ul>\n<li><code>&lt;ui-item-text-content&gt;</code><ul>\n<li><code>&lt;ui-item-text1&gt;</code></li>\n<li><code>&lt;ui-item-text2&gt;</code></li>\n</ul>\n</li>\n<li><code>&lt;ui-item-first-content&gt;</code></li>\n<li><code>&lt;ui-item-last-content&gt;</code></li>\n</ul>\n<pre><code class="language-html">&lt;!-- Default List --&gt;\n&lt;ui-list&gt;\n  &lt;ui-item&gt;\n    &lt;ui-item-text-content&gt;&lt;!-- Primary text --&gt;&lt;/ui-item-text-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;\n\n&lt;!-- Two-Line List --&gt;\n&lt;ui-list :type=&quot;2&quot;&gt;\n  &lt;ui-item&gt;\n    &lt;ui-item-text-content&gt;\n      &lt;ui-item-text1&gt;&lt;!-- Primary text --&gt;&lt;/ui-item-text1&gt;\n      &lt;ui-item-text2&gt;&lt;!-- Secondary text --&gt;&lt;/ui-item-text2&gt;\n    &lt;/ui-item-text-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;\n\n&lt;!-- Rich List --&gt;\n&lt;ui-list&gt;\n  &lt;ui-item&gt;\n    &lt;ui-item-first-content&gt;&lt;!-- Icon --&gt;&lt;/ui-item-first-content&gt;\n    &lt;ui-item-text-content&gt;&lt;!-- Primary text --&gt;&lt;/ui-item-text-content&gt;\n    &lt;ui-item-last-content&gt;&lt;!-- Meta info --&gt;&lt;/ui-item-last-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;</code></pre>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the list item is clicked.</td>\n</tr>\n</tbody></table>\n'},"9pG4":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-menu&gt;` props.\n  UiMenu: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiMenuComponents from &#39;balm-ui/components/menu&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/list.css&#39;;\nimport &#39;balm-ui/components/menu.css&#39;;\n\nVue.use(UiMenuComponents, {\n  // Optional. Overwrite `&lt;ui-menu&gt;` props.\n  UiMenu: {\n    // some props\n  }\n});</code></pre>\n'},"9zI1":function(t,e){t.exports='<pre><code class="language-css">/* Default styles */\n$mdc-top-app-bar-row-height: 64px;\n$mdc-top-app-bar-title-left-padding: 20px;\n$mdc-top-app-bar-section-vertical-padding: 8px;\n$mdc-top-app-bar-section-horizontal-padding: 12px;\n\n$mdc-top-app-bar-mobile-breakpoint: 599px;\n\n/* Default mobile styles */\n$mdc-top-app-bar-mobile-row-height: 56px;\n$mdc-top-app-bar-mobile-section-padding: 4px;\n\n/* Short top app bar */\n$mdc-top-app-bar-short-collapsed-border-radius: 4px;\n$mdc-top-app-bar-short-collapsed-width: 56px;\n$mdc-top-app-bar-short-collapsed-right-icon-padding: 12px;\n\n/* Prominent styles */\n$mdc-top-app-bar-prominent-row-height: 128px;\n$mdc-top-app-bar-prominent-title-bottom-padding: 2px;\n\n/* Prominent mobile styles */\n$mdc-top-app-bar-prominent-mobile-title-bottom-padding: 6px;\n\n/* Dense styles */\n$mdc-top-app-bar-dense-row-height: 48px;\n$mdc-top-app-bar-dense-section-horizontal-padding: 4px;\n$mdc-top-app-bar-dense-title-left-padding: 12px;\n\n/* Dense &amp; Prominent styles */\n$mdc-top-app-bar-dense-prominent-title-bottom-padding: 9px;</code></pre>\n'},AcTu:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-form-field&gt;\n  &lt;ui-checkbox id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot;&gt;&lt;/ui-checkbox&gt;\n  &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;\n&lt;/ui-form-field&gt;\n&lt;ui-form-field&gt;\n  &lt;ui-checkbox id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;&lt;/ui-checkbox&gt;\n  &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;\n&lt;/ui-form-field&gt;\n&lt;ui-form-field&gt;\n  &lt;ui-checkbox id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;&lt;/ui-checkbox&gt;\n  &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;\n&lt;/ui-form-field&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      checkedNames: []\n    };\n  }\n};</code></pre>\n'},"BV+e":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-select&gt;` props.\n  UiSelect: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiSelect from &#39;balm-ui/components/select&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/select.css&#39;;\nimport &#39;balm-ui/components/menu.css&#39;;\nimport &#39;balm-ui/components/list.css&#39;;\n\n// Optional. Overwrite `&lt;ui-select&gt;` props.\nVue.use(UiSelect, {\n  // some props\n});</code></pre>\n'},BZoW:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-form-field&gt;\n  &lt;ui-radio&gt;&lt;/ui-radio&gt;\n  &lt;label&gt;Radio&lt;/label&gt;\n&lt;/ui-form-field&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>string, number</td>\n<td><code>null</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>name</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>string, number</td>\n<td><code>null</code></td>\n<td>The <em>value</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the radio button as a disabled radio button.</td>\n</tr>\n<tr>\n<td><code>attrs</code></td>\n<td>object</td>\n<td><code>null</code></td>\n<td>Other attributes for <code>&lt;input&gt;</code>.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(model: string|number)</code></td>\n<td>Emits when the radio button is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the radio using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-radio v-model=&quot;value&quot;&gt;&lt;/ui-radio&gt;\n\n// Manual\n&lt;ui-radio :model=&quot;value&quot; @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;&gt;&lt;/ui-radio&gt;</code></pre>\n'},BapH:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite the param of `$tt()`.\n  typography: [&#39;custom-module-1&#39;, &#39;custom-module-2&#39;]\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport typography from &#39;balm-ui/plugins/typography&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;; // (Include &#39;plugins/typography.css&#39;)\n// OR\nimport &#39;balm-ui/plugins/typography.css&#39;;\nimport &#39;/path/to/custom-typography.css&#39;; // Optional.\n\n// Optional. Overwrite the param of `$tt()`.\nVue.use(typography, [&#39;custom-module-1&#39;, &#39;custom-module-2&#39;]);</code></pre>\n'},BnzD:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-datepicker\n  noLabel\n  placeholder=&quot;Select Date..&quot;\n  toggle\n  clear\n  :config=&quot;config&quot;\n  v-model=&quot;date&quot;\n&gt;&lt;/ui-datepicker&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      config: {\n        defaultDate: &#39;today&#39;\n      },\n      date: &#39;&#39;\n    };\n  }\n};</code></pre>\n'},"C+ac":function(t,e){t.exports='<pre><code class="language-html">&lt;section class=&quot;example&quot;&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Unbounded&lt;/h2&gt;\n    &lt;ui-icon class=&quot;demo-surface&quot; data-mdc-ripple-is-unbounded v-ripple.unbounded&gt;\n      favorite\n    &lt;/ui-icon&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Unbounded - CSS Only&lt;/h2&gt;\n    &lt;ui-icon class=&quot;demo-surface&quot; data-mdc-ripple-is-unbounded v-ripple:cssOnly.unbounded&gt;\n      favorite\n    &lt;/ui-icon&gt;\n  &lt;/div&gt;\n&lt;/section&gt;</code></pre>\n<pre><code class="language-css">.demo-surface[data-mdc-ripple-is-unbounded] {\n  /* Override width/height from above to match icon size, and adjust padding for hitbox */\n  width: 24px;\n  height: 24px;\n  padding: 12px;\n}</code></pre>\n'},C3HK:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-html">&lt;!-- build:css css/plugins.css --&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/node_modules/flatpickr/dist/flatpickr.min.css&quot; /&gt;\n&lt;!-- endbuild --&gt;</code></pre>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `&lt;ui-rangepicker&gt;` props.\n  UiRangepicker: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiRangepicker from &#39;balm-ui/components/rangepicker&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/textfield.css&#39;;\nimport &#39;balm-ui/components/datepicker.css&#39;;\nimport &#39;balm-ui/components/rangepicker.css&#39;;\nimport &#39;flatpickr/dist/flatpickr.min.css&#39;;\n\n// Optional. Overwrite `&lt;ui-rangepicker&gt;` props.\nVue.use(UiRangepicker, {\n  // some props\n});</code></pre>\n'},CjlG:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tab-bar&gt;&lt;!-- the tab components --&gt;&lt;/ui-tab-bar&gt;</code></pre>\n<h4 id="ui-tab-bar--ui-tabs-common-props"><code>&lt;ui-tab-bar&gt;</code> &amp; <code>&lt;ui-tabs&gt;</code> common Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>active</code> (<code>v-model</code>)</td>\n<td>number</td>\n<td><code>0</code></td>\n<td>Mandatory.</td>\n</tr>\n</tbody></table>\n<h4 id="ui-tab-bar-slots"><code>&lt;ui-tab-bar&gt;</code> Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the tab scroller and tab components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<h4 id="ui-tab-bar--ui-tabs-common-events"><code>&lt;ui-tab-bar&gt;</code> &amp; <code>&lt;ui-tabs&gt;</code> common Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(model: number)</code></td>\n<td>Emits when the tab is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the tabs using <code>@change</code> and update the <code>active</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-tab-bar v-model=&quot;active&quot;&gt;&lt;/ui-tab-bar&gt;\n&lt;ui-tabs v-model=&quot;active&quot;&gt;&lt;/ui-tabs&gt;\n\n// Manual\n&lt;ui-tab-bar\n  :active=&quot;active&quot;\n  @change=&quot;$balmUI.onChange(&#39;active&#39;, $event)&quot;\n&gt;&lt;/ui-tab-bar&gt;\n&lt;ui-tabs\n  :active=&quot;active&quot;\n  @change=&quot;$balmUI.onChange(&#39;active&#39;, $event)&quot;\n&gt;&lt;/ui-tabs&gt;</code></pre>\n'},Dj3i:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-menu&gt;&lt;!-- the menuitem components --&gt;&lt;/ui-menu&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>open</code> (<code>v-model</code>)</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>items</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Menu items.</td>\n</tr>\n<tr>\n<td><code>quickOpen</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Turn off menu open animations.</td>\n</tr>\n<tr>\n<td><code>cssOnly</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Show static menu.</td>\n</tr>\n<tr>\n<td><code>position</code></td>\n<td>string</td>\n<td><code>&#39;TOP_LEFT&#39;</code></td>\n<td>Menu position to the menu button.</td>\n</tr>\n<tr>\n<td><code>margin</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Anchor margin. Value: <code>top(px) right(px) bottom(px) left(px)</code>.</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Used to indicate that the menu is using fixed positioning.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>Anchor corners: <code>TOP_LEFT</code>, <code>TOP_RIGHT</code>, <code>BOTTOM_LEFT</code>, <code>BOTTOM_RIGHT</code>, <code>TOP_START</code>, <code>TOP_END</code>, <code>BOTTOM_START</code>, <code>BOTTOM_END</code>.</li>\n</ul>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the menuitem components.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(open: boolean)</code></td>\n<td>Emits when the menu is changed.</td>\n</tr>\n<tr>\n<td><code>selected</code></td>\n<td><code>function(menuitem: object)</code></td>\n<td>Emits when an element has been selected.</td>\n</tr>\n<tr>\n<td><code>closed</code></td>\n<td><code>function()</code></td>\n<td>Emits when the menu is closed.</td>\n</tr>\n<tr>\n<td><code>opened</code></td>\n<td><code>function()</code></td>\n<td>Emits when the menu is opened.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>selected</code> event return data:</li>\n</ul>\n<pre><code class="language-js">{\n  item: object,  // menuitem HTMLElement\n  index: number, // menuitem index\n  label: string // menuitem text\n}</code></pre>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the menu using <code>@change</code> and update the <code>open</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-menu v-model=&quot;open&quot;&gt;&lt;/ui-menu&gt;\n\n// Manual\n&lt;ui-menu :open=&quot;open&quot; @change=&quot;$balmUI.onChange(&#39;open&#39;, $event)&quot;&gt;&lt;/ui-menu&gt;</code></pre>\n'},DmyQ:function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;container&quot; v-anchor&gt;\n  &lt;ui-button raised v-anchor:href=&quot;&#39;#target1&#39;&quot;&gt;Anchor 1&lt;/ui-button&gt;\n  &lt;ui-button outlined v-anchor:href=&quot;&#39;#target2&#39;&quot;&gt;Anchor 2&lt;/ui-button&gt;\n\n  &lt;div v-anchor:id=&quot;&#39;target1&#39;&quot;&gt;Target 1&lt;/div&gt;\n  &lt;div v-anchor:id=&quot;&#39;target2&#39;&quot;&gt;Target 2&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n'},EGEq:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-datepicker\n  noLabel\n  placeholder=&quot;Select Date Range..&quot;\n  :config=&quot;config&quot;\n  v-model=&quot;date&quot;\n&gt;&lt;/ui-datepicker&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      config: {\n        mode: &#39;range&#39;\n      },\n      date: [&#39;2017-11-10&#39;, &#39;2017-11-20&#39;]\n    };\n  }\n};</code></pre>\n'},EQdG:function(t,e){t.exports='<pre><code class="language-html">&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Start Alignment&lt;/h6&gt;\n&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-bar v-model=&quot;active&quot; align=&quot;start&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot; minWidth&gt;\n      {{ tab.text }}\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;\n\n&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Center Alignment&lt;/h6&gt;\n&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-bar v-model=&quot;active&quot; align=&quot;center&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot; minWidth&gt;\n      {{ tab.text }}\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;\n\n&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;End Alignment&lt;/h6&gt;\n&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-bar v-model=&quot;active&quot; align=&quot;end&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot; minWidth&gt;\n      {{ tab.text }}\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;</code></pre>\n'},F72u:function(t,e){t.exports='<pre><code class="language-css">$mdc-autocomplete-outlined-idle-border: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.24\n);\n$mdc-autocomplete-item-selected-bgcolor: rgba(\n  mdc-theme-prop-value(primary),\n  0.54\n);</code></pre>\n'},FArz:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list :type=&quot;2&quot; avatar&gt;\n  &lt;template v-for=&quot;(item, index) in items&quot;&gt;\n    &lt;ui-item-divider v-if=&quot;item === &#39;-&#39;&quot; :key=&quot;index&quot;&gt;&lt;/ui-item-divider&gt;\n    &lt;ui-item v-else :key=&quot;index&quot;&gt;\n      &lt;template #before=&quot;{ iconClass }&quot;&gt;\n        &lt;ui-icon :class=&quot;iconClass&quot;&gt;folder&lt;/ui-icon&gt;\n      &lt;/template&gt;\n      &lt;ui-item-text-content&gt;\n        &lt;ui-item-text1&gt;{{ item.text }}&lt;/ui-item-text1&gt;\n        &lt;ui-item-text2&gt;{{ item.subtext }}&lt;/ui-item-text2&gt;\n      &lt;/ui-item-text-content&gt;\n      &lt;ui-item-last-content&gt;\n        &lt;ui-icon&gt;info&lt;/ui-icon&gt;\n      &lt;/ui-item-last-content&gt;\n    &lt;/ui-item&gt;\n  &lt;/template&gt;\n&lt;/ui-list&gt;</code></pre>\n'},FEV4:function(t,e){t.exports='<pre><code class="language-css">$mdc-rangepicker-separator-padding: 10px;\n\n$mdc-rangepicker-mobile-breakpoint: 599px;</code></pre>\n'},FKpq:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-form-field&gt;\n  &lt;ui-checkbox id=&quot;checkbox&quot; v-model=&quot;checked&quot;&gt;&lt;/ui-checkbox&gt;\n  &lt;label for=&quot;checkbox&quot;&gt;{{checked}}&lt;/label&gt;\n&lt;/ui-form-field&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      checked: false\n    };\n  }\n};</code></pre>\n'},FME5:function(t,e){t.exports='<pre><code class="language-html">&lt;section&gt;\n  &lt;ui-select v-model=&quot;selected&quot;&gt;\n    Food Group\n  &lt;/ui-select&gt;\n&lt;/section&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      selected: &#39;fruit-roll-ups&#39;\n    };\n  }\n};</code></pre>\n'},FUGW:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card class=&quot;demo-card demo-card--photo&quot;&gt;\n  &lt;ui-card-content class=&quot;demo-card__primary-action&quot; v-ripple&gt;\n    &lt;ui-card-media square class=&quot;demo-card__media&quot;&gt;\n      &lt;ui-card-media-content class=&quot;demo-card__media-content--with-title&quot;&gt;\n        &lt;div :class=&quot;[$tt(&#39;subtitle2&#39;), &#39;demo-card__media-title&#39;]&quot;&gt;\n          Vacation Photos\n        &lt;/div&gt;\n      &lt;/ui-card-media-content&gt;\n    &lt;/ui-card-media&gt;\n  &lt;/ui-card-content&gt;\n  &lt;ui-card-actions&gt;\n    &lt;ui-card-icons&gt;\n      &lt;ui-icon-button actionIcon :on=&quot;icon1.on&quot; :off=&quot;icon1.off&quot;&gt;&lt;/ui-icon-button&gt;\n      &lt;ui-icon-button actionIcon :on=&quot;icon2.on&quot; :off=&quot;icon2.off&quot;&gt;&lt;/ui-icon-button&gt;\n      &lt;ui-icon-button actionIcon&gt;share&lt;/ui-icon-button&gt;\n    &lt;/ui-card-icons&gt;\n  &lt;/ui-card-actions&gt;\n&lt;/ui-card&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      icon1: {\n        on: {\n          content: &#39;favorite&#39;,\n          label: &#39;Remove From Favorites&#39;\n        },\n        off: {\n          content: &#39;favorite_border&#39;,\n          label: &#39;Add to Favorites&#39;\n        }\n      },\n      icon2: {\n        on: {\n          content: &#39;bookmark&#39;,\n          label: &#39;Remove bookmark&#39;\n        },\n        off: {\n          content: &#39;bookmark_border&#39;,\n          label: &#39;Add bookmark&#39;\n        }\n      }\n    };\n  }\n};</code></pre>\n<pre><code class="language-css">.demo-card {\n  width: 350px;\n  margin: 48px;\n}\n\n.demo-card--photo {\n  width: 200px;\n}\n\n.demo-card__media {\n  background-image: url(&#39;../images/1-1.jpg&#39;);\n}\n\n.demo-card__media-content--with-title {\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n}\n\n.demo-card__media-title {\n  padding: 8px 16px;\n  background-image: linear-gradient(\n    to bottom,\n    rgba(0, 0, 0, 0) 0%,\n    rgba(0, 0, 0, 0.5) 100%\n  );\n  color: white;\n}</code></pre>\n'},Fd0s:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button raised @click=&quot;$toast(&#39;gg&#39;)&quot;&gt;Show Toast&lt;/ui-button&gt;</code></pre>\n'},FlZy:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-chips type=&quot;choice&quot; v-model=&quot;selectedIndex&quot;&gt;\n  &lt;ui-chip\n    v-if=&quot;choiceList.length&quot;\n    v-for=&quot;(item, index) in choiceList&quot;\n    :key=&quot;index&quot;\n  &gt;\n    {{ item }}\n  &lt;/ui-chip&gt;\n&lt;/ui-chips&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      selectedIndex: 2,\n      choiceList: [&#39;Extra Small&#39;, &#39;Small&#39;, &#39;Medium&#39;, &#39;Large&#39;, &#39;Extra Large&#39;]\n    };\n  }\n};</code></pre>\n'},Fto1:function(t,e){t.exports='<pre><code class="language-css">$mdc-image-list-standard-gutter-size: 4px;\n$mdc-image-list-masonry-gutter-size: 16px;\n$mdc-image-list-icon-size: 24px;\n$mdc-image-list-text-protection-background-color: rgba(0, 0, 0, 0.6);\n$mdc-image-list-text-protection-height: 48px;\n$mdc-image-list-text-protection-horizontal-padding: 16px;</code></pre>\n'},Glxx:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-skeleton&gt;&lt;!-- (the loaded data) --&gt;&lt;/ui-skeleton&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>loading</code></td>\n<td>boolean</td>\n<td><code>true</code></td>\n<td>Display the skeleton.</td>\n</tr>\n<tr>\n<td><code>active</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Show animation effect.</td>\n</tr>\n<tr>\n<td><code>avatar</code></td>\n<td>boolean, object</td>\n<td><code>false</code></td>\n<td>Show avatar placeholder.</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>boolean, object</td>\n<td><code>true</code></td>\n<td>Show title placeholder.</td>\n</tr>\n<tr>\n<td><code>paragraph</code></td>\n<td>boolean, object</td>\n<td><code>true</code></td>\n<td>Show paragraph placeholder.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>avatar</code> object<ul>\n<li><code>avatar.size: string | number</code>: Set the size of avatar (<code>&#39;large&#39;</code> or <code>&#39;small&#39;</code>)</li>\n<li><code>avatar.shape: string</code>: Set the shape of avatar (<code>&#39;circle&#39;</code> or <code>&#39;square&#39;</code>)</li>\n</ul>\n</li>\n<li><code>title</code> object<ul>\n<li><code>title.width: string</code>: Set the width of title</li>\n</ul>\n</li>\n<li><code>paragraph</code> object<ul>\n<li><code>paragraph.width: string</code>: Set the width of paragraph</li>\n<li><code>paragraph.rows: number</code>: Set the row count of paragraph</li>\n</ul>\n</li>\n</ul>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the any components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;ui-skeleton v-model=&quot;loading&quot; active&gt;\n  Loaded data content\n&lt;/ui-skeleton&gt;</code></pre>\n'},Gna0:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button raised @click=&quot;show&quot;&gt;Confrim&lt;/ui-button&gt;</code></pre>\n<pre><code class="language-js">export default {\n  methods: {\n    show() {\n      this.$confirm({\n        message: &#39;Do you like BalmJS?&#39;,\n        acceptText: &#39;Cool&#39;,\n        cancelText: &#39;Good&#39;\n      }).then(result =&gt; {\n        if (result) {\n          this.$alert(&#39;Thanks :)&#39;);\n        }\n      });\n    }\n  }\n};</code></pre>\n'},GpIQ:function(t,e){t.exports='<pre><code class="language-css">$mdc-checkbox-mark-color: mdc-theme-prop-value(on-primary);\n$mdc-checkbox-border-color: rgba(mdc-theme-prop-value(on-surface), 0.54);\n$mdc-checkbox-disabled-color: rgba(mdc-theme-prop-value(on-surface), 0.26);\n$mdc-checkbox-baseline-theme-color: secondary;\n\n$mdc-checkbox-touch-area: 40px;\n$mdc-checkbox-size: 18px;\n$mdc-checkbox-mark-stroke-size: 2/15 * $mdc-checkbox-size;\n$mdc-checkbox-border-width: 2px;\n$mdc-checkbox-transition-duration: 90ms;\n$mdc-checkbox-item-spacing: 4px;\n$mdc-checkbox-focus-indicator-opacity: map-get(\n  $mdc-ripple-dark-ink-opacities,\n  focus\n);\n\n$mdc-checkbox-minimum-size: 28px;\n$mdc-checkbox-maximum-size: $mdc-checkbox-ripple-size;\n$mdc-checkbox-density-scale: $mdc-density-default-scale;\n$mdc-checkbox-density-config: (\n  size: (\n    minimum: $mdc-checkbox-minimum-size,\n    default: $mdc-checkbox-ripple-size,\n    maximum: $mdc-checkbox-maximum-size\n  )\n);\n\n/* Manual calculation done on SVG */\n$mdc-checkbox-mark-path-length_: 29.7833385;\n$mdc-checkbox-indeterminate-checked-easing-function_: cubic-bezier(\n  0.14,\n  0,\n  0,\n  1\n);</code></pre>\n'},GuLE:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button raised @click=&quot;$balmUI.onShow(&#39;open&#39;)&quot;&gt;Open dialog&lt;/ui-button&gt;\n\n&lt;ui-dialog v-model=&quot;open&quot;&gt;\n  &lt;ui-dialog-content&gt;\n    Dialog content\n  &lt;/ui-dialog-content&gt;\n  &lt;ui-dialog-actions&gt;\n    &lt;ui-button @click=&quot;$balmUI.onHide(&#39;open&#39;)&quot;&gt;Close dialog&lt;/ui-button&gt;\n  &lt;/ui-dialog-actions&gt;\n&lt;/ui-dialog&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      open: false\n    };\n  }\n};</code></pre>\n'},H0rg:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `$confirm` options.\n  confirm: {\n    // some options\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport confirm from &#39;balm-ui/plugins/confirm&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/button.css&#39;;\nimport &#39;balm-ui/components/dialog.css&#39;;\nimport &#39;balm-ui/plugins/confirm.css&#39;;\n\n// Optional. Overwrite `$confirm` options.\nVue.use(confirm, {\n  // some options\n});</code></pre>\n'},HJdF:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `&lt;ui-autocomplete&gt;` props.\n  UiAutocomplete: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiAutocomplete from &#39;balm-ui/components/autocomplete&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/textfield.css&#39;;\nimport &#39;balm-ui/components/autocomplete.css&#39;;\n\n// Optional. Overwrite `&lt;ui-autocomplete&gt;` props.\nVue.use(UiAutocomplete, {\n  // some props\n});</code></pre>\n'},HRpM:function(t,e,n){"use strict";var o=n("o+MX"),d=n.n(o);e.a={data:function(){return{demo:{name:"",count:0},code:[],docs:{}}},methods:{showCode:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(this.demo={name:t,count:e},this.demo.name)for(var o=0;o<=this.demo.count;o++){var l,a=d()(l="".concat(this.demo.name,"/demo")).call(l,o),i=n("ddae")("./".concat(a,".md"));this.code.push(i)}else console.warn("The snippet name is required. You can run `showCode(snippetName, snippetCount)` for it.")},showDocs:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e?this.docs.css=n("kQAz")("./".concat(t,".md")):this.docs[t]=n("k97a")("./".concat(t,".md"))},initDocs:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{code:0,apis:[],css:!1};this.showCode(t,e.code);for(var n=e.apis,o="",d=0,l=n.length;d<l;d++)0===d&&(o=n[d]),this.showDocs(n[d]);e.css&&o&&this.showDocs(t,o)}}}},Hpe4:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tab-bar class=&quot;custom-demo&quot; v-model=&quot;active&quot;&gt;\n  &lt;ui-tab\n    v-for=&quot;(tab, index) in tabs&quot;\n    :key=&quot;index&quot;\n    class=&quot;demo-tab custom-tab&quot;\n    type=&quot;both&quot;\n    :icon=&quot;tab.icon&quot;\n    stacked\n    contentIndicator\n  &gt;\n    {{ tab.text }}\n    &lt;template #indicator&gt;\n      &lt;ui-tab-indicator class=&quot;custom-tab-indicator&quot;&gt;&lt;/ui-tab-indicator&gt;\n    &lt;/template&gt;\n  &lt;/ui-tab&gt;\n&lt;/ui-tab-bar&gt;</code></pre>\n<pre><code class="language-css">/* Sass code */\n.demo-tab {\n  flex: 0 1 auto;\n}\n\n.custom-tab {\n  @include mdc-tab-text-label-color($material-color-blue-300);\n  @include mdc-tab-icon-color($material-color-orange-300);\n  .custom-tab-indicator {\n    @include mdc-tab-indicator-underline-color($material-color-pink-a700);\n    @include mdc-tab-indicator-underline-height(5px);\n    @include mdc-tab-indicator-underline-top-corner-radius(5px);\n  }\n  .mdc-tab__ripple {\n    @include mdc-states($material-color-pink-100);\n  }\n  &amp;.mdc-tab--active {\n    @include mdc-tab-text-label-color($material-color-blue-900);\n    @include mdc-tab-icon-color($material-color-orange-900);\n  }\n}</code></pre>\n'},"Hs+w":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-fab extended&gt;\n  &lt;template #before=&quot;{ iconClass }&quot;&gt;\n    &lt;ui-icon :class=&quot;iconClass&quot;&gt;add&lt;/ui-icon&gt;\n  &lt;/template&gt;\n  &lt;span&gt;Create&lt;/span&gt;\n&lt;/ui-fab&gt;\n\n&lt;ui-fab extended&gt;\n  &lt;span&gt;Create&lt;/span&gt;\n  &lt;template #after=&quot;{ iconClass }&quot;&gt;\n    &lt;ui-icon :class=&quot;iconClass&quot;&gt;add&lt;/ui-icon&gt;\n  &lt;/template&gt;\n&lt;/ui-fab&gt;\n\n&lt;ui-fab extended&gt;Create&lt;/ui-fab&gt;</code></pre>\n'},I9yt:function(t,e){t.exports='<pre><code class="language-html">&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Text Label Width-Matching Indicator&lt;/h6&gt;\n&lt;div class=&quot;example&quot;&gt;\n  &lt;ui-tab-bar v-model=&quot;active&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot; contentIndicator&gt;\n      {{ tab.text }}\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;\n\n&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Text Label with Icon Indicator&lt;/h6&gt;\n&lt;div class=&quot;example&quot;&gt;\n  &lt;ui-tab-bar v-model=&quot;active&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot;&gt;\n      {{ tab.text }}\n      &lt;template #indicator&gt;\n        &lt;ui-tab-indicator type=&quot;icon&quot;&gt;{{ tab.indicator }}&lt;/ui-tab-indicator&gt;\n      &lt;/template&gt;\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      active: 0,\n      tabs: [\n        {\n          text: &#39;Favorites&#39;,\n          icon: &#39;favorite&#39;,\n          indicator: &#39;crop_square&#39;\n        },\n        {\n          text: &#39;Recents&#39;,\n          icon: &#39;phone&#39;,\n          indicator: &#39;panorama_fish_eye&#39;\n        },\n        {\n          text: &#39;Nearby&#39;,\n          icon: &#39;near_me&#39;,\n          indicator: &#39;change_history&#39;\n        }\n      ]\n    };\n  }\n};</code></pre>\n'},IXGA:function(t,e){t.exports='<pre><code class="language-css">$mdc-linear-progress-baseline-buffer-color: #e6e6e6;</code></pre>\n'},IfBE:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-select-helper&gt;&lt;!-- the helper text --&gt;&lt;/ui-select-helper&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>id</code></td>\n<td>string</td>\n<td>(required)</td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>visible</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Makes the helper text permanently visible.</td>\n</tr>\n<tr>\n<td><code>validMsg</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td>Indicates the helper text is a validation message.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the select helper text and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},J8fo:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-drawer&gt;&lt;!-- the drawer child components --&gt;&lt;/ui-drawer&gt;</code></pre>\n<h3 id="ui-drawer-types"><code>&lt;ui-drawer&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;permanent&#39;</code></li>\n<li><code>1</code>: <code>&#39;dismissible&#39;</code></li>\n<li><code>2</code>: <code>&#39;modal&#39;</code></li>\n</ul>\n<p><strong>NOTE:</strong></p>\n<ul>\n<li><code>&lt;ui-drawer&gt;</code> (<code>type=&quot;permanent&quot;</code>) has not props and events.</li>\n<li><code>&lt;ui-drawer type=&quot;dismissible&quot;&gt;</code> and <code>&lt;ui-drawer type=&quot;modal&quot;&gt;</code> must be including a <code>&lt;ui-list&gt;</code> or <code>&lt;ui-nav&gt;</code>. And the first <code>&lt;ui-item&gt;</code> or <code>&lt;ui-a&gt;</code> needs to apply activated state in the drawer.</li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Button types.</td>\n</tr>\n<tr>\n<td><code>menuSelector</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The external menu button selector.</td>\n</tr>\n<tr>\n<td><code>open</code> (<code>v-model</code>)</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>The drawer toggle state.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the drawer child components.</td>\n</tr>\n</tbody></table>\n<p><strong>Drawer child components:</strong></p>\n<ul>\n<li><code>&lt;ui-drawer-header&gt;</code></li>\n<li><code>&lt;ui-drawer-content&gt;</code></li>\n</ul>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>nav</code></td>\n<td><code>function(open: boolean)</code></td>\n<td>Emits when the drawer is opened or closed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the drawer using <code>@nav</code> and update the <code>open</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-drawer type=&quot;modal&quot; v-model=&quot;open&quot;&gt;&lt;/ui-drawer&gt;\n\n// Manual\n&lt;ui-drawer\n  type=&quot;modal&quot;\n  :open=&quot;open&quot;\n  @nav=&quot;$balmUI.onChange(&#39;open&#39;, $event)&quot;\n&gt;&lt;/ui-drawer&gt;</code></pre>\n'},JOt9:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list-group&gt;\n  &lt;ui-list-group-subheader&gt;&lt;!-- heading text --&gt;&lt;/ui-list-group-subheader&gt;\n  &lt;ui-list&gt;&lt;!-- the item components --&gt;&lt;/ui-list&gt;\n\n  &lt;ui-list-divider&gt;&lt;/ui-list-divider&gt;\n\n  &lt;ui-list-group-subheader&gt;&lt;!-- heading text --&gt;&lt;/ui-list-group-subheader&gt;\n  &lt;ui-list&gt;&lt;!-- the item components --&gt;&lt;/ui-list&gt;\n&lt;/ui-list-group&gt;</code></pre>\n'},Jec5:function(t,e){t.exports='<pre><code class="language-css">$mdc-select-arrow-padding: 52px;\n$mdc-select-label-padding: 16px;\n$mdc-select-height: 56px;\n$mdc-select-icon-padding: 48px;\n\n$mdc-select-ink-color: rgba(mdc-theme-prop-value(on-surface), 0.87);\n$mdc-select-dropdown-color: mdc-theme-prop-value(on-surface);\n$mdc-select-icon-color: rgba(mdc-theme-prop-value(on-surface), 0.54);\n$mdc-select-label-color: rgba(mdc-theme-prop-value(on-surface), 0.6);\n$mdc-select-focused-label-color: rgba(mdc-theme-prop-value(primary), 0.87);\n$mdc-select-bottom-line-idle-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.42\n);\n$mdc-select-bottom-line-hover-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.87\n);\n$mdc-select-helper-text-color: rgba(mdc-theme-prop-value(on-surface), 0.6);\n\n$mdc-select-fill-color: mix(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-prop-value(surface),\n  4%\n);\n\n$mdc-select-dropdown-opacity: 0.54;\n\n/* Disabled Styles */\n$mdc-select-disabled-label-color: rgba(mdc-theme-prop-value(on-surface), 0.37);\n$mdc-select-disabled-icon-color: rgba(mdc-theme-prop-value(on-surface), 0.37);\n$mdc-select-disabled-ink-color: rgba(mdc-theme-prop-value(on-surface), 0.37);\n$mdc-select-disabled-fill-color: mix(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-prop-value(surface),\n  2%\n);\n$mdc-select-disabled-dropdown-opacity: 0.37;\n\n$mdc-select-outlined-idle-border: rgba(mdc-theme-prop-value(on-surface), 0.38);\n$mdc-select-outlined-hover-border: rgba(mdc-theme-prop-value(on-surface), 0.87);\n\n/* should be .06 after mdc-select opacity is applied */\n$mdc-select-outlined-disabled-border: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.16\n);\n\n$mdc-select-label-position-y: 70%;\n$mdc-select-outline-label-offset: 16px;\n$mdc-select-outlined-label-position-y: 130%;\n$mdc-select-outlined-dense-label-position-y: 110%;\n$mdc-select-outlined-with-leading-icon-label-position-x: 32px;\n\n$mdc-select-dropdown-transition-duration: 150ms;\n\n/* Error colors */\n$mdc-select-error-color: error;</code></pre>\n'},Js8M:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-fab icon=&quot;favorite_border&quot;&gt;&lt;/ui-fab&gt;\n&lt;ui-fab icon=&quot;favorite_border&quot; mini&gt;&lt;/ui-fab&gt;\n\n&lt;ui-fab&gt;\n  &lt;template #default=&quot;{ iconClass }&quot;&gt;\n    &lt;svg-logo :class=&quot;iconClass&quot;&gt;&lt;/svg-logo&gt;\n  &lt;/template&gt;\n&lt;/ui-fab&gt;\n&lt;ui-fab mini&gt;\n  &lt;template #default=&quot;{ iconClass }&quot;&gt;\n    &lt;svg-logo :class=&quot;iconClass&quot;&gt;&lt;/svg-logo&gt;\n  &lt;/template&gt;\n&lt;/ui-fab&gt;</code></pre>\n'},K6aE:function(t,e){t.exports='<pre><code class="language-css">$mdc-text-field-error: error;\n$mdc-text-field-fullwidth-bottom-line-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.12\n);\n$mdc-text-field-disabled-border: rgba(mdc-theme-prop-value(on-surface), 0.06);\n$mdc-text-field-disabled-icon: rgba(mdc-theme-prop-value(on-surface), 0.3);\n$mdc-text-field-bottom-line-hover: rgba(mdc-theme-prop-value(on-surface), 0.87);\n$mdc-text-field-bottom-line-idle: rgba(mdc-theme-prop-value(on-surface), 0.42);\n$mdc-text-field-label: rgba(mdc-theme-prop-value(on-surface), 0.6);\n\n$mdc-text-field-ink-color: rgba(mdc-theme-prop-value(on-surface), 0.87);\n$mdc-text-field-helper-text-color: rgba(mdc-theme-prop-value(on-surface), 0.6);\n$mdc-text-field-icon-color: rgba(mdc-theme-prop-value(on-surface), 0.54);\n$mdc-text-field-focused-label-color: rgba(mdc-theme-prop-value(primary), 0.87);\n$mdc-text-field-placeholder-ink-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.54\n);\n\n$mdc-text-field-disabled-label-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.37\n);\n$mdc-text-field-disabled-ink-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.37\n);\n$mdc-text-field-disabled-helper-text-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.37\n);\n\n$mdc-text-field-background: mix(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-prop-value(surface),\n  4%\n);\n$mdc-text-field-disabled-background: mix(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-prop-value(surface),\n  2%\n);\n$mdc-text-field-secondary-text: rgba(mdc-theme-prop-value(on-surface), 0.6);\n\n$mdc-text-field-outlined-idle-border: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.38\n);\n$mdc-text-field-outlined-disabled-border: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.06\n);\n$mdc-text-field-outlined-hover-border: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.87\n);\n\n$mdc-textarea-border: rgba(mdc-theme-prop-value(on-surface), 0.73);\n$mdc-textarea-background: rgba(mdc-theme-prop-value(surface), 1);\n$mdc-textarea-disabled-border-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  0.26\n);\n/* Cannot be transparent because multiline textarea input\n   will make text unreadable */\n$mdc-textarea-disabled-background: rgba(249, 249, 249, 1);\n\n$mdc-text-field-outlined-stroke-width: 2px;\n$mdc-text-field-height: 56px;\n$mdc-text-field-minimum-height: 40px;\n$mdc-text-field-maximum-height: $mdc-text-field-height;\n$mdc-text-field-density-scale: $mdc-density-default-scale;\n$mdc-text-field-density-config: (\n  height: (\n    default: $mdc-text-field-height,\n    maximum: $mdc-text-field-maximum-height,\n    minimum: $mdc-text-field-minimum-height\n  )\n);\n$mdc-text-field-label-position-y: $mdc-floating-label-position-y;\n$mdc-text-field-label-offset: 16px;\n$mdc-text-field-dense-label-position-y: 70%;\n$mdc-text-field-dense-label-scale: 0.8;\n$mdc-text-field-outlined-label-position-y: mdc-text-field-get-outlined-label-position-y(\n  $mdc-text-field-height\n);\n$mdc-text-field-outlined-dense-label-position-y: 120%;\n$mdc-text-field-outlined-with-leading-icon-label-position-x: 0;\n$mdc-text-field-outlined-dense-with-leading-icon-label-position-x: 21px;\n$mdc-text-field-textarea-label-position-y: 130%;\n$mdc-text-field-helper-line-padding: 16px;\n$mdc-text-field-input-padding: 16px;\n$mdc-text-field-input-padding-top: 20px;\n$mdc-text-field-input-padding-bottom: 6px;\n$mdc-text-field-input-border-bottom: 1px;</code></pre>\n'},KMbe:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-top-app-bar contentSelector=&quot;.demo-main&quot;&gt;\n  &lt;template #nav-icon&gt;\n    &lt;ui-icon @click=&quot;$router.back()&quot;&gt;arrow_back&lt;/ui-icon&gt;\n  &lt;/template&gt;\n  Permanent Drawer Below Toolbar\n&lt;/ui-top-app-bar&gt;\n\n&lt;main class=&quot;demo-main&quot;&gt;\n  &lt;ui-drawer&gt;\n    &lt;ui-drawer-header&gt;\n      &lt;ui-drawer-title&gt;{{ title }}&lt;/ui-drawer-title&gt;\n      &lt;ui-drawer-subtitle&gt;{{ subtitle }}&lt;/ui-drawer-subtitle&gt;\n    &lt;/ui-drawer-header&gt;\n    &lt;ui-drawer-content&gt;\n      &lt;ui-list&gt;\n        &lt;template v-for=&quot;(item, index) in menu&quot;&gt;\n          &lt;ui-list-divider\n            v-if=&quot;item === &#39;-&#39;&quot;\n            :key=&quot;`divider-${index}`&quot;\n          &gt;&lt;/ui-list-divider&gt;\n          &lt;template v-else&gt;\n            &lt;ui-list-group-subheader\n              v-if=&quot;item.subheader&quot;\n              :key=&quot;`subheader-${index}`&quot;\n            &gt;\n              {{ item.subheader }}\n            &lt;/ui-list-group-subheader&gt;\n            &lt;ui-item\n              v-for=&quot;(subItem, subIndex) in item.items&quot;\n              :key=&quot;`item-${index}-${subIndex}`&quot;\n            &gt;\n              &lt;ui-item-first-content&gt;\n                &lt;ui-icon&gt;{{ subItem.icon }}&lt;/ui-icon&gt;\n              &lt;/ui-item-first-content&gt;\n              &lt;ui-item-text-content&gt;{{ subItem.name }}&lt;/ui-item-text-content&gt;\n            &lt;/ui-item&gt;\n          &lt;/template&gt;\n        &lt;/template&gt;\n      &lt;/ui-list&gt;\n    &lt;/ui-drawer-content&gt;\n  &lt;/ui-drawer&gt;\n\n  &lt;div :class=&quot;[$tt(&#39;body1&#39;), &#39;demo-content&#39;]&quot;&gt;\n    &lt;div :class=&quot;$tt(&#39;body2&#39;)&quot;&gt;\n      &lt;h1 :class=&quot;$tt(&#39;headline4&#39;)&quot;&gt;Permanent Drawer&lt;/h1&gt;\n      &lt;p&gt;It sits to the left of this content.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/main&gt;</code></pre>\n'},LCqv:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button @click=&quot;$balmUI.onChange(&#39;message&#39;, &#39;Hello BalmUI&#39;)&quot;&gt;Show message&lt;/ui-button&gt;\n&lt;ui-button @click=&quot;$balmUI.onChange(&#39;message&#39;, &#39;&#39;)&quot;&gt;Clear&lt;/ui-button&gt;\n\n&lt;p&gt;{{ message }}&lt;/p&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      message: &#39;No message&#39;\n    };\n  }\n};</code></pre>\n'},LMuM:function(t,e){t.exports='<pre><code class="language-html">&lt;!-- Single line text field --&gt;\n&lt;ui-textfield maxlength=&quot;40&quot;&gt;&lt;/ui-textfield&gt;\n&lt;ui-textfield-helper counter&gt;&lt;/ui-textfield-helper&gt;\n\n&lt;!-- Textarea --&gt;\n&lt;ui-textfield inputType=&quot;textarea&quot; maxlength=&quot;140&quot;&gt;&lt;/ui-textfield&gt;</code></pre>\n<blockquote>\n<p><code>maxlength</code> is required.</p>\n</blockquote>\n'},LhwM:function(t,e){t.exports='<pre><code class="language-js">$validate(formData, customFieldset);</code></pre>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>formData</code></td>\n<td>object</td>\n<td><code>{}</code></td>\n<td>Mandatory. A form data object.</td>\n</tr>\n<tr>\n<td><code>customFieldset</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Optional. The field names of the validations.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>BalmUI validator rules format:</li>\n</ul>\n<pre><code class="language-js">{\n  fieldName1: {\n    validate(fieldValue1, formData) {\n      // Validation method\n      return true;\n    },\n    message: &#39;%s is required&#39;\n  },\n  // More rules\n  // fieldName2: { ... }\n}</code></pre>\n<ul>\n<li>Usage in a vue component:</li>\n</ul>\n<pre><code class="language-js">export default {\n  // Define validator\n  validations: {\n    fieldName: {\n      label: &#39;Field Label&#39;,\n      validator: &#39;required, customRule1&#39;,\n      customRule1: {\n        validate(fieldValue, formData) {\n          // Validation method\n          return true;\n        },\n        message: &#39;Invalid format&#39;\n      }\n      // customRule2: { ... }\n    }\n  },\n  data() {\n    return {\n      formData: {\n        fieldName: &#39;&#39;\n      },\n      validMsg: {\n        fieldName: &#39;&#39;\n      }\n    };\n  },\n  methods: {\n    submit() {\n      let {\n        valid,\n        validFields,\n        invalidFields,\n        messages,\n        message,\n        validMsg\n      } = this.$validate(this.formData);\n\n      this.validMsg = validMsg;\n    }\n  }\n};</code></pre>\n<table>\n<thead>\n<tr>\n<th>Result</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>valid</code></td>\n<td>boolean</td>\n<td>The validator result.</td>\n</tr>\n<tr>\n<td><code>validFields</code></td>\n<td>array</td>\n<td>Valid fields.</td>\n</tr>\n<tr>\n<td><code>invalidFields</code></td>\n<td>array</td>\n<td>Invalid fields.</td>\n</tr>\n<tr>\n<td><code>messages</code></td>\n<td>array</td>\n<td>The messages of all invalid fields.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>string</td>\n<td>The message of the first invalid field.</td>\n</tr>\n<tr>\n<td><code>validMsg</code></td>\n<td>object</td>\n<td>The messages as an object. (Same format as <code>formData</code>)</td>\n</tr>\n</tbody></table>\n'},LxQT:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-button&gt;` and `&lt;ui-a&gt;` props.\n  UiButton: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiButtonComponents from &#39;balm-ui/components/button&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/button.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;; // Optional.\n\nVue.use(UiButtonComponents, {\n  // Optional. Overwrite `&lt;ui-button&gt;` and `&lt;ui-a&gt;` props.\n  UiButton: {\n    // some props\n  }\n});</code></pre>\n'},"M+pS":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield-helper&gt;&lt;!-- the helper text --&gt;&lt;/ui-textfield-helper&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>id</code></td>\n<td>string</td>\n<td>(required)</td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>visible</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Makes the helper text permanently visible.</td>\n</tr>\n<tr>\n<td><code>validMsg</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td>Indicates the helper text is a validation message.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the text field helper text and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},"M/Uc":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-text-divider&gt;&lt;!-- Inline Text --&gt;&lt;/ui-text-divider&gt;</code></pre>\n<h3 id="ui-text-divider-types"><code>&lt;ui-text-divider&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;horizontal&#39;</code></li>\n<li><code>1</code>: <code>&#39;vertical&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Text divider types.</td>\n</tr>\n<tr>\n<td><code>noText</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Show divider without text.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the divider text and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>left</code></td>\n<td></td>\n<td>Applicable only for the vertical text divider.</td>\n</tr>\n<tr>\n<td><code>right</code></td>\n<td></td>\n<td>Applicable only for the vertical text divider.</td>\n</tr>\n</tbody></table>\n'},MW7G:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-list&gt;` props.\n  UiList: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiListComponents from &#39;balm-ui/components/list&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/list.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;; // Optional.\n\nVue.use(UiListComponents, {\n  // Optional. Overwrite `&lt;ui-list&gt;` props.\n  UiList: {\n    // some props\n  }\n});</code></pre>\n'},MhXu:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tab&gt;&lt;!-- The tab text label --&gt;&lt;/ui-tab&gt;</code></pre>\n<h4 id="ui-tab--ui-tabs-common-props"><code>&lt;ui-tab&gt;</code> &amp; <code>&lt;ui-tabs&gt;</code> common Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td>0</td>\n<td>Mandatory. The permutation of tab labels.</td>\n</tr>\n<tr>\n<td><code>stacked</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Indicates that the tab icon and label should flow vertically instead of horizontally.</td>\n</tr>\n<tr>\n<td><code>minWidth</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Indicates that the tab should shrink in size to be as narrow as possible without causing text to wrap.</td>\n</tr>\n<tr>\n<td><code>contentIndicator</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Text label width-matching indicator.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>Types:</strong> <code>0: &#39;text&#39;</code>, <code>1: &#39;iconOnly&#39;</code>, <code>2: &#39;textWithIcon&#39;</code></li>\n</ul>\n<h4 id="ui-tab-props"><code>&lt;ui-tab&gt;</code> Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>text</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Tab text.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Tab icon. See <a href="/#/icons">Material Icons</a> list.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the tab labels and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td><code>iconClass</code></td>\n<td>The icon slot holds the custom icon and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>indicator</code></td>\n<td></td>\n<td>The indicator slot holds the tab indicator component.</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;ui-tab&gt;\n  &lt;template #icon=&quot;{ iconClass }&quot;&gt;\n    &lt;ui-icon :class=&quot;iconClass&quot;&gt;ICON&lt;/ui-icon&gt;\n  &lt;/template&gt;\n&lt;/ui-tab&gt;</code></pre>\n'},NDOf:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield id=&quot;fouc&quot; v-model=&quot;value&quot;&gt;\n  Label floating above\n&lt;/ui-textfield&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      value: &#39;Pre-filled value&#39;\n    };\n  }\n};</code></pre>\n'},NEwY:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button @click=&quot;showMessage&quot;&gt;Show message&lt;/ui-button&gt;\n&lt;ui-button @click=&quot;clearMessage&quot;&gt;Clear&lt;/ui-button&gt;\n\n&lt;p&gt;{{ message }}&lt;/p&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      message: &#39;No message&#39;\n    };\n  },\n  methods: {\n    showMessage() {\n      this.message = &#39;Hello BalmUI&#39;;\n    },\n    clearMessage() {\n      this.message = &#39;&#39;;\n    }\n  }\n};</code></pre>\n'},"NGw+":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-image-list&gt;` props.\n  UiImageList: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-image-item&gt;` props.\n  UiImageItem: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiImageListComponents from &#39;balm-ui/components/image-list&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/image-list.css&#39;;\n\nVue.use(UiImageListComponents, {\n  // Optional. Overwrite `&lt;ui-image-list&gt;` props.\n  UiImageList: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-image-item&gt;` props.\n  UiImageItem: {\n    // some props\n  }\n});</code></pre>\n'},NNyQ:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card-icons&gt;&lt;!-- the icon components --&gt;&lt;/ui-card-icons&gt;</code></pre>\n<blockquote>\n<p>A group of supplemental action icons, displayed on the right side of the card (in LTR), adjacent to <code>&lt;ui-card-buttons&gt;</code>.</p>\n</blockquote>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the icon components and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},NOV7:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-table&gt;` props.\n  UiTable: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiTableComponent from &#39;balm-ui/components/table&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/table.css&#39;;\nimport &#39;balm-ui/components/checkbox.css&#39;; // Optional.\nimport &#39;balm-ui/components/icon.css&#39;; // Optional.\n\nVue.use(UiTableComponent, {\n  // Optional. Overwrite `&lt;ui-table&gt;` props.\n  UiTable: {\n    // some props\n  }\n});</code></pre>\n'},NQQ6:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `$alert` options.\n  alert: {\n    // some options\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport alert from &#39;balm-ui/plugins/alert&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/button.css&#39;;\nimport &#39;balm-ui/components/dialog.css&#39;;\nimport &#39;balm-ui/plugins/alert.css&#39;;\n\n// Optional. Overwrite `$alert` options.\nVue.use(alert, {\n  // some options\n});</code></pre>\n'},Ngmu:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button raised @click=&quot;openDialog&quot;&gt;Open dialog&lt;/ui-button&gt;\n\n&lt;ui-dialog v-model=&quot;open&quot;&gt;\n  &lt;ui-dialog-content&gt;\n    Dialog content\n  &lt;/ui-dialog-content&gt;\n  &lt;ui-dialog-actions&gt;\n    &lt;ui-button @click=&quot;closeDialog&quot;&gt;Close dialog&lt;/ui-button&gt;\n  &lt;/ui-dialog-actions&gt;\n&lt;/ui-dialog&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      open: false\n    };\n  },\n  methods: {\n    openDialog() {\n      this.open = true;\n    },\n    closeDialog() {\n      this.open = false;\n    }\n  }\n};</code></pre>\n'},NlmE:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport anchor from &#39;balm-ui/directives/anchor&#39;;\n\nVue.directive(anchor.name, anchor);</code></pre>\n'},"Np/8":function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;demo-theme-color-section_row&quot;&gt;\n  &lt;fieldset class=&quot;demo-fieldset--color&quot;&gt;\n    &lt;legend :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Text on background&lt;/legend&gt;\n\n    &lt;div class=&quot;demo-theme-color-group&quot;&gt;\n      &lt;div :class=&quot;[&#39;demo-theme-text-row&#39;, $themeColor(&#39;background&#39;)]&quot;&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;primary&#39;)]&quot;&gt;Primary&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;secondary&#39;)]&quot;&gt;Secondary&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;hint&#39;)]&quot;&gt;Hint&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;disabled&#39;)]&quot;&gt;Disabled&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;icon&#39;), &#39;material-icons&#39;]&quot;&gt;favorite&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/div&gt;</code></pre>\n'},Nu9s:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-autocomplete\n  noLabel\n  v-model=&quot;keywords&quot;\n  :source=&quot;source&quot;\n  placeholder=&quot;Try to type&quot;\n&gt;\n&lt;/ui-autocomplete&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      keywords: &#39;&#39;,\n      source: [\n        &#39;ActionScript&#39;,\n        &#39;AppleScript&#39;,\n        &#39;Asp&#39;,\n        &#39;BASIC&#39;,\n        &#39;C&#39;,\n        &#39;C++&#39;,\n        &#39;Clojure&#39;,\n        &#39;COBOL&#39;,\n        &#39;ColdFusion&#39;,\n        &#39;Erlang&#39;,\n        &#39;Fortran&#39;,\n        &#39;Groovy&#39;,\n        &#39;Haskell&#39;,\n        &#39;Java&#39;,\n        &#39;JavaScript&#39;,\n        &#39;Lisp&#39;,\n        &#39;Perl&#39;,\n        &#39;PHP&#39;,\n        &#39;Python&#39;,\n        &#39;Ruby&#39;,\n        &#39;Scala&#39;,\n        &#39;Scheme&#39;\n      ]\n    };\n  }\n};</code></pre>\n'},OR6h:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield-icon&gt;&lt;!-- the material design icon name --&gt;&lt;/ui-textfield-icon&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>unclickable</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Display un-clickable icons.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the text field icon and can contain HTML. See <a href="/#/icons">Material Icons</a> list.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the text field icon is clicked.</td>\n</tr>\n</tbody></table>\n'},ORrO:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `&lt;ui-skeleton&gt;` props.\n  UiSkeleton: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiSkeleton from &#39;balm-ui/components/skeleton&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/skeleton.css&#39;;\n\n// Optional. Overwrite `&lt;ui-skeleton&gt;` props.\nVue.use(UiSkeleton, {\n  // some props\n});</code></pre>\n'},ORrX:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-icon-button&gt;` and `&lt;ui-icon-a&gt;` props.\n  UiIconButton: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiIconButtonComponents from &#39;balm-ui/components/icon-button&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;;\nimport &#39;balm-ui/components/icon-button.css&#39;;\n\nVue.use(UiIconButtonComponents, {\n  // Optional. Overwrite `&lt;ui-icon-button&gt;` and `&lt;ui-icon-a&gt;` props.\n  UiIconButton: {\n    // some props\n  }\n});</code></pre>\n'},OSKY:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-table\n  fullwidth\n  rowCheckbox\n  :data=&quot;data&quot;\n  :thead=&quot;thead&quot;\n  :tbody=&quot;tbody&quot;\n  :tfoot=&quot;tfoot&quot;\n  v-model=&quot;selectedRows&quot;\n  selectedKey=&quot;id&quot;\n&gt;\n  &lt;template #actions=&quot;{ data }&quot;&gt;\n    &lt;ui-icon @click=&quot;show(data)&quot;&gt;description&lt;/ui-icon&gt;\n    &lt;ui-icon @click=&quot;show(data)&quot;&gt;edit&lt;/ui-icon&gt;\n    &lt;ui-icon @click=&quot;show(data)&quot;&gt;delete&lt;/ui-icon&gt;\n  &lt;/template&gt;\n&lt;/ui-table&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      data: [],\n      thead: [\n        [\n          {\n            value: &#39;ID&#39;,\n            rowspan: 2,\n            sort: &#39;asc&#39;,\n            by: &#39;id&#39;\n          },\n          {\n            value: &#39;Type1&#39;,\n            colspan: 2,\n            align: &#39;center&#39;\n          },\n          {\n            value: &#39;Type2&#39;,\n            colspan: 3,\n            align: &#39;center&#39;\n          },\n          {\n            value: &#39;Actions&#39;,\n            rowspan: 2\n          }\n        ],\n        [\n          {\n            value: &#39;Dessert (100g serving)&#39;,\n            class: &#39;gg&#39;\n          },\n          &#39;Calories&#39;,\n          &#39;Fat (g)&#39;,\n          &#39;Carbs (g)&#39;,\n          &#39;Protein (g)&#39;\n        ]\n      ],\n      tbody: [\n        &#39;id&#39;,\n        &#39;dessert&#39;,\n        {\n          field: &#39;calories&#39;,\n          numeric: true,\n          class: &#39;test&#39;\n        },\n        {\n          field: &#39;fat&#39;,\n          fn: data =&gt; {\n            return data.fat.toFixed(1);\n          }\n        },\n        &#39;carbs&#39;,\n        {\n          field: &#39;protein&#39;,\n          class: data =&gt; {\n            return data.protein &gt; 5 ? &#39;red&#39; : &#39;green&#39;;\n          }\n        },\n        {\n          slot: &#39;actions&#39;\n        }\n      ],\n      tfoot: [\n        {\n          field: &#39;id&#39;,\n          fnName: &#39;count&#39;\n        },\n        null,\n        {\n          field: &#39;calories&#39;,\n          fnName: &#39;sum&#39;,\n          align: &#39;right&#39;,\n          class: &#39;test&#39;\n        },\n        {\n          field: &#39;fat&#39;,\n          fnName: &#39;avg&#39;\n        },\n        {\n          field: &#39;carbs&#39;,\n          fnName: &#39;max&#39;\n        },\n        {\n          field: &#39;protein&#39;,\n          fnName: &#39;min&#39;\n        }\n      ],\n      selectedRows: [1, 2, 4]\n    };\n  },\n  created() {\n    let { data } = await this.$http.get(&#39;/api/getData&#39;);\n    this.data = data;\n  },\n  methods: {\n    show(data) {\n      console.log(data);\n    }\n  }\n};</code></pre>\n'},P8Fu:function(t,e){t.exports='<pre><code class="language-html">&lt;div v-shadow.transition=&quot;[2, 8]&quot;&gt;\n  &lt;p&gt;Hover over or tap me for a transition&lt;/p&gt;\n&lt;/div&gt;</code></pre>\n'},PGPd:function(t,e){t.exports=""},PMQE:function(t,e){t.exports='<pre><code class="language-css">$mdc-skeleton-avatar: (\n  base: 36px,\n  large: 40px,\n  small: 24px\n);\n\n$mdc-skeleton-color: #f2f2f2;\n$mdc-skeleton-to-color: shade($mdc-skeleton-color, 10%);</code></pre>\n'},Pb6R:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiDividerComponents from &#39;balm-ui/components/divider&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/divider.css&#39;;\n\nVue.use(UiDividerComponents);</code></pre>\n'},PktF:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-pagination mini v-model=&quot;page&quot; :total=&quot;total&quot; prev=&quot;Prev&quot; next=&quot;Next&quot;&gt;\n  &lt;span&gt;Page {{ page }}&lt;/span&gt;\n&lt;/ui-pagination&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      page: 1,\n      total: 100\n    };\n  }\n};</code></pre>\n'},Pkw1:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-slider&gt;&lt;/ui-slider&gt;</code></pre>\n<h3 id="ui-slider-types"><code>&lt;ui-slider&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;continuous&#39;</code></li>\n<li><code>1</code>: <code>&#39;discrete&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Slider types.</td>\n</tr>\n<tr>\n<td><code>discrete</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the slider as a discrete slider.</td>\n</tr>\n<tr>\n<td><code>displayMarker</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Discrete sliders support display markers on their tracks.</td>\n</tr>\n<tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>number, string</td>\n<td><code>null</code></td>\n<td>The current value of the slider.</td>\n</tr>\n<tr>\n<td><code>min</code></td>\n<td>number, string</td>\n<td><code>0</code></td>\n<td>The minimum value a slider can have.</td>\n</tr>\n<tr>\n<td><code>max</code></td>\n<td>number, string</td>\n<td><code>100</code></td>\n<td>The maximum value a slider can have.</td>\n</tr>\n<tr>\n<td><code>step</code></td>\n<td>number, string</td>\n<td><code>1</code></td>\n<td>Specifies the increments at which a slider value can be set.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Whether or not the slider is disabled.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>input</code></td>\n<td><code>function(model: number|string)</code></td>\n<td>Emits when a user is dragging the slider or changing the value.</td>\n</tr>\n<tr>\n<td><code>change</code></td>\n<td><code>function(value: number|string)</code></td>\n<td>Emits when a user stops dragging the slider or changes the value.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the slider using <code>@input</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-slider v-model=&quot;value&quot;&gt;&lt;/ui-slider&gt;\n\n// Manual\n&lt;ui-slider\n  :model=&quot;value&quot;\n  @input=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-slider&gt;</code></pre>\n'},Po75:function(t,e){t.exports='<pre><code class="language-html">&lt;section :dir=&quot;controls.rtl ? &#39;rtl&#39; : null&quot;&gt;\n  &lt;ui-textfield\n    id=&quot;full-func-text-field&quot;\n    v-model=&quot;value&quot;\n    :disabled=&quot;controls.disabled&quot;\n    :dense=&quot;controls.dense&quot;\n    :required=&quot;controls.required&quot;\n    :class=&quot;{&#39;demo-text-field-custom-colors&#39;: controls.customColor}&quot;\n    helptextId=&quot;my-text-field-helper-text&quot;\n  &gt;\n    Email Address\n  &lt;/ui-textfield&gt;\n  &lt;ui-textfield-helper\n    v-if=&quot;controls.helperText&quot;\n    id=&quot;my-text-field-helper-text&quot;\n    :visible=&quot;controls.isVisible&quot;\n    :validMsg=&quot;controls.isValidMsg&quot;\n  &gt;\n    Helper Text (possibly validation message)\n  &lt;/ui-textfield-helper&gt;\n&lt;/section&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      value: &#39;&#39;,\n      controls: {\n        disabled: false,\n        rtl: false,\n        dense: false,\n        required: false,\n        customColor: false,\n        helperText: false,\n        isVisible: false,\n        isValidMsg: false\n      }\n    };\n  }\n};</code></pre>\n'},PvR7:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid max-width&quot;&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n<pre><code class="language-css">.demo-grid.max-width {\n  max-width: 1280px;\n}</code></pre>\n'},Q1zD:function(t,e){t.exports='<pre><code class="language-html">&lt;div&gt;\n  &lt;ui-textfield v-model=&quot;title&quot; fullwidth placeholder=&quot;Subject&quot; maxlength=&quot;40&quot;&gt;\n  &lt;/ui-textfield&gt;\n  &lt;ui-textfield-counter&gt;&lt;/ui-textfield-counter&gt;\n\n  &lt;ui-textfield\n    inputType=&quot;textarea&quot;\n    v-model=&quot;content&quot;\n    fullwidth\n    noLabel\n    placeholder=&quot;Content&quot;\n    maxlength=&quot;140&quot;\n    rows=&quot;8&quot;\n  &gt;\n  &lt;/ui-textfield&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      title: &#39;&#39;,\n      content: &#39;&#39;\n    };\n  }\n};</code></pre>\n'},Q9WI:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list&gt;\n  &lt;ui-item v-for=&quot;i in 3&quot; :key=&quot;i&quot;&gt;\n    &lt;ui-item-text-content&gt;Line item&lt;/ui-item-text-content&gt;\n    &lt;ui-item-last-content&gt;\n      &lt;ui-icon&gt;info&lt;/ui-icon&gt;\n    &lt;/ui-item-last-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;</code></pre>\n'},QLg9:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-tabs&gt;` props.\n  UiTabs: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiTabsComponents from &#39;balm-ui/components/tabs&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/tabs.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;; // Optional.\n\nVue.use(UiTabsComponents, {\n  // Optional. Overwrite `&lt;ui-tabs&gt;` props.\n  UiTabs: {\n    // some props\n  }\n});</code></pre>\n'},QM0m:function(t,e){t.exports=""},QOSS:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiTopAppBar from &#39;balm-ui/components/top-app-bar&#39;;\nimport UiDrawerComponents from &#39;balm-ui/components/drawer&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/top-app-bar.css&#39;;\nimport &#39;balm-ui/components/drawer.css&#39;;\nimport &#39;balm-ui/components/list.css&#39;;\n\nVue.use(UiTopAppBar);\nVue.use(UiDrawerComponents);</code></pre>\n'},Qm85:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid&quot;&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;6&quot;&gt;6&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;4&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;2&quot;&gt;2&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n'},QwAn:function(t,e){t.exports='<pre><code class="language-html">&lt;fieldset&gt;\n  &lt;legend&gt;Form Area&lt;/legend&gt;\n  &lt;ui-form-field block class=&quot;form-item&quot;&gt;\n    &lt;ui-textfield\n      id=&quot;mobile&quot;\n      v-model=&quot;formData.mobile&quot;\n      helperTextId=&quot;mobile-helper-text&quot;\n      &gt;Mobile&lt;/ui-textfield\n    &gt;\n    &lt;ui-textfield-helper\n      id=&quot;mobile-helper-text&quot;\n      :validMsg=&quot;validMsg.mobile&quot;\n    &gt;&lt;/ui-textfield-helper&gt;\n  &lt;/ui-form-field&gt;\n  &lt;ui-form-field block class=&quot;form-item&quot;&gt;\n    &lt;ui-textfield\n      type=&quot;password&quot;\n      id=&quot;password&quot;\n      v-model=&quot;formData.password&quot;\n      helperTextId=&quot;password-helper-text&quot;\n      &gt;Password&lt;/ui-textfield\n    &gt;\n    &lt;ui-textfield-helper\n      id=&quot;password-helper-text&quot;\n      :validMsg=&quot;validMsg.password&quot;\n    &gt;&lt;/ui-textfield-helper&gt;\n  &lt;/ui-form-field&gt;\n  &lt;ui-form-field block class=&quot;form-item&quot;&gt;\n    &lt;ui-textfield\n      type=&quot;password&quot;\n      id=&quot;repassword&quot;\n      v-model=&quot;formData.repassword&quot;\n      helperTextId=&quot;repassword-helper-text&quot;\n      &gt;Repeat Password&lt;/ui-textfield\n    &gt;\n    &lt;ui-textfield-helper\n      id=&quot;repassword-helper-text&quot;\n      :validMsg=&quot;validMsg.repassword&quot;\n    &gt;&lt;/ui-textfield-helper&gt;\n  &lt;/ui-form-field&gt;\n  &lt;div class=&quot;form-item form-actions&quot;&gt;\n    &lt;ui-button raised @click=&quot;submit&quot;&gt;Submit&lt;/ui-button&gt;\n  &lt;/div&gt;\n&lt;/fieldset&gt;</code></pre>\n<pre><code class="language-js">export default {\n  validations: {\n    mobile: {\n      label: &#39;Mobile&#39;,\n      validator: &#39;required, mobile&#39;\n    },\n    password: {\n      label: &#39;Password&#39;,\n      validator: &#39;required, password, minRule, maxRule&#39;,\n      minRule: {\n        validate(value) {\n          return value.trim().length &gt;= 6;\n        },\n        message: &#39;%s minLength &gt;= 6&#39;\n      },\n      maxRule: {\n        validate(value) {\n          return value.trim().length &lt;= 8;\n        },\n        message: &#39;%s maxLength &lt;= 8&#39;\n      }\n    },\n    repassword: {\n      label: &#39;Repeat Password&#39;,\n      validator: &#39;required, password, repasswordRule&#39;,\n      repasswordRule: {\n        validate(value, data) {\n          return value === data.password;\n        },\n        message: &#39;repassword !== password&#39;\n      }\n    }\n  },\n  data() {\n    return {\n      formData: {\n        mobile: &#39;&#39;,\n        password: &#39;&#39;,\n        repassword: &#39;&#39;\n      },\n      validMsg: {}\n    };\n  },\n  methods: {\n    submit() {\n      let result = this.$validate(this.formData);\n      let { isValid, validMsg } = result;\n      this.validMsg = validMsg;\n\n      console.log(result);\n\n      if (isValid) {\n        console.log(&#39;gg&#39;);\n      }\n    }\n  }\n};</code></pre>\n'},R4uJ:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card-buttons&gt;&lt;!-- the button components --&gt;&lt;/ui-card-buttons&gt;</code></pre>\n<blockquote>\n<p>A group of action buttons, displayed on the left side of the card (in LTR), adjacent to <code>&lt;ui-card-icons&gt;</code>.</p>\n</blockquote>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the button components and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},RK7G:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list&gt;&lt;!-- &lt;ui-item&gt; --&gt;&lt;/ui-list&gt;\n\n&lt;ui-nav&gt;&lt;!-- &lt;ui-a&gt; or &lt;router-link&gt; --&gt;&lt;/ui-nav&gt;</code></pre>\n<h3 id="ui-list-types"><ui-list> Types</h3>\n<ul>\n<li><code>1</code>: <code>&#39;singleLine&#39;</code></li>\n<li><code>2</code>: <code>&#39;twoLine&#39;</code></li>\n</ul>\n<h4 id="common-props">Common Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. List types.</td>\n</tr>\n<tr>\n<td><code>singleSelection</code></td>\n<td>boolean&#39;</td>\n<td><code>false</code></td>\n<td>The list can handle selecting/deselecting list elements based on click or keyboard action.</td>\n</tr>\n<tr>\n<td><code>selectedIndex</code> (<code>v-model</code>)</td>\n<td><code>Number</code></td>\n<td><code>-1</code></td>\n<td>The index of the selected list item. Applicable only for the single selection list.</td>\n</tr>\n<tr>\n<td><code>nonInteractive</code></td>\n<td>boolean&#39;</td>\n<td><code>false</code></td>\n<td>Optional, disables interactivity affordances.</td>\n</tr>\n<tr>\n<td><code>dense</code></td>\n<td>boolean&#39;</td>\n<td><code>false</code></td>\n<td>Optional, styles the density of the list, making it appear more compact.</td>\n</tr>\n<tr>\n<td><code>avatar</code></td>\n<td>boolean&#39;</td>\n<td><code>false</code></td>\n<td>Optional, configures the leading tiles of each row to display images instead of icons. This will make the graphics of the list items larger.</td>\n</tr>\n</tbody></table>\n<h4 id="ui-nav-slots"><code>&lt;ui-nav&gt;</code> Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td><code>itemClass</code>, <code>selectedClass</code>, <code>activatedClass</code></td>\n<td>The default slot holds the item components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;ui-nav&gt;\n  &lt;template #default=&quot;{ itemClass, activatedClass }&quot;&gt;\n    &lt;a :class=&quot;[itemClass, activatedClass]&quot;&gt;activated item&lt;/a&gt;\n    &lt;a :class=&quot;itemClass&quot;&gt;unactivated item&lt;/a&gt;\n  &lt;/template&gt;\n&lt;/ui-nav&gt;</code></pre>\n<blockquote>\n<p>Optional, styles the row in a selected or activated state.</p>\n</blockquote>\n<h4 id="common-events">Common Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>action</code></td>\n<td><code>function(index: number)</code></td>\n<td>Indicates that a list item with the specified index has been activated.</td>\n</tr>\n</tbody></table>\n'},RXEe:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield\n  type=&quot;password&quot;\n  id=&quot;pw&quot;\n  required\n  pattern=&quot;.{8,}&quot;\n  helptextId=&quot;pw-validation-msg&quot;\n  :attrs=&quot;{autocomplete: &#39;current-password&#39;}&quot;\n&gt;\n  Choose password\n&lt;/ui-textfield&gt;\n&lt;ui-textfield-helper id=&quot;pw-validation-msg&quot; visible validMsg&gt;\n  Must be at least 8 characters long\n&lt;/ui-textfield-helper&gt;</code></pre>\n'},Romc:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tabs v-model=&quot;active&quot;&gt;\n  &lt;ui-tab&gt;Tab One&lt;/ui-tab&gt;\n  &lt;ui-tab&gt;Tab Two&lt;/ui-tab&gt;\n  &lt;ui-tab&gt;Tab Three&lt;/ui-tab&gt;\n&lt;/ui-tabs&gt;\n\n&lt;ui-panels v-model=&quot;active&quot;&gt;\n  &lt;ui-panel&gt;Panel One&lt;/ui-panel&gt;\n  &lt;ui-panel&gt;Panel Two&lt;/ui-panel&gt;\n  &lt;ui-panel&gt;Panel Three&lt;/ui-panel&gt;\n&lt;/ui-panels&gt;</code></pre>\n'},RwWQ:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-top-app-bar&gt;` props.\n  UiTopAppBar: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiTopAppBar from &#39;balm-ui/components/top-app-bar&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/top-app-bar.css&#39;;\nimport &#39;balm-ui/components/icon-button.css&#39;;\n\n// Optional. Overwrite `&lt;ui-top-app-bar&gt;` props.\nVue.use(UiTopAppBar, {\n  // some props\n});</code></pre>\n'},"S7/l":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `&lt;ui-file&gt;` props.\n  UiFile: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiFile from &#39;balm-ui/components/file&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/button.css&#39;;\nimport &#39;balm-ui/components/file.css&#39;;\n\n// Optional. Overwrite `&lt;ui-file&gt;` props.\nVue.use(UiFile, {\n  // some props\n});</code></pre>\n'},SBcc:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-pagination\n  v-model=&quot;page&quot;\n  :pageSize=&quot;pageSize&quot;\n  :total=&quot;total&quot;\n  position=&quot;right&quot;\n&gt;\n  &lt;template #before=&quot;{ recordClass, pageCount, currentMinRow, currentMaxRow }&quot;&gt;\n    &lt;ui-form-field :class=&quot;recordClass&quot;&gt;\n      &lt;label for=&quot;per-page-rows&quot;&gt;Rows per page:&lt;/label&gt;\n      &lt;ui-select\n        outlined\n        noLabel\n        id=&quot;per-page-rows&quot;\n        v-model=&quot;pageSize&quot;\n        :options=&quot;pageSizeOptions&quot;\n      &gt;&lt;/ui-select&gt;\n      &lt;span&gt;\n        {{ currentMinRow }}-{{ currentMaxRow }} of {{ total }}\n      &lt;/span&gt;\n    &lt;/ui-form-field&gt;\n  &lt;/template&gt;\n&lt;/ui-pagination&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      page: 1,\n      pageSize: 10,\n      total: 500,\n      pageSizeOptions: [\n        {\n          label: 10,\n          value: 10\n        },\n        {\n          label: 20,\n          value: 20\n        },\n        {\n          label: 30,\n          value: 30\n        },\n        {\n          label: 40,\n          value: 40\n        }\n      ]\n    };\n  }\n};</code></pre>\n'},Sbzz:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-table&gt;&lt;/ui-table&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>data</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Data source.</td>\n</tr>\n<tr>\n<td><code>caption</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Specifies the caption (or title) of a table.</td>\n</tr>\n<tr>\n<td><code>colgroup</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Defines a group of columns within a table.</td>\n</tr>\n<tr>\n<td><code>thead</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Table header renderer.</td>\n</tr>\n<tr>\n<td><code>tbody</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Table content renderer.</td>\n</tr>\n<tr>\n<td><code>tfoot</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Table footer renderer.</td>\n</tr>\n<tr>\n<td><code>fullwidth</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the table as a full width table.</td>\n</tr>\n<tr>\n<td><code>columns</code></td>\n<td>number</td>\n<td><code>null</code></td>\n<td>Set table columns by manual.</td>\n</tr>\n<tr>\n<td><code>noData</code></td>\n<td>string</td>\n<td><code>&#39;No Data&#39;</code></td>\n<td>Show text when data source is empty.</td>\n</tr>\n<tr>\n<td><code>rowCheckbox</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Data table with row selection.</td>\n</tr>\n<tr>\n<td><code>selectedRows</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Selected row indexes/ids. (Required: <code>rowCheckbox: true</code>)</td>\n</tr>\n<tr>\n<td><code>selectedKey</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td><code>selectedRows</code> use custom key field, default use row index.</td>\n</tr>\n<tr>\n<td><code>rowIdPrefix</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The prefix of <code>data-row-id</code> attribute value on row element <code>tr</code>.</td>\n</tr>\n<tr>\n<td><code>sortIconAlignEnd</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>The sort icon will be positioned after the label.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p><code>thead</code> &amp; <code>tbody</code> &amp; <code>tfoot</code> items common format</p>\n<pre><code class="language-js">{\n  value: string, // Cell content\n  numeric: boolean, // Numeric cell is displayed right (Equivalent to `align: &#39;right&#39;`)\n  align: string, // Text alignment: left|center|right\n  class: string // Custom classname\n}</code></pre>\n</li>\n<li><p><code>thead</code> format</p>\n<ul>\n<li><p>default items (<code>string[]</code>)</p>\n<pre><code class="language-js">[\n  &#39;ID&#39;,\n  &#39;Dessert (100g serving)&#39;,\n  &#39;Calories&#39;,\n  &#39;Fat (g)&#39;,\n  &#39;Carbs (g)&#39;,\n  &#39;Protein (g)&#39;\n];</code></pre>\n</li>\n<li><p>custom items (<code>object[]</code> or <code>object[][]</code>)</p>\n<pre><code class="language-js">{\n  sort: string, // Sorting: asc|desc\n  by: string, // sort field, e.g. &#39;id&#39;\n  rowspan: number,\n  colspan: number\n}</code></pre>\n<pre><code class="language-js">[\n  [\n    {\n      value: &#39;ID&#39;,\n      rowspan: 2,\n      sort: &#39;asc&#39;,\n      by: &#39;id&#39;\n    },\n    {\n      value: &#39;Type1&#39;,\n      colspan: 2,\n      align: &#39;center&#39;\n    },\n    {\n      value: &#39;Type2&#39;,\n      colspan: 3,\n      align: &#39;center&#39;\n    },\n    {\n      value: &#39;Actions&#39;,\n      rowspan: 2\n    }\n  ],\n  [\n    &#39;Dessert (100g serving)&#39;,\n    &#39;Calories&#39;,\n    &#39;Fat (g)&#39;,\n    &#39;Carbs (g)&#39;,\n    &#39;Protein (g)&#39;\n  ]\n];</code></pre>\n</li>\n</ul>\n</li>\n<li><p><code>tbody</code> format</p>\n<ul>\n<li><p>default fields (<code>string[]</code>)</p>\n<pre><code class="language-js">[&#39;id&#39;, &#39;dessert&#39;, &#39;calories&#39;, &#39;fat&#39;, &#39;carbs&#39;, &#39;protein&#39;];</code></pre>\n</li>\n<li><p>custom fields (<code>object[]</code>)</p>\n<pre><code class="language-js">{\n  field: string, // Data field name\n  fn: function, // Simple data processing\n  slot: string // Custom slot for cell\n}</code></pre>\n<pre><code class="language-js">[\n  &#39;id&#39;,\n  &#39;dessert&#39;,\n  {\n    field: &#39;calories&#39;,\n    numeric: true,\n    class: &#39;my-data&#39;\n  },\n  {\n    field: &#39;fat&#39;,\n    fn: data =&gt; {\n      return data.fat.toFixed(1);\n    }\n  },\n  &#39;carbs&#39;,\n  {\n    field: &#39;protein&#39;,\n    class: data =&gt; {\n      return data.protein &gt; 5 ? &#39;red&#39; : &#39;green&#39;;\n    }\n  },\n  {\n    slot: &#39;actions&#39;\n  }\n];</code></pre>\n<pre><code class="language-html">&lt;ui-table&gt;\n  &lt;template #actions=&quot;{ data }&quot;&gt;\n    &lt;ui-icon @click=&quot;show(data)&quot;&gt;description&lt;/ui-icon&gt;\n    &lt;ui-icon @click=&quot;edit(data)&quot;&gt;edit&lt;/ui-icon&gt;\n    &lt;ui-icon @click=&quot;remove(data)&quot;&gt;delete&lt;/ui-icon&gt;\n  &lt;/template&gt;\n&lt;/ui-table&gt;</code></pre>\n</li>\n</ul>\n</li>\n<li><p><code>tfoot</code> items format (<code>object[]</code>)</p>\n<pre><code class="language-js">{\n  fnName: string, // Frequently-used statistical method\n  fn: function, // Simple data processing for result\n  slot: string // Custom slot for footer cell\n}</code></pre>\n<ul>\n<li><p><code>fnName</code> methods: <code>count</code>, <code>sum</code>, <code>avg</code>, <code>max</code>, <code>min</code></p>\n<pre><code class="language-js">[\n  {\n    field: &#39;id&#39;,\n    fnName: &#39;count&#39;\n  },\n  null,\n  {\n    field: &#39;calories&#39;,\n    fnName: &#39;sum&#39;\n  },\n  {\n    field: &#39;fat&#39;,\n    fnName: &#39;avg&#39;\n  },\n  {\n    field: &#39;carbs&#39;,\n    fnName: &#39;max&#39;\n  },\n  {\n    field: &#39;protein&#39;,\n    fnName: &#39;min&#39;\n  }\n];</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>(custom-name)</code></td>\n<td></td>\n<td>Custom slot for cell</td>\n</tr>\n<tr>\n<td><code>before-asc</code></td>\n<td></td>\n<td>Custom asc icon before the label</td>\n</tr>\n<tr>\n<td><code>before-desc</code></td>\n<td></td>\n<td>Custom desc icon before the label</td>\n</tr>\n<tr>\n<td><code>after-asc</code></td>\n<td></td>\n<td>Custom asc icon after the label</td>\n</tr>\n<tr>\n<td><code>after-desc</code></td>\n<td></td>\n<td>Custom desc icon after the label</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>selected</code></td>\n<td><code>function(selectedRows: array)</code></td>\n<td>Emits when row checkbox is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the select using <code>@selected</code> and update the <code>selectedRows</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-table rowCheckbox v-model=&quot;selectedRows&quot;&gt;&lt;/ui-table&gt;\n\n// Manual\n&lt;ui-table\n  rowCheckbox\n  :selectedRows=&quot;selectedRows&quot;\n  @selected=&quot;$balmUI.onChange(&#39;selectedRows&#39;, $event)&quot;\n&gt;&lt;/ui-table&gt;</code></pre>\n'},T73s:function(t,e){t.exports='<pre><code class="language-html">&lt;div v-shape&gt;&lt;/div&gt;</code></pre>\n<ul>\n<li><code>v-shape</code></li>\n<li><code>v-shape=&quot;corner&quot;</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>corner</td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Element for masking a specific corner; there may be up to 4.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Syntax is similar to CSS <code>border-radius</code> property.</p>\n</blockquote>\n<pre><code class="language-html">&lt;!-- The syntax of the first corner allows one to four values --&gt;\n&lt;!-- Corner is set for all 4 sides --&gt;\n&lt;div v-shape&gt;&lt;/div&gt;\n&lt;div v-shape=&quot;&#39;1&#39;&quot;&gt;&lt;/div&gt;\n\n&lt;!-- top-left | bottom-right --&gt;\n&lt;div v-shape=&quot;&#39;1 0&#39;&quot;&gt;&lt;/div&gt;\n\n&lt;!-- top-right | bottom-left --&gt;\n&lt;div v-shape=&quot;&#39;0 1&#39;&quot;&gt;&lt;/div&gt;\n\n&lt;!-- top-left --&gt;\n&lt;div v-shape=&quot;&#39;1 0 0&#39;&quot;&gt;&lt;/div&gt;\n\n&lt;!-- top-left | top-right | bottom-left --&gt;\n&lt;div v-shape=&quot;&#39;1 1 0&#39;&quot;&gt;&lt;/div&gt;\n\n&lt;!-- top-left | top-right | bottom-right | bottom-left --&gt;\n&lt;div v-shape=&quot;&#39;1 1 1 1&#39;&quot;&gt;&lt;/div&gt;</code></pre>\n'},TZLU:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-dialog&gt;&lt;!-- the dialog child components --&gt;&lt;/ui-dialog&gt;</code></pre>\n<blockquote>\n<p>NOTE: <code>&lt;ui-dialog&gt;</code> must be including a <code>&lt;ui-button&gt;</code>.</p>\n</blockquote>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>open</code> (<code>v-model</code>)</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>closable</code></td>\n<td>boolean</td>\n<td><code>true</code></td>\n<td>Closes the dialog, when a user actions on the accept or cancel button.</td>\n</tr>\n<tr>\n<td><code>maskClosable</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Closes the dialog, when the dialog backdrop is clicked.</td>\n</tr>\n<tr>\n<td><code>noBackdrop</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Hides the dialog backdrop.</td>\n</tr>\n<tr>\n<td><code>resetScroll</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Reset scroll bar, when the dialog is closed.</td>\n</tr>\n<tr>\n<td><code>scrollable</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Applied automatically when the dialog has overflowing content to warrant scrolling.</td>\n</tr>\n<tr>\n<td><code>stacked</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Applied automatically when the dialog&#39;s action buttons can&#39;t fit on a single line and must be stacked.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the dialog child components.</td>\n</tr>\n</tbody></table>\n<p><strong>Dialog child components:</strong></p>\n<ul>\n<li><code>&lt;ui-dialog-title&gt;</code></li>\n<li><code>&lt;ui-dialog-content&gt;</code></li>\n<li><code>&lt;ui-dialog-actions&gt;</code></li>\n</ul>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(open: boolean)</code></td>\n<td>Emits when the dialog is changed.</td>\n</tr>\n<tr>\n<td><code>close</code></td>\n<td><code>function()</code></td>\n<td>Emits when the dialog is closed.</td>\n</tr>\n<tr>\n<td><code>confirm</code></td>\n<td><code>function(result: boolean)</code></td>\n<td>Emits when the action buttons is clicked.</td>\n</tr>\n<tr>\n<td><code>accept</code></td>\n<td><code>function()</code></td>\n<td>Emits when the accept button is clicked.</td>\n</tr>\n<tr>\n<td><code>cancel</code></td>\n<td><code>function()</code></td>\n<td>Emits when the cancel button is clicked.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the dialog using <code>@change</code> and update the <code>open</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-dialog v-model=&quot;open&quot;&gt;&lt;/ui-dialog&gt;\n\n// Manual\n&lt;ui-dialog :open=&quot;open&quot; @change=&quot;$balmUI.onChange(&#39;open&#39;, $event)&quot;&gt;&lt;/ui-dialog&gt;</code></pre>\n'},TeO7:function(t,e){t.exports='<pre><code class="language-css">$mdc-radio-ripple-size: 40px;\n$mdc-radio-icon-size: 20px;\n$mdc-radio-transition-duration: 120ms;\n$mdc-radio-ripple-opacity: 0.14;\n$mdc-radio-baseline-theme-color: secondary;\n$mdc-radio-unchecked-color: rgba(mdc-theme-prop-value(on-surface), 0.54);\n$mdc-radio-disabled-circle-color: rgba(mdc-theme-prop-value(on-surface), 0.26);\n\n$mdc-radio-minimum-size: 28px;\n$mdc-radio-maximum-size: $mdc-radio-ripple-size;\n$mdc-radio-density-scale: $mdc-density-default-scale;\n$mdc-radio-density-config: (\n  size: (\n    minimum: $mdc-radio-minimum-size,\n    default: $mdc-radio-ripple-size,\n    maximum: $mdc-radio-maximum-size\n  )\n);</code></pre>\n'},U9VE:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid&quot; fixedColumnWidth&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;1&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;1&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;1&quot;&gt;&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n'},UJv8:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-skeleton&gt;&lt;/ui-skeleton&gt;</code></pre>\n'},UNqF:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-chips&gt;&lt;!-- the chip components --&gt;&lt;/ui-chips&gt;</code></pre>\n<h3 id="ui-chips-types"><code>&lt;ui-chips&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;action&#39;</code></li>\n<li><code>1</code>: <code>&#39;input&#39;</code></li>\n<li><code>2</code>: <code>&#39;choice&#39;</code></li>\n<li><code>3</code>: <code>&#39;filter&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Chips types.</td>\n</tr>\n<tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>number, array</td>\n<td><code>-1</code></td>\n<td>Mandatory. Single or multiple selection from a set of options.</td>\n</tr>\n<tr>\n<td><code>options</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>A set of options. Applicable only for updating the input chips.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the chip components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(model: number|array)</code></td>\n<td>Emits when the chips is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the chips using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-chips v-model=&quot;selected&quot;&gt;&lt;/ui-chips&gt;\n\n// Manual\n&lt;ui-chips\n  :model=&quot;selected&quot;\n  @change=&quot;$balmUI.onChange(&#39;selected&#39;, $event)&quot;\n&gt;&lt;/ui-chips&gt;</code></pre>\n'},"Ud+F":function(t,e){t.exports='<pre><code class="language-html">&lt;div v-anchor&gt;&lt;/div&gt;</code></pre>\n<h4 id="1-set-container">1. Set Container</h4>\n<ul>\n<li><code>v-anchor</code></li>\n<li><code>v-anchor.offset=&quot;offsetValue&quot;</code></li>\n</ul>\n<blockquote>\n<p><strong>offsetValue</strong> is a number.</p>\n</blockquote>\n<pre><code class="language-html">&lt;body class=&quot;container&quot; v-anchor&gt;\n  &lt;!-- Anchors &amp; Targets --&gt;\n&lt;/body&gt;\n&lt;!-- OR --&gt;\n&lt;div class=&quot;container&quot; v-anchor&gt;\n  &lt;!-- Anchors &amp; Targets --&gt;\n&lt;/div&gt;</code></pre>\n<h4 id="2-set-anchors--targets">2. Set Anchors &amp; Targets</h4>\n<ul>\n<li><code>v-anchor:href</code></li>\n<li><code>v-anchor:id</code></li>\n</ul>\n<p><strong>2.1 Default Usage</strong></p>\n<pre><code class="language-html">&lt;div v-anchor:href=&quot;&#39;#target1&#39;&quot;&gt;Anchor 1&lt;/div&gt;\n&lt;div v-anchor:href=&quot;&#39;#target2&#39;&quot;&gt;Anchor 2&lt;/div&gt;\n\n&lt;div v-anchor:id=&quot;&#39;target1&#39;&quot;&gt;Target 1&lt;/div&gt;\n&lt;div v-anchor:id=&quot;&#39;target2&#39;&quot;&gt;Target 2&lt;/div&gt;</code></pre>\n<p><strong>2.2 HTML Usage</strong></p>\n<ul>\n<li><code>class=&quot;v-anchor&quot; data-href=&quot;selector&quot;</code></li>\n<li><code>id</code> or unique <code>class</code> attribute</li>\n</ul>\n<pre><code class="language-html">&lt;div v-anchor.html&gt;\n  &lt;div class=&quot;v-anchor&quot; data-href=&quot;#target1&quot;&gt;Anchor 1&lt;/div&gt;\n  &lt;div class=&quot;v-anchor&quot; data-href=&quot;#target2&quot;&gt;Anchor 2&lt;/div&gt;\n\n  &lt;div id=&quot;target1&quot;&gt;Target 3&lt;/div&gt;\n  &lt;div id=&quot;target2&quot;&gt;Target 4&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n'},V3IR:function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;fab-motion-container&quot;&gt;\n  &lt;div class=&quot;fab-motion-container__view&quot;&gt;\n    &lt;p&gt;View one (with FAB)&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div\n    class=&quot;fab-motion-container__view&quot;\n    :class=&quot;{&#39;fab-motion-container__view--exited&#39;: !exited}&quot;\n  &gt;\n    &lt;p&gt;View two (without FAB)&lt;/p&gt;\n    &lt;p&gt;\n      &lt;ui-button\n        id=&quot;enter-exit-back&quot;\n        :disabled=&quot;!exited&quot;\n        @click=&quot;$balmUI.onHide(&#39;exited&#39;)&quot;\n        &gt;Go back&lt;/ui-button\n      &gt;\n    &lt;/p&gt;\n  &lt;/div&gt;\n  &lt;ui-fab\n    id=&quot;enter-exit-add&quot;\n    class=&quot;demo-absolute-fab&quot;\n    icon=&quot;add&quot;\n    :exited=&quot;exited&quot;\n    @click=&quot;$balmUI.onShow(&#39;exited&#39;)&quot;\n    &gt;add&lt;/ui-fab\n  &gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      exited: false\n    };\n  }\n};</code></pre>\n<pre><code class="language-css">.demo-absolute-fab {\n  position: absolute;\n  z-index: 1;\n  right: 1rem;\n  bottom: 1rem;\n}\n\n.fab-motion-container {\n  position: relative;\n  overflow: hidden;\n  width: 20rem;\n  height: 10rem;\n  margin: 1rem;\n  padding: 0 1rem;\n  border: 1px solid #ccc;\n}\n\n.fab-motion-container__view {\n  position: absolute;\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  transition: transform 375ms cubic-bezier(0, 0, 0.2, 1);\n  background-color: #fff;\n  will-change: transform;\n}\n\n.fab-motion-container__view--exited {\n  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);\n  transform: translateY(100%);\n}</code></pre>\n'},VC1f:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tab-scroller&gt;&lt;!-- the tab components --&gt;&lt;/ui-tab-scroller&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>scrollX</code></td>\n<td>number</td>\n<td><code>0</code></td>\n<td>The current scroll value.</td>\n</tr>\n<tr>\n<td><code>align</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td><code>&lt;ui-tabs&gt;</code> common prop. Tab alignment.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Alignment: <code>&#39;start&#39;</code>, <code>&#39;center&#39;</code>, <code>&#39;end&#39;</code></p>\n</blockquote>\n'},VeWP:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid-cell&gt;&lt;!-- the grid cell content --&gt;&lt;/ui-grid-cell&gt;</code></pre>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>nested</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>The nested layout grid.</td>\n</tr>\n<tr>\n<td><code>columns</code></td>\n<td>number, string, object</td>\n<td><code>4</code></td>\n<td>Optional, specifies the number of columns the cell spans.</td>\n</tr>\n<tr>\n<td><code>order</code></td>\n<td>number, string</td>\n<td><code>null</code></td>\n<td>Optional, specifies the order of the cell.</td>\n</tr>\n<tr>\n<td><code>align</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Optional, specifies the alignment of cell.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>The <code>columns</code> and <code>order</code> range are between 1 and 12</li>\n<li>The <code>align</code> position: <code>&#39;top&#39;</code>, <code>&#39;middle&#39;</code>, <code>&#39;bottom&#39;</code></li>\n</ul>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the grid cell content and can contain HTML.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>When your contents need extra structure that cannot be supported by single layout grid, you can nest layout grid within each other. To nest layout grid, using <code>&lt;ui-grid-cell nested&gt;</code>.</p>\n</blockquote>\n<pre><code class="language-html">&lt;ui-grid&gt;\n  &lt;ui-grid-cell nested&gt;\n    &lt;!-- Parent 1 --&gt;\n    &lt;ui-grid-cell&gt;Child 1&lt;/ui-grid-cell&gt;\n    &lt;ui-grid-cell&gt;Child 2&lt;/ui-grid-cell&gt;\n    &lt;ui-grid-cell&gt;Child 3&lt;/ui-grid-cell&gt;\n  &lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell&gt;Parent 2&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell&gt;Parent 3&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n'},VpzA:function(t,e){t.exports='<pre><code class="language-css">$mdc-theme-primary: #6200ee; /* Baseline purple, 500 tone */\n$mdc-theme-on-primary: if(\n  mdc-theme-contrast-tone($mdc-theme-primary) == &#39;dark&#39;,\n  #000,\n  #fff\n);\n\n$mdc-theme-secondary: #018786; /* Baseline teal, 600 tone */\n$mdc-theme-on-secondary: if(\n  mdc-theme-contrast-tone($mdc-theme-secondary) == &#39;dark&#39;,\n  #000,\n  #fff\n);\n$mdc-theme-background: #fff;\n\n$mdc-theme-surface: #fff;\n$mdc-theme-on-surface: if(\n  mdc-theme-contrast-tone($mdc-theme-surface) == &#39;dark&#39;,\n  #000,\n  #fff\n);\n\n$mdc-theme-error: #b00020;\n$mdc-theme-on-error: if(\n  mdc-theme-contrast-tone($mdc-theme-error) == &#39;dark&#39;,\n  #000,\n  #fff\n);</code></pre>\n'},VrLe:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-pagination\n  v-model=&quot;page&quot;\n  :pageSize=&quot;pageSize&quot;\n  :total=&quot;total&quot;\n  showJumper\n  jumperBeforeText=&quot;Goto&quot;\n  jumperAfterText=&quot;page&quot;\n  jumperButtonText=&quot;Go&quot;\n&gt;&lt;/ui-pagination&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      page: 1,\n      pageSize: 5,\n      total: 100\n    };\n  }\n};</code></pre>\n'},"W0l+":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-image-list :textProtection=&quot;labelsType === 2&quot;&gt;\n  &lt;ui-image-item\n    v-for=&quot;i in 15&quot;\n    :key=&quot;i&quot;\n    :bgImage=&quot;`@/assets/photos/3x2/${i}.jpg`&quot;\n  &gt;\n    &lt;ui-image-text v-if=&quot;labelsType&quot;&gt;Text label&lt;/ui-image-text&gt;\n  &lt;/ui-image-item&gt;\n&lt;/ui-image-list&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      labelsType: 1\n    };\n  }\n};</code></pre>\n'},WIne:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield leadingIcon&gt;\n  Your name\n  &lt;template #before&gt;\n    &lt;ui-textfield-icon&gt;event&lt;/ui-textfield-icon&gt;\n  &lt;/template&gt;\n&lt;/ui-textfield&gt;\n&lt;ui-textfield trailingIcon&gt;\n  Your name\n  &lt;template #after&gt;\n    &lt;ui-textfield-icon&gt;delete&lt;/ui-textfield-icon&gt;\n  &lt;/template&gt;\n&lt;/ui-textfield&gt;\n\n&lt;ui-textfield outlined leadingIcon&gt;\n  &lt;template #before=&quot;{ iconClass }&quot;&gt;\n    &lt;span :class=&quot;iconClass&quot;&gt;\n      &lt;i class=&quot;fa fa-smile-o fa-lg&quot;&gt;&lt;/i&gt;\n    &lt;/span&gt;\n  &lt;/template&gt;\n  Your other name\n&lt;/ui-textfield&gt;\n&lt;ui-textfield outlined trailingIcon&gt;\n  Your other name\n  &lt;template #after=&quot;{ iconClass }&quot;&gt;\n    &lt;span :class=&quot;iconClass&quot;&gt;\n      &lt;i class=&quot;fa fa-close fa-lg&quot;&gt;&lt;/i&gt;\n    &lt;/span&gt;\n  &lt;/template&gt;\n&lt;/ui-textfield&gt;</code></pre>\n'},Wf3a:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-rangepicker&gt;&lt;/ui-rangepicker&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>string, number, array</td>\n<td><code>&#39;&#39;</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the rangepicker as an outlined text field.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the rangepicker as a disabled text field.</td>\n</tr>\n<tr>\n<td><code>noLabel</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the rangepicker that has no label.</td>\n</tr>\n<tr>\n<td><code>startId</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the start <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>startLabel</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>A text caption or description for the rangepicker, which use the start input&#39;s <code>placeholder</code> attribute instead.</td>\n</tr>\n<tr>\n<td><code>startPlaceholder</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>placeholder</em> attribute of the start <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>endId</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the end <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>endLabel</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>A text caption or description for the rangepicker, which use the end input&#39;s <code>placeholder</code> attribute instead.</td>\n</tr>\n<tr>\n<td><code>endPlaceholder</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>placeholder</em> attribute of the end <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>object</td>\n<td><code>{}</code></td>\n<td>See <a href="https://flatpickr.js.org/options/">Flatpickr configuration</a>.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>separator</code></td>\n<td></td>\n<td>The custom separator.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(value: array)</code></td>\n<td>Emits when the rangepicker value is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the rangepicker using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-rangepicker v-model=&quot;value&quot;&gt;&lt;/ui-rangepicker&gt;\n\n// Manual\n&lt;ui-rangepicker\n  :model=&quot;value&quot;\n  @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-rangepicker&gt;</code></pre>\n'},WynS:function(t,e){t.exports='<pre><code class="language-html">&lt;p&gt;\n  &lt;ui-switch v-model=&quot;loading&quot;&gt;&lt;/ui-switch&gt;\n&lt;/p&gt;\n\n&lt;ui-skeleton\n  v-model=&quot;loading&quot;\n  active\n  :avatar=&quot;{ size: &#39;large&#39;, shape: &#39;square&#39; }&quot;\n&gt;\n  &lt;ui-list&gt;\n    &lt;ui-item v-for=&quot;i in 3&quot; :key=&quot;i&quot;&gt;Hello BalmJS {{ i }}&lt;/ui-item&gt;\n  &lt;/ui-list&gt;\n&lt;/ui-skeleton&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      loading: true\n    };\n  }\n};</code></pre>\n'},XFvP:function(t,e){t.exports='<pre><code class="language-css">/* Global */\n$mdc-pagination-color: $mdc-theme-primary;\n$mdc-pagination-corner-radius: 4px;\n/* Default */\n$mdc-pagination-fill-color: white;\n$mdc-pagination-text-color: rgba(mdc-theme-prop-value(on-surface), 0.87);\n$mdc-pagination-border-color: rgba(mdc-theme-prop-value(on-surface), 0.38);\n/* Hover */\n$mdc-pagination-hover-fill-color: $mdc-pagination-fill-color;\n$mdc-pagination-hover-text-color: $mdc-pagination-color;\n$mdc-pagination-hover-border-color: $mdc-pagination-color;\n/* Activated */\n$mdc-pagination-active-fill-color: rgba($mdc-pagination-color, 0.7);\n$mdc-pagination-active-text-color: $mdc-pagination-fill-color;\n$mdc-pagination-active-border-color: $mdc-pagination-color;</code></pre>\n'},XXab:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button raised @click=&quot;$alert(&#39;Hello BalmJS&#39;)&quot;&gt;Alert1&lt;/ui-button&gt;</code></pre>\n'},"XZO+":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-image-item&gt;&lt;!-- image and text --&gt;&lt;/ui-image-item&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>image</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Add the <em>src</em> attribute directly to the <code>&lt;img&gt;</code> in the image container.</td>\n</tr>\n<tr>\n<td><code>bgImage</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Use a <code>&lt;div&gt;</code> instead of <code>&lt;img&gt;</code> element.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>Optional. Indicates the area within each item containing the supporting text label, if the Image List contains text labels.</td>\n</tr>\n<tr>\n<td><code>image</code></td>\n<td></td>\n<td>Optional. The image container displays an image list item\u2019s image or illustration.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the item is clicked.</td>\n</tr>\n</tbody></table>\n'},XfPe:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card outlined class=&quot;demo-card&quot;&gt;\n  &lt;div :class=&quot;[$tt(&#39;subtitle2&#39;), &#39;demo-card-article-group-heading&#39;]&quot;&gt;\n    Headlines\n  &lt;/div&gt;\n  &lt;ui-list-divider&gt;&lt;/ui-list-divider&gt;\n\n  &lt;template v-for=&quot;(item, index) in list&quot;&gt;\n    &lt;a :key=&quot;`item${index}`&quot; class=&quot;demo-card-article&quot; v-ripple&gt;\n      &lt;h2 :class=&quot;[$tt(&#39;headline5&#39;), &#39;demo-card-article__title&#39;]&quot;&gt;\n        {{ item.title }}\n      &lt;/h2&gt;\n      &lt;p class=&quot;demo-card-article__snippet&quot;&gt;{{ item.content }}&lt;/p&gt;\n    &lt;/a&gt;\n    &lt;ui-list-divider :key=&quot;`divider${index}`&quot;&gt;&lt;/ui-list-divider&gt;\n  &lt;/template&gt;\n\n  &lt;ui-card-actions fullBleed&gt;\n    &lt;ui-a class=&quot;demo-card-action&quot;&gt;\n      All Business Headlines\n      &lt;template #after&gt;\n        &lt;ui-icon&gt;arrow_forward&lt;/ui-icon&gt;\n      &lt;/template&gt;\n    &lt;/ui-a&gt;\n  &lt;/ui-card-actions&gt;\n&lt;/ui-card&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      list: [\n        {\n          title: &#39;Copper on the rise&#39;,\n          content:\n            &#39;Copper price soars amid global market optimism and increased demand.&#39;\n        },\n        {\n          title: &#39;U.S. tech startups rebound&#39;,\n          content:\n            &#39;Favorable business conditions have allowed startups to secure more fundraising deals compared to last year.&#39;\n        },\n        {\n          title: `Asia&#39;s clean energy ambitions`,\n          content:\n            &#39;China plans to invest billions of dollars for the development of over 300 clean energy projects in Southeast Asia.&#39;\n        }\n      ]\n    };\n  }\n};</code></pre>\n<pre><code class="language-css">/* Sass code */\n.demo-card {\n  width: 350px;\n  margin: 48px;\n}\n\n.demo-card-article-group-heading {\n  @include mdc-theme-prop(color, text-secondary-on-light);\n\n  padding: 8px 16px;\n}\n\n.demo-card-article {\n  padding: 16px;\n  text-decoration: none;\n  color: inherit;\n}\n\n.demo-card-article__title {\n  margin: 0 0 4px 0;\n}\n\n.demo-card-article__snippet {\n  @include mdc-theme-prop(color, text-secondary-on-light);\n\n  margin: 0;\n}</code></pre>\n'},XoHX:function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;demo--top-app-bar&quot;&gt;\n  &lt;ui-top-app-bar\n    contentSelector=&quot;#content-main&quot;\n    navId=&quot;demo-menu&quot;\n    :type=&quot;type&quot;\n    :title=&quot;title&quot;\n  &gt;\n    &lt;template #toolbar=&quot;{ itemClass }&quot;&gt;\n      &lt;template v-if=&quot;!isShort&quot;&gt;\n        &lt;ui-icon-a :class=&quot;itemClass&quot; icon=&quot;file_download&quot;&gt;&lt;/ui-icon-a&gt;\n        &lt;ui-icon-a :class=&quot;itemClass&quot; icon=&quot;print&quot;&gt;&lt;/ui-icon-a&gt;\n        &lt;ui-icon-a :class=&quot;itemClass&quot; icon=&quot;bookmark&quot;&gt;&lt;/ui-icon-a&gt;\n      &lt;/template&gt;\n      &lt;ui-menu-anchor v-if=&quot;isShort&quot;&gt;\n        &lt;ui-icon-button\n          :class=&quot;itemClass&quot;\n          icon=&quot;more_vert&quot;\n          @click=&quot;$balmUI.onOpen(&#39;showMoreActions&#39;)&quot;\n        &gt;&lt;/ui-icon-button&gt;\n        &lt;ui-menu\n          v-model=&quot;showMoreActions&quot;\n          :items=&quot;[&#39;Back&#39;, &#39;Forward&#39;, &#39;Reload&#39;, &#39;-&#39;, &#39;Settings&#39;]&quot;\n        &gt;&lt;/ui-menu&gt;\n      &lt;/ui-menu-anchor&gt;\n    &lt;/template&gt;\n  &lt;/ui-top-app-bar&gt;\n\n  &lt;ui-drawer type=&quot;modal&quot; v-model=&quot;openDrawer&quot; menuSelector=&quot;#demo-menu&quot;&gt;\n    &lt;ui-drawer-header\n      :innerClass=&quot;[$themeColor(&#39;on-primary&#39;), $themeColor(&#39;primary-bg&#39;)]&quot;\n    &gt;\n      &lt;ui-drawer-title&gt;Header here&lt;/ui-drawer-title&gt;\n    &lt;/ui-drawer-header&gt;\n    &lt;ui-drawer-content&gt;\n      &lt;ui-list&gt;\n        &lt;ui-item activated @click=&quot;$router.back()&quot;&gt;\n          &lt;ui-item-first-content&gt;\n            &lt;ui-icon&gt;arrow_back&lt;/ui-icon&gt;\n          &lt;/ui-item-first-content&gt;\n          &lt;ui-item-text-content&gt;Back&lt;/ui-item-text-content&gt;\n        &lt;/ui-item&gt;\n        &lt;ui-list-divider&gt;&lt;/ui-list-divider&gt;\n      &lt;/ui-list&gt;\n    &lt;/ui-drawer-content&gt;\n  &lt;/ui-drawer&gt;\n\n  &lt;ui-drawer-backdrop&gt;&lt;/ui-drawer-backdrop&gt;\n\n  &lt;main class=&quot;demo-main&quot;&gt;\n    &lt;div id=&quot;content-main&quot;&gt;\n      &lt;p v-for=&quot;i in 12&quot; :key=&quot;i&quot; class=&quot;demo-paragraph&quot;&gt;\n        Content\n      &lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/main&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      type: 0,\n      title: &#39;Hello BalmUI&#39;,\n      openDrawer: false,\n      showMoreActions: false\n    };\n  }\n};</code></pre>\n'},YgA8:function(t,e){t.exports='<h3 id="21-theme-color-mdc-theme--theme_style">2.1 Theme color (<code>mdc-theme--&lt;THEME_STYLE&gt;</code>)</h3>\n<pre><code class="language-js">$themeColor(style);\n$setTheme(style, value);</code></pre>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>style</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Theme style name.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Theme color value.</td>\n</tr>\n</tbody></table>\n<h4 id="theme-styles">Theme styles</h4>\n<ul>\n<li><code>primary</code></li>\n<li><code>secondary</code></li>\n<li><code>background</code></li>\n<li><code>surface</code></li>\n<li><code>on-primary</code></li>\n<li><code>on-secondary</code></li>\n<li><code>on-surface</code></li>\n<li><code>primary-bg</code></li>\n<li><code>secondary-bg</code></li>\n</ul>\n<h3 id="22-text-color-mdc-theme--text-text_style-on-theme_tone">2.2 Text color (<code>mdc-theme--text-&lt;TEXT_STYLE&gt;-on-&lt;THEME_TONE&gt;</code>)</h3>\n<pre><code class="language-js">$textColor(style, tone);\n$setTextTheme(style, tone, value);</code></pre>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>style</code></td>\n<td>String</td>\n<td><code>null</code></td>\n<td>Text style name.</td>\n</tr>\n<tr>\n<td><code>tone</code></td>\n<td>String</td>\n<td><code>&#39;background&#39;</code></td>\n<td>Theme tone name.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>String</td>\n<td><code>null</code></td>\n<td>Text color value.</td>\n</tr>\n</tbody></table>\n<h4 id="text-styles">Text styles</h4>\n<ul>\n<li><code>primary</code></li>\n<li><code>secondary</code></li>\n<li><code>hint</code></li>\n<li><code>disabled</code></li>\n<li><code>icon</code></li>\n</ul>\n<h4 id="theme-tones">Theme tones</h4>\n<ul>\n<li><code>background</code></li>\n<li><code>light</code></li>\n<li><code>dark</code></li>\n</ul>\n<blockquote>\n<p>You can overwrite theme by <code>$setTheme</code> and <code>$setTextTheme</code> methods.</p>\n</blockquote>\n'},YnQO:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-icon&gt;` props.\n  UiIcon: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiIcon from &#39;balm-ui/components/icon&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;;\n\n// Optional. Overwrite `&lt;ui-icon&gt;` props.\nVue.use(UiIcon, {\n  // some props\n});</code></pre>\n'},"Z/7x":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-autocomplete\n  noLabel\n  v-model=&quot;keywords&quot;\n  :source=&quot;source&quot;\n  placeholder=&quot;Type &#39;a&#39;, then &#39;b&#39;&quot;\n  delay=&quot;500&quot;\n  remote\n  autoFocus\n  @search=&quot;onSearch&quot;\n&gt;&lt;/ui-autocomplete&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      keywords: &#39;&#39;,\n      source: []\n    };\n  },\n  methods: {\n    async onSearch(keywords) {\n      let response = await this.$http.get(&#39;/api/search&#39;, {\n        params: {\n          text: keywords\n        }\n      });\n      let { data } = response;\n      // mock data\n      this.source = data[keywords] ? data[keywords] : [];\n    }\n  }\n};</code></pre>\n'},Z94r:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield&gt;&lt;!-- the label text --&gt;&lt;/ui-textfield&gt;</code></pre>\n<h3 id="ui-textfield-types"><code>&lt;ui-textfield&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;filled&#39;</code></li>\n<li><code>1</code>: <code>&#39;outlined&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Text field types.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the text field as an outlined text field. (Equivalent to <code>type=1</code>)</td>\n</tr>\n<tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>string, number</td>\n<td><code>&#39;&#39;</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>label</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>A text caption or description for the text field, which use the input&#39;s <code>placeholder</code> attribute instead.</td>\n</tr>\n<tr>\n<td><code>noLabel</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the text field that has no label.</td>\n</tr>\n<tr>\n<td><code>placeholder</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>placeholder</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>fullwidth</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the text field as a full width text field.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the text field as a disabled text field.</td>\n</tr>\n<tr>\n<td><code>leadingIcon</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td>Styles the text field as a text field with a leading icon. (Use with <code>before</code> slot)</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional. Indicates an icon element with a leading icon. See <a href="/#/icons">Material Icons</a> list. (No need to configure <code>leadingIcon</code>)</td>\n</tr>\n<tr>\n<td><code>trailingIcon</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td>Styles the text field as a text field with a trailing icon. (Use with <code>after</code> slot)</td>\n</tr>\n<tr>\n<td><code>dense</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the text field as a dense text field.</td>\n</tr>\n<tr>\n<td><code>inputType</code></td>\n<td>string</td>\n<td><code>&#39;text&#39;</code></td>\n<td>Native <code>&lt;input&gt;</code> types: <code>text</code>, <code>number</code>, <code>password</code>, etc.</td>\n</tr>\n<tr>\n<td><code>rows</code></td>\n<td>number, string</td>\n<td><code>1</code></td>\n<td>The <em>rows</em> attribute of the <code>&lt;textarea&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>cols</code></td>\n<td>number, string</td>\n<td><code>20</code></td>\n<td>The <em>cols</em> attribute of the <code>&lt;textarea&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>helperTextId</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Required for the <em>id</em> attribute of the <code>&lt;ui-textfield-helper&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>attrs</code></td>\n<td>object</td>\n<td><code>null</code></td>\n<td>Other attributes for <code>&lt;input&gt;</code> or <code>&lt;textarea&gt;</code>.</td>\n</tr>\n</tbody></table>\n<p>In addition to the above, the following properties proxy to the input element&#39;s properties of the same name:</p>\n<ul>\n<li><code>required</code></li>\n<li><code>pattern</code></li>\n<li><code>minlength</code></li>\n<li><code>maxlength</code>: Required for character counter - <code>&lt;ui-textfield-helper counter&gt;</code></li>\n<li><code>min</code></li>\n<li><code>max</code></li>\n<li><code>step</code></li>\n</ul>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the label for the text field.</td>\n</tr>\n<tr>\n<td><code>before</code></td>\n<td><code>iconClass</code></td>\n<td>The before slot holds a custom leading icon.</td>\n</tr>\n<tr>\n<td><code>after</code></td>\n<td><code>iconClass</code></td>\n<td>The before slot holds a custom trailing icon.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>focus</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the text field is focused.</td>\n</tr>\n<tr>\n<td><code>keydown</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when a key is pressed in the text field.</td>\n</tr>\n<tr>\n<td><code>input</code></td>\n<td><code>function(model: string)</code></td>\n<td>Emits when the text field value is changed.</td>\n</tr>\n<tr>\n<td><code>change</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when a change in the text field value is committed.</td>\n</tr>\n<tr>\n<td><code>enter</code></td>\n<td><code>function(model: string)</code></td>\n<td>Emits when the <em>Enter</em> key is pressed in the input.</td>\n</tr>\n<tr>\n<td><code>blur</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the text field loses focus.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the text field using <code>@input</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-textfield v-model=&quot;value&quot;&gt;&lt;/ui-textfield&gt;\n\n// Manual\n&lt;ui-textfield\n  :model=&quot;value&quot;\n  @input=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-textfield&gt;</code></pre>\n'},"ZHq+":function(t,e){t.exports='<pre><code class="language-html">&lt;figure class=&quot;linear-progress-demo&quot;&gt;\n  &lt;ui-linear-progress :progress=&quot;progress&quot;&gt;&lt;/ui-linear-progress&gt;\n  &lt;figcaption&gt;Determinate (Progress: {{progress }})&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n&lt;figure class=&quot;linear-progress-demo&quot;&gt;\n  &lt;ui-linear-progress indeterminate&gt;&lt;/ui-linear-progress&gt;\n  &lt;figcaption&gt;Indeterminate&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n&lt;figure class=&quot;linear-progress-demo&quot;&gt;\n  &lt;ui-linear-progress progress=&quot;0.5&quot; data-buffer=&quot;true&quot; buffer=&quot;0.75&quot;&gt;&lt;/ui-linear-progress&gt;\n  &lt;figcaption&gt;Buffer&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n&lt;figure class=&quot;linear-progress-demo&quot;&gt;\n  &lt;ui-linear-progress reversed progress=&quot;0.5&quot;&gt;&lt;/ui-linear-progress&gt;\n  &lt;figcaption&gt;Reversed&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n&lt;figure class=&quot;linear-progress-demo&quot;&gt;\n  &lt;ui-linear-progress indeterminate reversed&gt;&lt;/ui-linear-progress&gt;\n  &lt;figcaption&gt;Indeterminate Reversed&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n&lt;figure class=&quot;linear-progress-demo&quot;&gt;\n  &lt;ui-linear-progress reversed progress=&quot;0.5&quot; data-buffer=&quot;true&quot; buffer=&quot;0.75&quot;&gt;&lt;/ui-linear-progress&gt;\n  &lt;figcaption&gt;Buffer Reversed&lt;/figcaption&gt;\n&lt;/figure&gt;\n\n&lt;figure class=&quot;linear-progress-demo&quot;&gt;\n  &lt;ui-linear-progress class=&quot;demo-linear-progress--custom&quot; progress=&quot;0.5&quot; data-buffer=&quot;true&quot; buffer=&quot;0.75&quot;&gt;&lt;/ui-linear-progress&gt;\n  &lt;figcaption&gt;Custom Colors with Buffer&lt;/figcaption&gt;\n&lt;/figure&gt;</code></pre>\n'},ZKNm:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-checkbox&gt;` props.\n  UiCheckbox: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiFormField from &#39;balm-ui/components/form-field&#39;;\nimport UiCheckbox from &#39;balm-ui/components/checkbox&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/form-field.css&#39;;\nimport &#39;balm-ui/components/checkbox.css&#39;;\n\nVue.use(UiFormField);\n// Optional. Overwrite `&lt;ui-checkbox&gt;` props.\nVue.use(UiCheckbox, {\n  // some props\n});</code></pre>\n'},ZUuK:function(t,e){t.exports='<pre><code class="language-css">$mdc-fab-extended-icon-padding: 12px;\n$mdc-fab-extended-label-padding: 20px;\n$mdc-fab-height: 56px;\n$mdc-fab-mini-height: 40px;\n$mdc-fab-extended-height: 48px;</code></pre>\n'},a9UM:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-top-app-bar&gt;&lt;!-- the application title --&gt;&lt;/ui-top-app-bar&gt;</code></pre>\n<h3 id="ui-top-app-bar-types"><code>&lt;ui-top-app-bar&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;standard&#39;</code></li>\n<li><code>1</code>: <code>&#39;fixed&#39;</code></li>\n<li><code>2</code>: <code>&#39;dense&#39;</code></li>\n<li><code>3</code>: <code>&#39;prominent&#39;</code></li>\n<li><code>4</code>: <code>&#39;prominentDense&#39;</code></li>\n<li><code>5</code>: <code>&#39;short&#39;</code></li>\n<li><code>6</code>: <code>&#39;shortCollapsed&#39;</code></li>\n<li><code>-1</code>: <code>&#39;nonRegular&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>contentSelector</code></td>\n<td>string</td>\n<td>(required)</td>\n<td>Selector used to style the content below the top app bar, to prevent the top app bar from covering it.</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td>number</td>\n<td><code>0</code></td>\n<td>Mandatory. Top app bar types.</td>\n</tr>\n<tr>\n<td><code>fixed</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Fixed top app bars stay at the top of the page and elevate above the content when scrolled.</td>\n</tr>\n<tr>\n<td><code>dense</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>The dense top app bar is shorter.</td>\n</tr>\n<tr>\n<td><code>prominent</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>The prominent top app bar is taller.</td>\n</tr>\n<tr>\n<td><code>prominentDense</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>The prominent top app bar with dense.</td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Short top app bars are top app bars that can collapse to the navigation icon side when scrolled.</td>\n</tr>\n<tr>\n<td><code>shortCollapsed</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Short top app bars can be configured to always appear collapsed.</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Application title.</td>\n</tr>\n<tr>\n<td><code>navId</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Control the navigation drawer is opened or closed. (Please refer to the <code>menuSelector</code> prop of the <a href="/#/drawer">drawer</a>)</td>\n</tr>\n<tr>\n<td><code>navIcon</code></td>\n<td>string</td>\n<td><code>&#39;menu&#39;</code></td>\n<td>A navigation icon.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Short top app bars should be used with no more than 1 action item.</p>\n</blockquote>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the application title and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>nav-icon</code></td>\n<td></td>\n<td>The nav-icon slot holds the navigation icon and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>toolbar</code></td>\n<td><code>itemClass</code></td>\n<td>The toolbar slot holds the action items and can contain HTML.</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;template #toolbar=&quot;{ itemClass }&quot;&gt;\n  &lt;ui-icon-button :class=&quot;itemClass&quot; icon=&quot;ICON&quot;&gt;&lt;/ui-icon-button&gt;\n&lt;/template&gt;</code></pre>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>nav</code></td>\n<td><code>function()</code></td>\n<td>Emits when the navigation icon is clicked.</td>\n</tr>\n<tr>\n<td><code>close</code></td>\n<td><code>function()</code></td>\n<td>Emits when the navigation icon is clicked. Applicable only for Contextual action bar.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>navId</code> of the top app bar and <code>menuSelector</code> of the drawer, you should listen for the top app bar using <code>@nav</code> and update the <code>v-model</code> prop of the drawer.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-top-app-bar navId=&quot;demo-menu&quot;&gt;&lt;/ui-top-app-bar&gt;\n&lt;ui-drawer type=&quot;modal&quot; menuSelector=&quot;#demo-menu&quot;&gt;&lt;/ui-drawer&gt;\n\n// Manual\n&lt;ui-top-app-bar @nav=&quot;$balmUI.onShow(&#39;open&#39;)&quot;&gt;&lt;/ui-top-app-bar&gt;\n&lt;ui-drawer type=&quot;modal&quot; v-model=&quot;open&quot;&gt;&lt;/ui-drawer&gt;</code></pre>\n'},aCmL:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card class=&quot;demo-card demo-card--music&quot;&gt;\n  &lt;ui-card-content class=&quot;demo-card__primary-action&quot; v-ripple&gt;\n    &lt;div class=&quot;demo-card__music-row&quot;&gt;\n      &lt;ui-card-media\n        square\n        class=&quot;demo-card__media demo-card__media--music&quot;\n      &gt;&lt;/ui-card-media&gt;\n      &lt;div class=&quot;demo-card__music-info&quot;&gt;\n        &lt;div :class=&quot;[$tt(&#39;headline5&#39;), &#39;demo-card__music-title&#39;]&quot;&gt;\n          Rozes\n        &lt;/div&gt;\n        &lt;div class=&quot;demo-card__music-artist&quot;&gt;Under the Grave&lt;/div&gt;\n        &lt;div class=&quot;demo-card__music-year&quot;&gt;(2016)&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/ui-card-content&gt;\n  &lt;ui-list-divider&gt;&lt;/ui-list-divider&gt;\n  &lt;ui-card-actions&gt;\n    &lt;ui-card-buttons class=&quot;demo-card__action-buttons--text-only&quot;\n      &gt;Rate this album&lt;/ui-card-buttons\n    &gt;\n    &lt;ui-card-icons&gt;\n      &lt;ui-icon\n        v-for=&quot;i in 5&quot;\n        :key=&quot;i&quot;\n        class=&quot;demo-card__action-icon--star&quot;\n        :title=&quot;`${i} star${i &gt; 1 ? &#39;s&#39; : &#39;&#39;}`&quot;\n        &gt;star_border&lt;/ui-icon\n      &gt;\n    &lt;/ui-card-icons&gt;\n  &lt;/ui-card-actions&gt;\n&lt;/ui-card&gt;</code></pre>\n<pre><code class="language-css">/* Sass code */\n.demo-card {\n  width: 350px;\n  margin: 48px;\n}\n\n.demo-card__media {\n  background-image: url(&#39;../images/1-1.jpg&#39;);\n}\n\n.demo-card--music {\n  @include mdc-card-corner-radius(24px 4px);\n\n  @include mdc-rtl {\n    @include mdc-card-corner-radius(4px 24px);\n  }\n}\n\n.demo-card__music-row {\n  display: flex;\n  border-top-left-radius: inherit;\n\n  @include mdc-rtl {\n    border-top-left-radius: 0;\n    border-top-right-radius: inherit;\n  }\n}\n\n.demo-card__media--music {\n  width: 110px;\n  border-top-left-radius: inherit;\n\n  @include mdc-rtl {\n    border-top-left-radius: 0;\n    border-top-right-radius: inherit;\n  }\n}\n\n.demo-card__music-info {\n  display: flex;\n  flex-direction: column;\n  padding: 8px 16px;\n}\n\n.demo-card__action-buttons--text-only {\n  margin-left: 8px;\n}\n\n.demo-card__action-icon--star {\n  margin-left: 4px;\n  margin-right: 4px;\n  cursor: pointer;\n}</code></pre>\n'},anq4:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list-divider&gt;&lt;/ui-list-divider&gt;\n\n&lt;ui-item-divider&gt;&lt;/ui-item-divider&gt;</code></pre>\n<h4 id="common-props">Common Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>padded</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional, leaves gaps on each side of divider to match padding of the last tile.</td>\n</tr>\n<tr>\n<td><code>inset</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional, increases the leading margin of the divider so that it does not intersect the avatar column.</td>\n</tr>\n</tbody></table>\n'},aqmO:function(t,e){t.exports=""},b6bS:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button&gt;&lt;!-- the button text label --&gt;&lt;/ui-button&gt;\n\n&lt;ui-a&gt;&lt;!-- the anchor text label --&gt;&lt;/ui-a&gt;</code></pre>\n<h3 id="ui-button-types"><code>&lt;ui-button&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;text&#39;</code></li>\n<li><code>1</code>: <code>&#39;outlined&#39;</code></li>\n<li><code>2</code>: <code>&#39;raised&#39;</code></li>\n<li><code>3</code>: <code>&#39;unelevated&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Button types.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Styles an outlined button that is flush with the surface.</td>\n</tr>\n<tr>\n<td><code>raised</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Styles a contained button that is elevated above the surface.</td>\n</tr>\n<tr>\n<td><code>unelevated</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Styles a contained button that is flush with the surface.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional. Indicates an icon element. See <a href="/#/icons">Material Icons</a> list.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>To disable a button, add the <code>disabled</code> attribute directly to the <code>&lt;button&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Applicable only for the <code>&lt;ui-a&gt;</code>, add the <code>href</code> attribute directly to the <code>&lt;a&gt;</code>.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the button or link text and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>before</code></td>\n<td><code>iconClass</code></td>\n<td>Custom leading icon</td>\n</tr>\n<tr>\n<td><code>after</code></td>\n<td><code>iconClass</code></td>\n<td>Custom trailing icon</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;template #after=&quot;{ iconClass }&quot;&gt;\n  &lt;ui-icon :class=&quot;iconClass&quot;&gt;ICON&lt;/ui-icon&gt;\n&lt;/template&gt;</code></pre>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the button is clicked.</td>\n</tr>\n</tbody></table>\n'},bDYD:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tab-bar class=&quot;hero-demo-tab-bar&quot; v-model=&quot;active&quot;&gt;\n  &lt;ui-tab v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;\n    {{ item }}\n  &lt;/ui-tab&gt;\n&lt;/ui-tab-bar&gt;</code></pre>\n<pre><code class="language-css">.hero-demo-tab-bar {\n  background-color: #f2f2f2;\n  max-width: 420px;\n}</code></pre>\n'},bg4W:function(t,e){t.exports='<pre><code class="language-html">&lt;!-- Using Material Icons --&gt;\n&lt;ui-icon-button v-model=&quot;value1&quot; :toggle=&quot;icon1&quot;&gt; &lt;/ui-icon-button&gt;\n\n&lt;!-- Using Font Awesome --&gt;\n&lt;ui-icon-button v-model=&quot;value2&quot;&gt;\n  &lt;template #default=&quot;{ onClass, offClass }&quot;&gt;\n    &lt;i :class=&quot;[onClass, icon2.on]&quot;&gt;&lt;/i&gt;\n    &lt;i :class=&quot;[offClass, icon2.off]&quot;&gt;&lt;/i&gt;\n  &lt;/template&gt;\n&lt;/ui-icon-button&gt;\n\n&lt;!-- Using SVG Icons --&gt;\n&lt;ui-icon-button&gt;\n  &lt;template #default=&quot;{ onClass, offClass }&quot;&gt;\n    &lt;svg\n      xmlns=&quot;http://www.w3.org/2000/svg&quot;\n      width=&quot;24&quot;\n      height=&quot;24&quot;\n      viewBox=&quot;0 0 24 24&quot;\n      :class=&quot;onClass&quot;\n    &gt;\n      &lt;path\n        d=&quot;M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z&quot;\n      /&gt;\n    &lt;/svg&gt;\n    &lt;svg\n      xmlns=&quot;http://www.w3.org/2000/svg&quot;\n      width=&quot;24&quot;\n      height=&quot;24&quot;\n      viewBox=&quot;0 0 24 24&quot;\n      :class=&quot;offClass&quot;\n    &gt;\n      &lt;path\n        d=&quot;M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z&quot;\n      /&gt;\n    &lt;/svg&gt;\n  &lt;/template&gt;\n&lt;/ui-icon-button&gt;\n\n&lt;!-- Using Image Icons --&gt;\n&lt;ui-icon-button&gt;\n  &lt;template #default=&quot;{ onClass, offClass }&quot;&gt;\n    &lt;img src=&quot;/path/to/image1.png&quot; :class=&quot;onClass&quot; /&gt;\n    &lt;img src=&quot;/path/to/image2.png&quot; :class=&quot;offClass&quot; /&gt;\n  &lt;/template&gt;\n&lt;/ui-icon-button&gt;\n\n&lt;!-- Disabled Icons --&gt;\n&lt;ui-icon-button :toggle=&quot;icon1&quot; disabled&gt;&lt;/ui-icon-button&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      value1: false,\n      icon1: {\n        on: &#39;favorite&#39;,\n        off: &#39;favorite_border&#39;\n      },\n      value2: true,\n      icon2: {\n        on: &#39;fa fa-star&#39;,\n        off: &#39;fa fa-star-o&#39;\n      }\n    };\n  }\n};</code></pre>\n'},bkdQ:function(t,e){t.exports='<pre><code class="language-html">&lt;a v-ripple&gt;&lt;/a&gt;</code></pre>\n<h4 id="default-ripple">Default ripple</h4>\n<ul>\n<li><code>v-ripple=&quot;color&quot;</code></li>\n<li><code>v-ripple:cssOnly=&quot;color&quot;</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>color</code></td>\n<td>number, string</td>\n<td><code>null</code></td>\n<td>Sets the ripple color</td>\n</tr>\n</tbody></table>\n<ol>\n<li>Sets the ripple color to the theme primary color: <code>1</code> or <code>&#39;primary&#39;</code>.</li>\n<li>Sets the ripple color to the theme secondary color: <code>2</code> or <code>&#39;secondary&#39;</code>.</li>\n</ol>\n<h4 id="unbounded-ripple">Unbounded ripple</h4>\n<ul>\n<li><code>v-ripple.unbounded=&quot;color&quot;</code></li>\n<li><code>v-ripple:cssOnly.unbounded=&quot;color&quot;</code></li>\n</ul>\n'},cKXj:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card-actions&gt;&lt;!-- the card actions parent components --&gt;&lt;/ui-card-actions&gt;</code></pre>\n<blockquote>\n<p>Row containing action buttons and/or icons.</p>\n</blockquote>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fullBleed</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Removes the action area&#39;s padding and causes its only child (an <code>mdc-card__action</code> element) to consume 100% of the action area&#39;s width</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the card actions parent components.</td>\n</tr>\n</tbody></table>\n<p><strong>Card actions parent components:</strong></p>\n<ul>\n<li><code>&lt;ui-card-buttons&gt;</code></li>\n<li><code>&lt;ui-card-icons&gt;</code></li>\n</ul>\n'},"cN+0":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card-media-content&gt;&lt;!-- the card media content --&gt;&lt;/ui-card-media-content&gt;</code></pre>\n<blockquote>\n<p>An absolutely-positioned box the same size as the media area, for displaying a title or icon on top of the <code>background-image</code>.</p>\n</blockquote>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the card media content and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},cO62:function(t,e){t.exports='<pre><code class="language-html">&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Text Label and Icon&lt;/h6&gt;\n&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-bar type=&quot;both&quot; v-model=&quot;active&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot;\n      type=&quot;both&quot;\n      :icon=&quot;tab.icon&quot;&gt;\n      {{ tab.text }}\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;\n\n&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Stacked Text Label and Icon&lt;/h6&gt;\n&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-bar type=&quot;both&quot; v-model=&quot;active&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot;\n      type=&quot;both&quot;\n      :icon=&quot;tab.icon&quot;\n      stacked&gt;\n      {{ tab.text }}\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      active: 0,\n      tabs: [\n        {\n          icon: &#39;phone&#39;,\n          url: &#39;#recents&#39;\n        },\n        {\n          icon: &#39;favorite&#39;,\n          url: &#39;#favorites&#39;\n        },\n        {\n          icon: &#39;person_pin&#39;,\n          url: &#39;#nearby&#39;\n        }\n      ]\n    };\n  }\n};</code></pre>\n'},cVHu:function(t,e){t.exports='<h2 id="utilities">Utilities</h2>\n<h3 id="1-types">1. Types</h3>\n<p>Default Usage</p>\n<pre><code class="language-js">import { types } from &#39;balm-ui/dist/balm-ui-plus&#39;;</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import types from &#39;balm-ui/utils/types&#39;;</code></pre>\n<p>Methods</p>\n<pre><code class="language-js">types.getType(any);\n\ntypes.isUndefined(value);\ntypes.isNull(value);\ntypes.isBoolean(value);\ntypes.isNumber(value);\ntypes.isString(value);\ntypes.isSymbol(value);\ntypes.isObject(value);\ntypes.isArray(value);\ntypes.isFunction(value);</code></pre>\n<blockquote>\n<p><code>getType</code> returns a string, others return a boolean.</p>\n</blockquote>\n<h3 id="2-helpers">2. Helpers</h3>\n<p>Default Usage</p>\n<pre><code class="language-js">import { helpers } from &#39;balm-ui/dist/balm-ui-plus&#39;;</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import helpers from &#39;balm-ui/utils/helpers&#39;;</code></pre>\n<p>Methods</p>\n<pre><code class="language-js">helpers.isEmpty(value);\n\nhelpers.jsonEqual(jsonA, jsonB); // The order of the properties IS IMPORTANT\nhelpers.isDeepEqual(obj1, obj2);</code></pre>\n<ul>\n<li><code>isEmpty</code> - The following values are considered to be empty:<ul>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>false</code></li>\n<li><code>0</code></li>\n<li><code>&#39;&#39;</code></li>\n<li><code>&#39;0&#39;</code></li>\n<li><code>{}</code></li>\n<li><code>[]</code></li>\n<li>an empty <code>map</code> or <code>set</code></li>\n</ul>\n</li>\n</ul>\n<h3 id="3-ie">3. IE</h3>\n<p>Default Usage</p>\n<pre><code class="language-js">import { detectIE } from &#39;balm-ui/dist/balm-ui-plus&#39;;</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import detectIE from &#39;balm-ui/utils/ie&#39;;</code></pre>\n<p>Methods</p>\n<pre><code class="language-js">detectIE();</code></pre>\n<blockquote>\n<p>IE browser returns version, other browsers return <code>false</code>.</p>\n</blockquote>\n'},cYgC:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-dialog-title&gt;&lt;!-- the dialog title --&gt;&lt;/ui-dialog-title&gt;</code></pre>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the dialog title and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},cc0D:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-chips&gt;\n  &lt;ui-chip v-for=&quot;(item, index) in actionList&quot; :key=&quot;index&quot; :icon=&quot;item.icon&quot;&gt;\n    {{ item.name }}\n  &lt;/ui-chip&gt;\n&lt;/ui-chips&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      actionList: [\n        {\n          icon: &#39;wb_sunny&#39;,\n          name: &#39;Turn on lights&#39;\n        },\n        {\n          icon: &#39;bookmark&#39;,\n          name: &#39;Bookmark&#39;\n        },\n        {\n          icon: &#39;alarm&#39;,\n          name: &#39;Set alarm&#39;\n        },\n        {\n          icon: &#39;directions&#39;,\n          name: &#39;Get directions&#39;\n        }\n      ]\n    };\n  }\n};</code></pre>\n'},ce2t:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card&gt;&lt;!-- the card child components --&gt;&lt;/ui-card&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Removes the shadow and displays a hairline outline instead</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the card child components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<p><strong>Card child components:</strong></p>\n<ul>\n<li><code>&lt;ui-card-content&gt;</code><ul>\n<li><code>&lt;ui-card-media&gt;</code><ul>\n<li><code>&lt;ui-card-media-content&gt;</code></li>\n</ul>\n</li>\n<li><code>&lt;ui-card-text&gt;</code></li>\n</ul>\n</li>\n<li><code>&lt;ui-card-actions&gt;</code><ul>\n<li><code>&lt;ui-card-buttons&gt;</code></li>\n<li><code>&lt;ui-card-icons&gt;</code></li>\n</ul>\n</li>\n</ul>\n'},ct3n:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-menu-anchor&gt;\n  &lt;ui-button raised @click=&quot;$balmUI.onOpen(&#39;open&#39;)&quot;&gt;Show Menu&lt;/ui-button&gt;\n\n  &lt;ui-menu v-model=&quot;open&quot; @selected=&quot;onSelected&quot; @cancel=&quot;onCancel&quot;&gt;\n    &lt;ui-menuitem nested&gt;\n      &lt;ui-menuitem&gt;\n        &lt;ui-menuitem-icon&gt;\n          &lt;svg-selected&gt;&lt;/svg-selected&gt;\n        &lt;/ui-menuitem-icon&gt;\n        &lt;ui-menuitem-text&gt;Single&lt;/ui-menuitem-text&gt;\n      &lt;/ui-menuitem&gt;\n      &lt;ui-menuitem disabled&gt;\n        &lt;ui-menuitem-icon&gt;\n          &lt;svg-selected&gt;&lt;/svg-selected&gt;\n        &lt;/ui-menuitem-icon&gt;\n        &lt;ui-menuitem-text&gt;1.15&lt;/ui-menuitem-text&gt;\n      &lt;/ui-menuitem&gt;\n      &lt;ui-menuitem&gt;\n        &lt;ui-menuitem-icon&gt;\n          &lt;svg-selected&gt;&lt;/svg-selected&gt;\n        &lt;/ui-menuitem-icon&gt;\n        &lt;ui-menuitem-text&gt;Double&lt;/ui-menuitem-text&gt;\n      &lt;/ui-menuitem&gt;\n      &lt;ui-menuitem selected&gt;\n        &lt;ui-menuitem-icon&gt;\n          &lt;svg-selected&gt;&lt;/svg-selected&gt;\n        &lt;/ui-menuitem-icon&gt;\n        &lt;ui-menuitem-text&gt;Custom: 1.2&lt;/ui-menuitem-text&gt;\n      &lt;/ui-menuitem&gt;\n    &lt;/ui-menuitem&gt;\n    &lt;ui-item-divider&gt;&lt;/ui-item-divider&gt;\n    &lt;ui-menuitem&gt;\n      &lt;ui-menuitem-text&gt;Add space before paragraph&lt;/ui-menuitem-text&gt;\n    &lt;/ui-menuitem&gt;\n    &lt;ui-menuitem&gt;\n      &lt;ui-menuitem-text&gt;Add space after paragraph&lt;/ui-menuitem-text&gt;\n    &lt;/ui-menuitem&gt;\n    &lt;ui-item-divider&gt;&lt;/ui-item-divider&gt;\n    &lt;ui-menuitem&gt;\n      &lt;ui-menuitem-text&gt;Custom spacing...&lt;/ui-menuitem-text&gt;\n    &lt;/ui-menuitem&gt;\n  &lt;/ui-menu&gt;\n&lt;/ui-menu-anchor&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      open: false\n    };\n  },\n  methods: {\n    onSelected(data) {\n      console.log(&#39;onSelected&#39;, data);\n    },\n    onCancel() {\n      console.log(&#39;onCancel&#39;);\n    }\n  }\n};</code></pre>\n'},cyuz:function(t,e){t.exports='<pre><code class="language-css">$mdc-menu-ink-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-text-emphasis(high)\n);\n\n$mdc-menu-width-base: 56px;\n$mdc-menu-min-width: 2 * $mdc-menu-width-base;\n\n$mdc-menu-surface-fade-in-duration: 0.03s;\n$mdc-menu-surface-fade-out-duration: 0.075s;\n$mdc-menu-surface-scale-duration: 0.12s;\n$mdc-menu-surface-min-distance-from-edge: 32px;\n$mdc-menu-surface-z-index: 8; /* One above &lt;ui-dialog&gt; */</code></pre>\n'},"d+Av":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-panels&gt;\n  &lt;!-- the panel components --&gt;\n  &lt;ui-panel&gt;&lt;!-- the panel content --&gt;&lt;/ui-panel&gt;\n&lt;/ui-panels&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>active</code> (<code>v-model</code>)</td>\n<td>number</td>\n<td><code>0</code></td>\n<td>Mandatory.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the panel components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;ui-tabs v-model=&quot;active&quot;&gt;\n  &lt;ui-tab&gt;Tab One&lt;/ui-tab&gt;\n  &lt;ui-tab&gt;Tab Two&lt;/ui-tab&gt;\n  &lt;ui-tab&gt;Tab Three&lt;/ui-tab&gt;\n&lt;/ui-tabs&gt;\n\n&lt;ui-panels v-model=&quot;active&quot;&gt;\n  &lt;ui-panel&gt;Panel One&lt;/ui-panel&gt;\n  &lt;ui-panel&gt;Panel Two&lt;/ui-panel&gt;\n  &lt;ui-panel&gt;Panel Three&lt;/ui-panel&gt;\n&lt;/ui-panels&gt;</code></pre>\n'},d5wo:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-file\n  accept=&quot;image/*&quot;\n  multiple\n  preview\n  @change=&quot;$balmUI.onChange(&#39;files&#39;, $event)&quot;&gt;&lt;/ui-file&gt;\n&lt;transition-group class=&quot;preview-list&quot; name=&quot;list&quot; tag=&quot;ul&quot;&gt;\n  &lt;li class=&quot;item&quot; v-for=&quot;(file, index) in files&quot; :key=&quot;file.uuid&quot;&gt;\n    &lt;div class=&quot;inner&quot;&gt;\n      &lt;span class=&quot;preview&quot; :style=&quot;setBg(file)&quot;&gt;&lt;/span&gt;\n      &lt;span class=&quot;name&quot;&gt;{{ file.name }}&lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/li&gt;\n&lt;/transition-group&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      files: []\n    };\n  },\n  methods: {\n    setBg({ previewSrc }) {\n      return previewSrc ? { backgroundImage: `url(${previewSrc})` } : {};\n    }\n  }\n};</code></pre>\n<pre><code class="language-css">/* Sass code */\n.list-enter,\n.list-leave-to {\n  opacity: 0;\n  transform: translateY(100%);\n}\n.list-leave-active {\n  position: absolute;\n}\n\n.preview-list {\n  display: flex;\n  flex-wrap: wrap;\n  padding: 1em 0 0 1em;\n  position: relative;\n  &amp; &gt; .item {\n    width: 12.5%;\n    padding-right: 1em;\n    margin-bottom: 1em;\n    list-style: none;\n    transition: all 1s;\n    .inner {\n      width: 100%;\n    }\n    .preview {\n      display: block;\n      width: 100%;\n      height: 0;\n      padding-bottom: 100%;\n      background-position: center;\n      background-repeat: no-repeat;\n      background-size: cover;\n      border: 1px solid #ddd;\n      border-radius: 3px;\n    }\n    .name {\n      display: block;\n      width: 100%;\n      line-height: 1.8em;\n      text-align: center;\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    }\n  }\n}</code></pre>\n'},dF2i:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tab-bar class=&quot;custom-demo-tab-bar&quot; v-model=&quot;active&quot;&gt;\n  &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot;\n    type=&quot;both&quot;\n    :icon=&quot;tab.icon&quot;\n    minWidth\n    contentIndicator&gt;\n    {{ tab.text }}\n  &lt;/ui-tab&gt;\n&lt;/ui-tab-bar&gt;</code></pre>\n<pre><code class="language-css">/* Sass code */\n.custom-demo-tab-bar {\n  .mdc-tab {\n    @include mdc-typography(subtitle1);\n    @include mdc-tab-fixed-width(120px);\n    @include mdc-tab-text-label-color($material-color-blue-600);\n    @include mdc-tab-icon-color($material-color-blue-600);\n  }\n  .mdc-tab__ripple {\n    @include mdc-states($material-color-yellow-700);\n  }\n  .mdc-tab--active {\n    @include mdc-tab-text-label-color($material-color-blue-900);\n    @include mdc-tab-icon-color($material-color-blue-900);\n  }\n  .mdc-tab-indicator {\n    @include mdc-tab-indicator-underline-height(5px);\n    @include mdc-tab-indicator-underline-color($material-color-yellow-700);\n  }\n}</code></pre>\n'},dStv:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-chip&gt;&lt;!-- the chip text --&gt;&lt;/ui-chip&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional. Indicates an leading icon element. See <a href="/#/icons">Material Icons</a> list.</td>\n</tr>\n<tr>\n<td><code>hidden</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Hides the leading icon in a filter chip when the chip is selected.</td>\n</tr>\n<tr>\n<td><code>removable</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Indicates a trailing icon which removes the chip from the DOM. Only use with input chips.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the chip child components.</td>\n</tr>\n<tr>\n<td><code>before</code></td>\n<td><code>iconClass</code></td>\n<td>Custom leading icon in the chip.</td>\n</tr>\n<tr>\n<td><code>after</code></td>\n<td><code>iconClass</code></td>\n<td>Custom trailing icon in the input chips.</td>\n</tr>\n</tbody></table>\n'},dZxO:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list :type=&quot;2&quot;&gt;\n  &lt;ui-item v-for=&quot;i in 3&quot; :key=&quot;i&quot;&gt;\n    &lt;ui-item-text-content&gt;\n      &lt;ui-item-text1&gt;Line item&lt;/ui-item-text1&gt;\n      &lt;ui-item-text2&gt;Secondary text&lt;/ui-item-text2&gt;\n    &lt;/ui-item-text-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;</code></pre>\n'},dbRp:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list&gt;\n  &lt;template v-for=&quot;(item, index) in items&quot;&gt;\n    &lt;ui-item-divider v-if=&quot;item === &#39;-&#39;&quot; :key=&quot;index&quot;&gt;&lt;/ui-item-divider&gt;\n    &lt;ui-item v-else :key=&quot;index&quot;&gt;\n      &lt;ui-item-text-content&gt;{{ item.text }}&lt;/ui-item-text-content&gt;\n      &lt;ui-item-last-content&gt;\n        &lt;ui-checkbox v-model=&quot;checkedValues&quot; :value=&quot;item.value&quot;&gt;&lt;/ui-checkbox&gt;\n      &lt;/ui-item-last-content&gt;\n    &lt;/ui-item&gt;\n  &lt;/template&gt;\n&lt;/ui-list&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      checkedValues: []\n    };\n  }\n};</code></pre>\n'},ddae:function(t,e,n){var o={"./alert/demo0.md":"NQQ6","./alert/demo1.md":"XXab","./anchor/demo0.md":"NlmE","./anchor/demo1.md":"DmyQ","./anchor/demo2.md":"pHdh","./autocomplete/demo0.md":"HJdF","./autocomplete/demo1.md":"Nu9s","./autocomplete/demo2.md":"Z/7x","./button/demo0.md":"LxQT","./button/demo1.md":"sK9k","./card/demo0.md":"wloq","./card/demo1.md":"XfPe","./card/demo2.md":"FUGW","./card/demo3.md":"aCmL","./checkbox/demo0.md":"ZKNm","./checkbox/demo1.md":"FKpq","./checkbox/demo2.md":"AcTu","./chips/demo0.md":"iwE+","./chips/demo1.md":"lSBW","./chips/demo2.md":"FlZy","./chips/demo3.md":"2qo9","./chips/demo4.md":"cc0D","./confirm/demo0.md":"H0rg","./confirm/demo1.md":"Gna0","./datepicker/demo0.md":"q9qa","./datepicker/demo1.md":"BnzD","./datepicker/demo2.md":"kvTy","./datepicker/demo3.md":"8bja","./datepicker/demo4.md":"EGEq","./dialog/demo0.md":"hiT1","./dialog/demo1.md":"poPe","./dialog/demo2.md":"z9gS","./drawer/demo0.md":"QOSS","./drawer/demo1.md":"4L9t","./drawer/demo2.md":"KMbe","./drawer/demo3.md":"llx4","./drawer/demo4.md":"mltC","./elevation/demo0.md":"9+tc","./elevation/demo1.md":"+Lqg","./elevation/demo2.md":"P8Fu","./event/demo0.md":"lge+","./event/demo1.md":"NEwY","./event/demo2.md":"LCqv","./event/demo3.md":"Ngmu","./event/demo4.md":"GuLE","./fab/demo0.md":"fvBB","./fab/demo1.md":"Js8M","./fab/demo2.md":"Hs+w","./fab/demo3.md":"V3IR","./fab/demo4.md":"0Uhr","./file/demo0.md":"S7/l","./file/demo1.md":"xNpe","./file/demo2.md":"d5wo","./file/demo3.md":"uaR4","./grid/demo0.md":"5qYn","./grid/demo1.md":"huQ7","./grid/demo2.md":"1Pfi","./grid/demo3.md":"Qm85","./grid/demo4.md":"g+3Q","./grid/demo5.md":"ynvr","./grid/demo6.md":"PvR7","./grid/demo7.md":"eLxf","./grid/demo8.md":"U9VE","./grid/demo9.md":"v/FX","./icon-button/demo0.md":"ORrX","./icon-button/demo1.md":"ejpW","./icon-button/demo2.md":"bg4W","./icon-button/demo3.md":"nbki","./icon/demo0.md":"YnQO","./icon/demo1.md":"+eER","./icon/demo2.md":"kmw8","./image-list/demo0.md":"NGw+","./image-list/demo1.md":"W0l+","./image-list/demo2.md":"tU+b","./linear-progress/demo0.md":"ePQI","./linear-progress/demo1.md":"ZHq+","./list/demo0.md":"MW7G","./list/demo1.md":"+LzF","./list/demo2.md":"dZxO","./list/demo3.md":"7/oN","./list/demo4.md":"mFG2","./list/demo5.md":"Q9WI","./list/demo6.md":"FArz","./list/demo7.md":"dbRp","./list/demo8.md":"keYf","./menu/demo0.md":"9pG4","./menu/demo1.md":"ct3n","./pagination/demo0.md":"fiWT","./pagination/demo1.md":"VrLe","./pagination/demo2.md":"SBcc","./pagination/demo3.md":"PktF","./radio/demo0.md":"x9bS","./radio/demo1.md":"+g3H","./rangepicker/demo0.md":"C3HK","./rangepicker/demo1.md":"QM0m","./ripple/demo0.md":"ihNF","./ripple/demo1.md":"kSIg","./ripple/demo2.md":"C+ac","./ripple/demo3.md":"o6KT","./select/demo0.md":"BV+e","./select/demo1.md":"/tRe","./select/demo2.md":"laUp","./select/demo3.md":"FME5","./select/demo4.md":"yAg/","./shape/demo0.md":"pCC8","./shape/demo1.md":"hmYx","./skeleton/demo0.md":"ORrO","./skeleton/demo1.md":"UJv8","./skeleton/demo2.md":"g643","./skeleton/demo3.md":"WynS","./slider/demo0.md":"+Hk6","./slider/demo1.md":"PGPd","./snackbar/demo0.md":"epip","./snackbar/demo1.md":"6iKR","./switch/demo0.md":"kWhw","./switch/demo1.md":"0HsE","./table/demo0.md":"NOV7","./table/demo1.md":"2Esg","./table/demo2.md":"OSKY","./tabs/demo0.md":"QLg9","./tabs/demo1.md":"jne1","./tabs/demo2.md":"cO62","./tabs/demo3.md":"I9yt","./tabs/demo4.md":"Hpe4","./tabs/demo5.md":"bDYD","./tabs/demo6.md":"EQdG","./tabs/demo7.md":"dF2i","./tabs/demo8.md":"5VFu","./tabs/demo9.md":"Romc","./text-divider/demo0.md":"Pb6R","./text-divider/demo1.md":"uV3v","./text-divider/demo2.md":"7c5P","./textfield/demo0.md":"oM9C","./textfield/demo1.md":"Po75","./textfield/demo2.md":"RXEe","./textfield/demo3.md":"tZAW","./textfield/demo4.md":"WIne","./textfield/demo5.md":"NDOf","./textfield/demo6.md":"yUax","./textfield/demo7.md":"Q1zD","./theme/demo0.md":"tDea","./theme/demo1.md":"1fpl","./theme/demo2.md":"Np/8","./theme/demo3.md":"fZSO","./theme/demo4.md":"p/y3","./toast/demo0.md":"lW8Q","./toast/demo1.md":"Fd0s","./top-app-bar/demo0.md":"RwWQ","./top-app-bar/demo1.md":"XoHX","./typography/demo0.md":"BapH","./typography/demo1.md":"/epX","./validator/demo0.md":"iDhh","./validator/demo1.md":"QwAn"};function d(t){var e=l(t);return n(e)}function l(t){if(!n.o(o,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return o[t]}d.keys=function(){return Object.keys(o)},d.resolve=l,t.exports=d,d.id="ddae"},e7eR:function(t,e){t.exports='<pre><code class="language-css">$mdc-chip-fill-color-default: mix(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-prop-value(surface),\n  12%\n);\n$mdc-chip-ink-color-default: rgba(mdc-theme-prop-value(on-surface), 0.87);\n$mdc-chip-horizontal-padding: 12px;\n$mdc-chip-height-default: 32px;\n\n$mdc-chip-minimum-height: 24px;\n$mdc-chip-maximum-height: $mdc-chip-height;\n$mdc-chip-density-scale: $mdc-density-default-scale;\n$mdc-chip-density-config: (\n  height: (\n    default: $mdc-chip-height,\n    maximum: $mdc-chip-maximum-height,\n    minimum: $mdc-chip-minimum-height\n  )\n);\n\n$mdc-chip-icon-color: mdc-theme-prop-value(on-surface);\n$mdc-chip-icon-opacity: 0.54;\n$mdc-chip-trailing-icon-hover-opacity: 0.62;\n$mdc-chip-trailing-icon-focus-opacity: 0.87;\n$mdc-chip-leading-icon-size: 20px;\n$mdc-chip-trailing-icon-size: 18px;\n$mdc-chip-leading-icon-delay: -50ms; /* Speed up delay to bridge gap between leading icon and checkmark transition.*/\n$mdc-chip-checkmark-with-leading-icon-delay: 80ms;\n\n$mdc-chip-checkmark-animation-delay: 50ms;\n$mdc-chip-checkmark-animation-duration: 150ms;\n$mdc-chip-width-animation-duration: 150ms;\n$mdc-chip-opacity-animation-duration: 75ms;\n\n$mdc-chip-leading-icon-margin-right: 4px;\n$mdc-chip-leading-icon-margin-left: -4px;\n\n$mdc-chip-trailing-icon-margin-right: -4px;\n$mdc-chip-trailing-icon-margin-left: 4px;\n\n$mdc-chip-exit-transition: opacity 75ms\n    $mdc-animation-standard-curve-timing-function, width 150ms\n    $mdc-animation-deceleration-curve-timing-function, padding 100ms linear, margin\n    100ms linear;</code></pre>\n'},eLxf:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid max-width&quot; position=&quot;left&quot;&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n<pre><code class="language-css">.demo-grid.max-width {\n  max-width: 1280px;\n}</code></pre>\n'},ePQI:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-linear-progress&gt;` props.\n  UiLinearProgress: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiLinearProgress from &#39;balm-ui/components/linear-progress&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/linear-progress.css&#39;;\n\n// Optional. Overwrite `&lt;ui-linear-progress&gt;` props.\nVue.use(UiLinearProgress, {\n  // some props\n});</code></pre>\n'},ejpW:function(t,e){t.exports='<pre><code class="language-html">&lt;!-- Material Icons --&gt;\n&lt;ui-icon-button icon=&quot;favorite&quot;&gt;&lt;/ui-icon-button&gt;\n&lt;ui-icon-button icon=&quot;airplanemode_active&quot;&gt;&lt;/ui-icon-button&gt;\n&lt;ui-icon-a icon=&quot;directions_transit&quot;&gt;&lt;/ui-icon-a&gt;\n\n&lt;!-- SVG Icon --&gt;\n&lt;ui-icon-button&gt;\n  &lt;svg-logo&gt;&lt;/svg-logo&gt;\n&lt;/ui-icon-button&gt;\n\n&lt;!-- Disabled Buttons --&gt;\n&lt;ui-icon-button disabled icon=&quot;airplanemode_active&quot;&gt;&lt;/ui-icon-button&gt;\n&lt;ui-icon-button disabled&gt;\n  &lt;svg-logo&gt;&lt;/svg-logo&gt;\n&lt;/ui-icon-button&gt;</code></pre>\n'},epip:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-snackbar&gt;` props.\n  UiSnackbar: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiSnackbar from &#39;balm-ui/components/snackbar&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/snackbar.css&#39;;\n\n// Optional. Overwrite `&lt;ui-snackbar&gt;` props.\nVue.use(UiSnackbar, {\n  // some props\n});</code></pre>\n'},f0bv:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-select&gt;&lt;!-- the label text --&gt;&lt;/ui-select&gt;</code></pre>\n<h3 id="ui-select-types"><code>&lt;ui-select&gt;</code> Types</h3>\n<ul>\n<li><code>0</code>: <code>&#39;filled&#39;</code></li>\n<li><code>1</code>: <code>&#39;outlined&#39;</code></li>\n</ul>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>type</code></td>\n<td>string, number</td>\n<td><code>0</code></td>\n<td>Mandatory. Enhanced select types.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the select as an outlined select. (Equivalent to <code>type=1</code>)</td>\n</tr>\n<tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>string, number</td>\n<td><code>null</code></td>\n<td>The <code>value</code> of the currently selected option.</td>\n</tr>\n<tr>\n<td><code>options</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>An array of options to show to the user.</td>\n</tr>\n<tr>\n<td><code>optionLabel</code></td>\n<td>string</td>\n<td><code>&#39;label&#39;</code></td>\n<td>Option item label&#39;s name of the <code>options</code>.</td>\n</tr>\n<tr>\n<td><code>optionValue</code></td>\n<td>string</td>\n<td><code>&#39;value&#39;</code></td>\n<td>Option item value&#39;s name of the <code>options</code>.</td>\n</tr>\n<tr>\n<td><code>defaultLabel</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Placeholder item label.</td>\n</tr>\n<tr>\n<td><code>defaultValue</code></td>\n<td>string, number</td>\n<td><code>&#39;&#39;</code></td>\n<td>Placeholder item value.</td>\n</tr>\n<tr>\n<td><code>required</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the select as required.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the select as disabled.</td>\n</tr>\n<tr>\n<td><code>label</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>A text caption or description for the select.</td>\n</tr>\n<tr>\n<td><code>noLabel</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the select as a select without a label.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional. Indicates an icon element with a leading icon. See <a href="/#/icons">Material Icons</a> list. (No need to configure <code>leadingIcon</code>)</td>\n</tr>\n<tr>\n<td><code>leadingIcon</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td>Styles the select as a select with a leading icon. (Use with <code>icon</code> slot)</td>\n</tr>\n<tr>\n<td><code>helperTextId</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Required for the <em>id</em> attribute of the <code>&lt;ui-select-helper&gt;</code>.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the label for the select.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(model: string|number)</code></td>\n<td>Emits when the select value is changed.</td>\n</tr>\n<tr>\n<td><code>selected</code></td>\n<td><code>function(option: object)</code></td>\n<td>Emits when an option item is selected.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the select using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-select v-model=&quot;value&quot;&gt;&lt;/ui-select&gt;\n\n// Manual\n&lt;ui-select\n  :model=&quot;value&quot;\n  @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-select&gt;</code></pre>\n'},f8WO:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-drawer-header&gt;&lt;!-- the drawer header child components --&gt;&lt;/ui-drawer-header&gt;</code></pre>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the drawer header child components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<p><strong>Drawer header child components:</strong></p>\n<ul>\n<li><code>&lt;ui-drawer-title&gt;</code></li>\n<li><code>&lt;ui-drawer-subtitle&gt;</code></li>\n</ul>\n'},fDax:function(t,e){t.exports='<pre><code class="language-js">// Usage 1\n$alert(message);\n\n// Usage 2\n$alert(options);</code></pre>\n<h4 id="options">Options</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>className</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The custom class name for the alert dialog.</td>\n</tr>\n<tr>\n<td><code>title</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The title of the alert dialog.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The content to be displayed in the alert dialog.</td>\n</tr>\n<tr>\n<td><code>buttonText</code></td>\n<td>string</td>\n<td><code>&#39;OK&#39;</code></td>\n<td>Alert button content.</td>\n</tr>\n<tr>\n<td><code>callback</code></td>\n<td>function</td>\n<td><code>false</code></td>\n<td>Handle some event when the alert button is clicked.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<pre><code class="language-js">// Usage 1\n$alert({\n  message,\n  callback() {\n    // ...\n  }\n});\n\n// Usage 2 (Recommended)\n$alert(message).then(() =&gt; {\n  // ...\n});</code></pre>\n'},fTug:function(t,e){t.exports='<pre><code class="language-css">$mdc-slider-baseline-rail-opacity: 0.26;</code></pre>\n'},fZSO:function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;demo-theme-color-section__row&quot;&gt;\n  &lt;fieldset class=&quot;demo-fieldset--color&quot;&gt;\n    &lt;legend :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Text on primary&lt;/legend&gt;\n\n    &lt;div class=&quot;demo-theme-color-group&quot;&gt;\n      &lt;div :class=&quot;[&#39;demo-theme-text-row&#39;, $themeColor(&#39;primary-bg&#39;)]&quot;&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $themeColor(&#39;on-primary&#39;)]&quot;&gt;Text&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $themeColor(&#39;on-primary&#39;), &#39;material-icons&#39;]&quot;&gt;favorite&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n\n  &lt;fieldset class=&quot;demo-fieldset--color&quot;&gt;\n    &lt;legend :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Text on secondary&lt;/legend&gt;\n\n    &lt;div class=&quot;demo-theme-color-group&quot;&gt;\n      &lt;div :class=&quot;[&#39;demo-theme-text-row&#39;, $themeColor(&#39;secondary-bg&#39;)]&quot;&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $themeColor(&#39;on-secondary&#39;)]&quot;&gt;Text&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $themeColor(&#39;on-secondary&#39;), &#39;material-icons&#39;]&quot;&gt;favorite&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/div&gt;</code></pre>\n'},fiWT:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `&lt;ui-pagination&gt;` props.\n  UiPagination: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiPagination from &#39;balm-ui/components/pagination&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/pagination.css&#39;;\n\n// Optional. Overwrite `&lt;ui-pagination&gt;` props.\nVue.use(UiPagination, {\n  // some props\n});</code></pre>\n'},fvBB:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-fab&gt;` props.\n  UiFab: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiFab from &#39;balm-ui/components/fab&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/fab.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;; // We recommend using Material Icons\n\n// Optional. Overwrite `&lt;ui-fab&gt;` props.\nVue.use(UiFab, {\n  // some props\n});</code></pre>\n'},"g+3Q":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid&quot;&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; :columns=&quot;{default:6, tablet:8}&quot;\n    &gt;6 (8 tablet)&lt;/ui-grid-cell\n  &gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; :columns=&quot;{default:4, tablet:6}&quot;\n    &gt;4 (6 tablet)&lt;/ui-grid-cell\n  &gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; :columns=&quot;{default:2, phone:4}&quot;\n    &gt;2 (4 phone)&lt;/ui-grid-cell\n  &gt;\n&lt;/ui-grid&gt;</code></pre>\n'},g643:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-skeleton avatar :paragraph=&quot;{ rows: 4 }&quot;&gt;&lt;/ui-skeleton&gt;</code></pre>\n'},hVjb:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-drawer-content&gt;&lt;!-- the list of items --&gt;&lt;/ui-drawer-content&gt;</code></pre>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the list of items (router link list) and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},hiT1:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-dialog&gt;` props.\n  UiDialog: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-dialog-actions&gt;` props.\n  UiDialogActions: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiDialogComponents from &#39;balm-ui/components/dialog&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/dialog.css&#39;;\n\nVue.use(UiDialogComponents, {\n  // Optional. Overwrite `&lt;ui-dialog&gt;` props.\n  UiDialog: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-dialog-actions&gt;` props.\n  UiDialogActions: {\n    // some props\n  }\n});</code></pre>\n'},hmYx:function(t,e){t.exports=""},hpkL:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-tabs&gt;&lt;/ui-tabs&gt;</code></pre>\n<h4 id="ui-tabs-props"><code>&lt;ui-tabs&gt;</code> Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>items</code></td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>Mandatory. Tab items.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>The keys of a tab item object:</li>\n</ul>\n<pre><code class="language-js">{\n  text: &#39;text&#39;, // label text\n  icon: &#39;icon&#39;, // label icon\n}</code></pre>\n<h4 id="ui-tabs-slots"><code>&lt;ui-tabs&gt;</code> Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the tab components and can contain HTML.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><code>&lt;ui-tabs&gt; is shorthand for &lt;ui-tab-bar&gt; + &lt;ui-tab&gt;</code></p>\n</blockquote>\n<pre><code class="language-html">&lt;!-- Full syntax --&gt;\n&lt;ui-tab-bar v-model=&quot;active&quot;&gt;\n  &lt;ui-tab\n    v-for=&quot;(tabItem, tabIndex) in items&quot;\n    :key=&quot;tabIndex&quot;\n    :icon=&quot;tabItem.icon&quot;\n  &gt;\n    {{ tabItem.text }}\n  &lt;/ui-tab&gt;\n&lt;/ui-tab-bar&gt;\n\n&lt;!-- Shorthand --&gt;\n&lt;ui-tabs v-model=&quot;active&quot; :items=&quot;items&quot;&gt;&lt;/ui-tabs&gt;</code></pre>\n'},huQ7:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid&quot;&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot;&gt;4&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot;&gt;4&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot;&gt;4&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n'},i12o:function(t,e){t.exports='<pre><code class="language-css">$mdc-snackbar-fill-color: mix(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-prop-value(surface),\n  80%\n);\n$mdc-snackbar-label-ink-color: rgba(\n  mdc-theme-prop-value(surface),\n  mdc-theme-text-emphasis(high)\n);\n$mdc-snackbar-action-ink-color: #bb86fc;\n$mdc-snackbar-dismiss-ink-color: rgba(\n  mdc-theme-prop-value(surface),\n  mdc-theme-text-emphasis(high)\n);\n\n$mdc-snackbar-label-type-scale: body2;\n$mdc-snackbar-dismiss-icon-size: 18px;\n$mdc-snackbar-min-width: 344px;\n$mdc-snackbar-max-width: 672px;\n$mdc-snackbar-mobile-breakpoint: 480px;\n$mdc-snackbar-viewport-margin-narrow: 8px;\n$mdc-snackbar-viewport-margin-wide: 24px;\n$mdc-snackbar-padding: 8px;\n\n$mdc-snackbar-elevation: 6;\n$mdc-snackbar-shape-radius: small; /* Key from $mdc-shape-category-values or CSS length value (e.g., 4px) */\n$mdc-snackbar-z-index: 8; /* One above &lt;ui-dialog&gt; */\n\n$mdc-snackbar-enter-duration: 150ms;\n$mdc-snackbar-exit-duration: 75ms;</code></pre>\n'},iDhh:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\nimport validatorRules from &#39;./config/validator-rules&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Set global validator rules.\n  validator: validatorRules\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport validator from &#39;balm-ui/plugins/validator&#39;;\nimport validatorRules from &#39;./config/validator-rules&#39;;\n\n// Optional. Set global validator rules.\nVue.use(validator, validatorRules);</code></pre>\n<p>Custom global validator rules</p>\n<pre><code class="language-js">import { types } from &#39;balm-ui/dist/balm-ui-plus&#39;; // Default Usage\n// OR\n// import types from &#39;balm-ui/utils/types&#39;; // Standalone Usage\n\nexport default {\n  required: {\n    validate(value) {\n      let result = false;\n      if (types.isString(value)) {\n        result = value.trim() !== &#39;&#39;;\n      } else if (types.isArray(value)) {\n        return value.length;\n      } else {\n        result = value;\n      }\n      return result;\n    },\n    message: &#39;%s is required&#39;\n  },\n  mobile: {\n    validate(value) {\n      return /^1[0-9]\\d{9}$/.test(value);\n    },\n    message: &#39;Invalid phone number&#39;\n  },\n  password: {\n    validate(value) {\n      return /^\\w+$/.test(value);\n    },\n    message: &#39;Invalid password: must be a letter, digit or underline&#39;\n  }\n};</code></pre>\n'},ihNF:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport ripple from &#39;balm-ui/directives/ripple&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;; // (Include &#39;directives/ripple.css&#39;)\n// OR\nimport &#39;balm-ui/directives/ripple.css&#39;;\n\nVue.directive(ripple.name, ripple);</code></pre>\n'},"iwE+":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-chips&gt;` props.\n  UiChips: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiChipsComponents from &#39;balm-ui/components/chips&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/chips.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;; // Optional.\n\nVue.use(UiChipsComponents, {\n  // Optional. Overwrite `&lt;ui-chips&gt;` props.\n  UiChips: {\n    // some props\n  }\n});</code></pre>\n'},j0Dw:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card-content&gt;&lt;!-- the card content --&gt;&lt;/ui-card-content&gt;</code></pre>\n<blockquote>\n<p>The main tappable area of the card. Typically contains most (or all) card content except <code>&lt;ui-card-actions&gt;</code>. Only applicable to cards that have a primary action that the main surface should trigger.</p>\n</blockquote>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the card content and can contain HTML.</td>\n</tr>\n</tbody></table>\n<p><strong>Card content child components:</strong></p>\n<ul>\n<li><code>&lt;ui-card-media&gt;</code><ul>\n<li><code>&lt;ui-card-media-content&gt;</code></li>\n</ul>\n</li>\n<li><code>&lt;ui-card-text&gt;</code></li>\n</ul>\n'},jAKz:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-menuitem&gt;&lt;!-- the menu item child components --&gt;&lt;/ui-menuitem&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>nested</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Used to wrap a group of <code>&lt;ui-menuitem&gt;</code> that will represent a selection group.</td>\n</tr>\n<tr>\n<td><code>item</code></td>\n<td>object</td>\n<td><code>{}</code></td>\n<td>A menu item.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>To disable an item.</td>\n</tr>\n<tr>\n<td><code>selected</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Used to indicate which element in an item group is selected.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>The keys of a menu item object:</li>\n</ul>\n<pre><code class="language-js">{\n  text: string,\n  icon: string,\n  disabled: boolean,\n  selected: boolean\n}</code></pre>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the menu item icon component or label text and can contain HTML.</td>\n</tr>\n</tbody></table>\n<p><strong>Menu item child components:</strong></p>\n<ul>\n<li><code>&lt;ui-menuitem-text&gt;</code></li>\n<li><code>&lt;ui-menuitem-icon&gt;</code></li>\n</ul>\n<pre><code class="language-html">&lt;!-- Usage 1 --&gt;\n&lt;ui-menuitem&gt;\n  &lt;ui-menuitem-text&gt;Label&lt;/ui-menuitem-text&gt;\n&lt;/ui-menuitem&gt;\n\n&lt;!-- Usage 2 --&gt;\n&lt;ui-menuitem nested&gt;\n  &lt;ui-menuitem&gt;\n    &lt;ui-menuitem-icon&gt;Icon1&lt;/ui-menuitem-icon&gt;\n    &lt;ui-menuitem-text&gt;Label1&lt;/ui-menuitem-text&gt;\n  &lt;/ui-menuitem&gt;\n  &lt;ui-menuitem&gt;\n    &lt;ui-menuitem-text&gt;Labe2&lt;/ui-menuitem-text&gt;\n  &lt;/ui-menuitem&gt;\n&lt;/ui-menuitem&gt;</code></pre>\n'},"jn/2":function(t,e){t.exports='<pre><code class="language-js">$setGrid(property, size, value);</code></pre>\n<table>\n<thead>\n<tr>\n<th>Param</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>property</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Grid custom property.</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The target platform: <code>desktop</code>, <code>tablet</code> or <code>phone</code>.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Grid custom value.</td>\n</tr>\n</tbody></table>\n<h4 id="grid-custom-properties">Grid custom properties</h4>\n<ul>\n<li><code>margin</code>: the size of the grid margin.</li>\n<li><code>gutter</code>: the size of the gutter between cells.</li>\n<li><code>column-width</code>: the width of the column within the grid.</li>\n</ul>\n<blockquote>\n<p>You can overwrite grid by <code>$setGrid</code> method.</p>\n</blockquote>\n'},jne1:function(t,e){t.exports='<pre><code class="language-html">&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Text Label&lt;/h6&gt;\n&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-bar v-model=&quot;active&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot;&gt;\n      {{ tab.text }}\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;\n\n&lt;h6 :class=&quot;$tt(&#39;headline6&#39;)&quot;&gt;Icon&lt;/h6&gt;\n&lt;div class=&quot;demo&quot;&gt;\n  &lt;ui-tab-bar v-model=&quot;active&quot;&gt;\n    &lt;ui-tab v-for=&quot;(tab, index) in tabs&quot; :key=&quot;index&quot;\n      type=&quot;icon&quot;\n      :icon=&quot;tab.icon&quot;&gt;\n    &lt;/ui-tab&gt;\n  &lt;/ui-tab-bar&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      active: 0,\n      tabs: [\n        {\n          text: &#39;Favorites&#39;,\n          icon: &#39;favorite&#39;\n        },\n        {\n          text: &#39;Recents&#39;,\n          icon: &#39;phone&#39;\n        },\n        {\n          text: &#39;Nearby&#39;,\n          icon: &#39;near_me&#39;\n        }\n      ]\n    };\n  }\n};</code></pre>\n'},jwpF:function(t,e){t.exports='<pre><code class="language-css">$mdc-card-action-icon-color: rgba(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-text-emphasis(medium)\n);\n$mdc-card-outline-color: mix(\n  mdc-theme-prop-value(on-surface),\n  mdc-theme-prop-value(surface),\n  12%\n);\n$mdc-card-outline-width: 1px;</code></pre>\n'},"k+fG":function(t,e){t.exports='<pre><code class="language-css">$mdc-text-divider-size: 1px;\n$mdc-text-divider-horizontal-text-padding: 0.5em 1em;\n$mdc-text-divider-vertical-text-padding: 1em 0.5em;</code></pre>\n'},k97a:function(t,e,n){var o={"./alert.md":"fDax","./anchor.md":"Ud+F","./autocomplete.md":"6DCT","./button.md":"b6bS","./card-actions.md":"cKXj","./card-buttons.md":"R4uJ","./card-content.md":"j0Dw","./card-icons.md":"NNyQ","./card-media-content.md":"cN+0","./card-media.md":"xDz5","./card.md":"ce2t","./checkbox.md":"n6Fw","./chip.md":"dStv","./chips.md":"UNqF","./confirm.md":"2nuX","./datepicker.md":"wyS6","./dialog-actions.md":"zenm","./dialog-content.md":"/Ew2","./dialog-title.md":"cYgC","./dialog.md":"TZLU","./drawer-app-content.md":"nw5c","./drawer-backdrop.md":"xBbm","./drawer-content.md":"hVjb","./drawer-header.md":"f8WO","./drawer.md":"J8fo","./dropdown.md":"/P1D","./elevation.md":"nBgf","./event.md":"l6lT","./fab.md":"3qKF","./file.md":"+Gmk","./grid-cell.md":"VeWP","./grid-custom.md":"jn/2","./grid.md":"zMId","./icon-button.md":"pFXc","./icon.md":"5rKl","./image-item.md":"XZO+","./image-list.md":"/78/","./image-text.md":"rusb","./linear-progress.md":"m5TN","./list-divider.md":"anq4","./list-group.md":"JOt9","./list-item.md":"98a3","./list.md":"RK7G","./menu-anchor.md":"zyvQ","./menu.md":"Dj3i","./menuitem.md":"jAKz","./pagination.md":"qB7q","./radio.md":"BZoW","./rangepicker.md":"Wf3a","./ripple.md":"bkdQ","./select-helper.md":"IfBE","./select-icon.md":"o4Sd","./select.md":"f0bv","./shape.md":"T73s","./skeleton.md":"Glxx","./slider.md":"Pkw1","./snackbar.md":"zHa3","./switch.md":"0W7t","./tab-bar.md":"CjlG","./tab-indicator.md":"5RkR","./tab-panel.md":"d+Av","./tab-scroller.md":"VC1f","./tab.md":"MhXu","./table.md":"Sbzz","./tabs.md":"hpkL","./text-divider.md":"M/Uc","./textfield-counter.md":"LMuM","./textfield-helper.md":"M+pS","./textfield-icon.md":"OR6h","./textfield.md":"Z94r","./theme.md":"YgA8","./toast.md":"stBE","./toolbar.md":"aqmO","./top-app-bar.md":"a9UM","./typography.md":"4TXR","./utils.md":"cVHu","./validator.md":"LhwM"};function d(t){var e=l(t);return n(e)}function l(t){if(!n.o(o,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return o[t]}d.keys=function(){return Object.keys(o)},d.resolve=l,t.exports=d,d.id="k97a"},kQAz:function(t,e,n){var o={"./autocomplete.md":"F72u","./button.md":"p2pw","./card.md":"jwpF","./checkbox.md":"GpIQ","./chips.md":"e7eR","./dialog.md":"/yRN","./drawer.md":"nM1S","./elevation.md":"+8jh","./fab.md":"ZUuK","./grid.md":"otEg","./icon-button.md":"6tOm","./icon.md":"up3+","./image-list.md":"Fto1","./linear-progress.md":"IXGA","./list.md":"mSbU","./menu.md":"cyuz","./pagination.md":"XFvP","./radio.md":"TeO7","./rangepicker.md":"FEV4","./select.md":"Jec5","./skeleton.md":"PMQE","./slider.md":"fTug","./snackbar.md":"i12o","./switch.md":"xXqP","./table.md":"/ZUr","./tabs.md":"rOZF","./text-divider.md":"k+fG","./textfield.md":"K6aE","./theme.md":"VpzA","./top-app-bar.md":"9zI1","./typography.md":"7cKi"};function d(t){var e=l(t);return n(e)}function l(t){if(!n.o(o,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return o[t]}d.keys=function(){return Object.keys(o)},d.resolve=l,t.exports=d,d.id="kQAz"},kSIg:function(t,e){t.exports='<pre><code class="language-html">&lt;section class=&quot;example&quot;&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Bounded&lt;/h2&gt;\n    &lt;div class=&quot;demo-surface&quot; v-ripple v-shadow=&quot;2&quot;&gt;\n      Interact with me!\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Bounded - CSS Only&lt;/h2&gt;\n    &lt;div class=&quot;demo-surface&quot; v-ripple:cssOnly v-shadow=&quot;2&quot;&gt;\n      Interact with me!\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/section&gt;</code></pre>\n'},kWhw:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-switch&gt;` props.\n  UiSwitch: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiSwitch from &#39;balm-ui/components/switch&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/switch.css&#39;;\n\n// Optional. Overwrite `&lt;ui-switch&gt;` props.\nVue.use(UiSwitch, {\n  // some props\n});</code></pre>\n'},keYf:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list&gt;\n  &lt;template v-for=&quot;(item, index) in items3&quot;&gt;\n    &lt;ui-item-divider v-if=&quot;item === &#39;-&#39;&quot; :key=&quot;index&quot;&gt;&lt;/ui-item-divider&gt;\n    &lt;ui-item v-else :key=&quot;index&quot;&gt;\n      &lt;ui-item-text-content&gt;{{ item.text }}&lt;/ui-item-text-content&gt;\n      &lt;ui-item-last-content&gt;\n        &lt;ui-radio v-model=&quot;checkedValue&quot; :value=&quot;item.value&quot;&gt;&lt;/ui-radio&gt;\n      &lt;/ui-item-last-content&gt;\n    &lt;/ui-item&gt;\n  &lt;/template&gt;\n&lt;/ui-list&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      checkedValue: &#39;dog&#39;\n    };\n  }\n};</code></pre>\n'},kmw8:function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;icons-preview-code&quot;&gt;\n  &lt;div class=&quot;icons-preview&quot;&gt;\n    &lt;ui-icon dark&gt;face&lt;/ui-icon&gt;\n    &lt;div class=&quot;icon-caption&quot;&gt;Normal&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;icons-preview&quot;&gt;\n    &lt;ui-icon dark inactive&gt;face&lt;/ui-icon&gt;\n    &lt;div class=&quot;icon-caption&quot;&gt;Disabled&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;icons-preview icons-dark-bg&quot;&gt;\n    &lt;ui-icon light&gt;face&lt;/ui-icon&gt;\n    &lt;div class=&quot;icon-caption&quot;&gt;Normal&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;icons-preview icons-dark-bg&quot;&gt;\n    &lt;ui-icon light inactive&gt;face&lt;/ui-icon&gt;\n    &lt;div class=&quot;icon-caption&quot;&gt;Disabled&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;icons-preview&quot;&gt;\n    &lt;ui-icon class=&quot;orange600&quot;&gt;face&lt;/ui-icon&gt;\n    &lt;div class=&quot;icon-caption&quot;&gt;orange600&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-css">.orange600 {\n  color: #fb8c00;\n}</code></pre>\n'},kvTy:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-datepicker\n  noLabel\n  placeholder=&quot;Select Datetime..&quot;\n  toggle\n  clear\n  :config=&quot;config&quot;\n  v-model=&quot;date&quot;\n&gt;\n  &lt;template #toggle&gt;\n    &lt;i class=&quot;fa fa-calendar&quot;&gt;&lt;/i&gt;\n  &lt;/template&gt;\n  &lt;template #clear&gt;\n    &lt;i class=&quot;fa fa-close&quot;&gt;&lt;/i&gt;\n  &lt;/template&gt;\n&lt;/ui-datepicker&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      config: {\n        enableTime: true,\n        dateFormat: &#39;Y-m-d H:i&#39;\n      },\n      date: &#39;&#39;\n    };\n  }\n};</code></pre>\n'},l6lT:function(t,e){t.exports='<pre><code class="language-js">$balmUI.onChange(property, value, fn); // update property to `new value`\n$balmUI.onOpen(property, fn); / $balmUI.onShow(property, fn); // update property to `true`\n$balmUI.onClose(property, fn); / $balmUI.onHide(property, fn); // update property to `false`</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>property</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Update a specified <code>vm.$data</code>.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>any</td>\n<td><code>null</code></td>\n<td>New value of a specified <code>vm.$data</code>. Applicable only for <code>$balmUI.onChange</code>.</td>\n</tr>\n<tr>\n<td><code>fn</code></td>\n<td>function</td>\n<td><code>noop</code></td>\n<td>After method to handle.</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id="optimized-custom-event">Optimized Custom Event</h4>\n<ul>\n<li><code>balmResize</code> (better than <code>resize</code>)</li>\n</ul>\n<pre><code class="language-js">window.addEventListener(&#39;balmResize&#39;, () =&gt; {\n  // ...\n});</code></pre>\n'},lSBW:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield\n  outlined\n  v-model=&quot;name&quot;\n  class=&quot;demo-tf-add-space&quot;\n  id=&quot;input-chip-set-input&quot;\n  placeholder=&quot;Chip text&quot;\n&gt;&lt;/ui-textfield&gt;\n&lt;br /&gt;\n&lt;ui-button raised dense id=&quot;input-chip-set-button&quot; @click=&quot;addOne&quot;&gt;\n  Add Input Chip\n&lt;/ui-button&gt;\n&lt;ui-button\n  outlined\n  dense\n  id=&quot;input-chip-set-delete-button&quot;\n  @click=&quot;removeLastOne&quot;\n&gt;\n  Delete Last Chip\n&lt;/ui-button&gt;\n\n&lt;ui-chips type=&quot;input&quot; id=&quot;input-chip-set&quot; :options=&quot;list&quot;&gt;\n  &lt;ui-chip\n    v-for=&quot;item in list&quot;\n    :key=&quot;item.id&quot;\n    icon=&quot;face&quot;\n    @remove=&quot;removeOneById(item.id)&quot;\n  &gt;\n    {{ item.name }}\n  &lt;/ui-chip&gt;\n&lt;/ui-chips&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      lastId: 2,\n      name: &#39;&#39;,\n      list: [\n        {\n          id: 1,\n          name: &#39;Jane Smith&#39;\n        },\n        {\n          id: 2,\n          name: &#39;John Doe&#39;\n        }\n      ]\n    };\n  },\n  methods: {\n    addOne() {\n      if (this.name.trim().length) {\n        this.lastId++;\n        this.list.push({\n          id: this.lastId,\n          name: this.name\n        });\n        this.name = &#39;&#39;;\n      }\n    },\n    removeLastOne() {\n      this.list.pop();\n    },\n    removeOneById(id) {\n      let index = this.list.findIndex(item =&gt; item.id === id);\n      this.list.splice(index, 1);\n    }\n  }\n};</code></pre>\n'},lW8Q:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `$toast` options.\n  toast: {\n    // some options\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport toast from &#39;balm-ui/plugins/toast&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/snackbar.css&#39;;\n\n// Optional. Overwrite `$toast` options.\nVue.use(toast, {\n  // some options\n});</code></pre>\n'},laUp:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-select outlined&gt;\n  Food Group\n&lt;/ui-select&gt;</code></pre>\n'},"lge+":function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport event from &#39;balm-ui/plugins/event&#39;;\n\nVue.use(event);</code></pre>\n'},llx4:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-drawer type=&quot;dismissible&quot; menuSelector=&quot;#demo-menu&quot;&gt;\n  &lt;ui-drawer-header&gt;\n    &lt;ui-drawer-title&gt;{{ title }}&lt;/ui-drawer-title&gt;\n    &lt;ui-drawer-subtitle&gt;{{ subtitle }}&lt;/ui-drawer-subtitle&gt;\n  &lt;/ui-drawer-header&gt;\n  &lt;ui-drawer-content&gt;\n    &lt;ui-list&gt;\n      &lt;ui-item activated @click=&quot;$router.back()&quot;&gt;\n        &lt;ui-item-first-content&gt;\n          &lt;ui-icon&gt;arrow_back&lt;/ui-icon&gt;\n        &lt;/ui-item-first-content&gt;\n        &lt;ui-item-text-content&gt;Back&lt;/ui-item-text-content&gt;\n      &lt;/ui-item&gt;\n      &lt;ui-list-divider&gt;&lt;/ui-list-divider&gt;\n      &lt;template v-for=&quot;(item, index) in menu&quot;&gt;\n        &lt;ui-list-divider\n          v-if=&quot;item === &#39;-&#39;&quot;\n          :key=&quot;`divider-${index}`&quot;\n        &gt;&lt;/ui-list-divider&gt;\n        &lt;template v-else&gt;\n          &lt;ui-list-group-subheader\n            v-if=&quot;item.subheader&quot;\n            :key=&quot;`subheader-${index}`&quot;\n          &gt;\n            {{ item.subheader }}\n          &lt;/ui-list-group-subheader&gt;\n          &lt;ui-item\n            v-for=&quot;(subItem, subIndex) in item.items&quot;\n            :key=&quot;`item-${index}-${subIndex}`&quot;\n          &gt;\n            &lt;ui-item-first-content&gt;\n              &lt;ui-icon&gt;{{ subItem.icon }}&lt;/ui-icon&gt;\n            &lt;/ui-item-first-content&gt;\n            &lt;ui-item-text-content&gt;{{ subItem.name }}&lt;/ui-item-text-content&gt;\n          &lt;/ui-item&gt;\n        &lt;/template&gt;\n      &lt;/template&gt;\n    &lt;/ui-list&gt;\n  &lt;/ui-drawer-content&gt;\n&lt;/ui-drawer&gt;\n\n&lt;ui-drawer-app-content class=&quot;demo-main&quot;&gt;\n  &lt;ui-top-app-bar\n    contentSelector=&quot;.demo-content&quot;\n    navId=&quot;demo-menu&quot;\n    class=&quot;demo-top-app-bar&quot;\n    v-shadow=&quot;4&quot;\n  &gt;\n    Dismissible Drawer\n  &lt;/ui-top-app-bar&gt;\n\n  &lt;div :class=&quot;[$tt(&#39;body1&#39;), &#39;demo-content&#39;]&quot;&gt;\n    &lt;div :class=&quot;$tt(&#39;body2&#39;)&quot;&gt;\n      &lt;h1 :class=&quot;$tt(&#39;headline4&#39;)&quot;&gt;Dismissible Drawer&lt;/h1&gt;\n      &lt;p&gt;Click the menu icon above to open and close the drawer.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/ui-drawer-app-content&gt;</code></pre>\n'},m5TN:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-linear-progress&gt;&lt;/ui-linear-progress&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>progress</code></td>\n<td>number, string</td>\n<td><code>0</code></td>\n<td>Sets the progress bar to this value. Value should be between <code>[0, 1]</code>.</td>\n</tr>\n<tr>\n<td><code>buffer</code></td>\n<td>number, string</td>\n<td><code>0</code></td>\n<td>Sets the buffer bar to this value. Value should be between <code>[0, 1]</code>.</td>\n</tr>\n<tr>\n<td><code>indeterminate</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Puts the linear progress indicator in an indeterminate state.</td>\n</tr>\n<tr>\n<td><code>reversed</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Reverses the direction of the linear progress indicator.</td>\n</tr>\n<tr>\n<td><code>closed</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Hides the linear progress indicator.</td>\n</tr>\n</tbody></table>\n'},mFG2:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-list singleSelection v-model=&quot;selectedIndex&quot;&gt;\n  &lt;ui-item v-for=&quot;(item, index) in items2&quot; :key=&quot;index&quot;&gt;\n    &lt;ui-item-first-content&gt;\n      &lt;ui-icon&gt;{{ item.icon }}&lt;/ui-icon&gt;\n    &lt;/ui-item-first-content&gt;\n    &lt;ui-item-text-content&gt;{{ item.text }}&lt;/ui-item-text-content&gt;\n  &lt;/ui-item&gt;\n&lt;/ui-list&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      selectedIndex: 1\n    };\n  }\n};</code></pre>\n'},mSbU:function(t,e){t.exports='<pre><code class="language-css">$mdc-list-divider-color-on-light-bg: rgba(0, 0, 0, 0.12);\n$mdc-list-divider-color-on-dark-bg: rgba(255, 255, 255, 0.2);\n$mdc-list-side-padding: 16px;\n$mdc-list-text-offset: 72px;\n$mdc-list-text-disabled-opacity: mdc-theme-text-emphasis(disabled);\n$mdc-list-text-disabled-color: on-surface;\n\n$mdc-list-single-line-height: 48px;\n$mdc-list-single-line-minimum-height: 24px;\n$mdc-list-single-line-maximum-height: $mdc-list-single-line-height;\n$mdc-list-single-line-density-scale: $mdc-density-default-scale;\n$mdc-list-single-line-density-config: (\n  height: (\n    default: $mdc-list-single-line-height,\n    maximum: $mdc-list-single-line-maximum-height,\n    minimum: $mdc-list-single-line-minimum-height\n  )\n);</code></pre>\n'},mltC:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-top-app-bar contentSelector=&quot;.demo-main&quot; navId=&quot;demo-menu&quot; fixed&gt;\n  Modal Drawer\n&lt;/ui-top-app-bar&gt;\n\n&lt;ui-drawer type=&quot;modal&quot; menuSelector=&quot;#demo-menu&quot;&gt;\n  &lt;ui-drawer-header&gt;\n    &lt;ui-drawer-title&gt;{{ title }}&lt;/ui-drawer-title&gt;\n    &lt;ui-drawer-subtitle&gt;{{ subtitle }}&lt;/ui-drawer-subtitle&gt;\n  &lt;/ui-drawer-header&gt;\n  &lt;ui-drawer-content&gt;\n    &lt;ui-list&gt;\n      &lt;ui-item activated @click=&quot;$router.back()&quot;&gt;\n        &lt;ui-item-first-content&gt;\n          &lt;ui-icon&gt;arrow_back&lt;/ui-icon&gt;\n        &lt;/ui-item-first-content&gt;\n        &lt;ui-item-text-content&gt;Back&lt;/ui-item-text-content&gt;\n      &lt;/ui-item&gt;\n      &lt;ui-list-divider&gt;&lt;/ui-list-divider&gt;\n      &lt;template v-for=&quot;(item, index) in menu&quot;&gt;\n        &lt;ui-list-divider\n          v-if=&quot;item === &#39;-&#39;&quot;\n          :key=&quot;`divider-${index}`&quot;\n        &gt;&lt;/ui-list-divider&gt;\n        &lt;template v-else&gt;\n          &lt;ui-list-group-subheader\n            v-if=&quot;item.subheader&quot;\n            :key=&quot;`subheader-${index}`&quot;\n          &gt;\n            {{ item.subheader }}\n          &lt;/ui-list-group-subheader&gt;\n          &lt;ui-item\n            v-for=&quot;(subItem, subIndex) in item.items&quot;\n            :key=&quot;`item-${index}-${subIndex}`&quot;\n          &gt;\n            &lt;ui-item-first-content&gt;\n              &lt;ui-icon&gt;{{ subItem.icon }}&lt;/ui-icon&gt;\n            &lt;/ui-item-first-content&gt;\n            &lt;ui-item-text-content&gt;{{ subItem.name }}&lt;/ui-item-text-content&gt;\n          &lt;/ui-item&gt;\n        &lt;/template&gt;\n      &lt;/template&gt;\n    &lt;/ui-list&gt;\n  &lt;/ui-drawer-content&gt;\n&lt;/ui-drawer&gt;\n\n&lt;ui-drawer-backdrop&gt;&lt;/ui-drawer-backdrop&gt;\n\n&lt;main :class=&quot;[$tt(&#39;body1&#39;), &#39;demo-main&#39;]&quot;&gt;\n  &lt;div :class=&quot;$tt(&#39;body2&#39;)&quot;&gt;\n    &lt;h1 :class=&quot;$tt(&#39;headline4&#39;)&quot;&gt;Modal Drawer&lt;/h1&gt;\n    &lt;p&gt;Click the menu icon above to open.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/main&gt;</code></pre>\n'},n6Fw:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-form-field&gt;\n  &lt;ui-checkbox&gt;&lt;/ui-checkbox&gt;\n  &lt;label&gt;Checkbox&lt;/label&gt;\n&lt;/ui-form-field&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>boolean, array</td>\n<td><code>false</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>indeterminate</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the checkbox as an indeterminate checkbox.</td>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>name</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>name</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>string, number</td>\n<td><code>null</code></td>\n<td>The <em>value</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the checkbox as a disabled checkbox.</td>\n</tr>\n<tr>\n<td><code>attrs</code></td>\n<td>object</td>\n<td><code>null</code></td>\n<td>Other attributes for <code>&lt;input&gt;</code>.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(model: boolean|array)</code></td>\n<td>Emits when the checkbox is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the checkbox using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-checkbox v-model=&quot;value&quot;&gt;&lt;/ui-checkbox&gt;\n\n// Manual\n&lt;ui-checkbox\n  :model=&quot;value&quot;\n  @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-checkbox&gt;</code></pre>\n'},nBgf:function(t,e){t.exports='<pre><code class="language-html">&lt;div v-shadow=&quot;4&quot;&gt;&lt;/div&gt;</code></pre>\n<h4 id="default-elevation">Default elevation</h4>\n<ul>\n<li><code>v-shadow=&quot;z&quot;</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>z</code></td>\n<td>number</td>\n<td><code>0</code></td>\n<td>Sets the elevation to the (N)dp, where 1 &lt;= N &lt;= 24</td>\n</tr>\n</tbody></table>\n<h4 id="transition-elevation">Transition elevation</h4>\n<ul>\n<li><code>v-shadow.transition=&quot;[z1, z2]&quot;</code></li>\n</ul>\n<p>Applies the correct css rules to transition an element between elevations:</p>\n<pre><code>z1: default class\nz2: hover class</code></pre>'},nM1S:function(t,e){t.exports='<pre><code class="language-css">/* Colors */\n$mdc-drawer-title-ink-color: mdc-theme-prop-value(on-surface);\n$mdc-drawer-subtitle-ink-color: mdc-theme-prop-value(on-surface);\n$mdc-drawer-item-inactive-ink-color: mdc-theme-prop-value(on-surface);\n$mdc-drawer-item-activated-ink-color: mdc-theme-prop-value(primary);\n$mdc-drawer-divider-color: mdc-theme-prop-value(on-surface);\n$mdc-drawer-surface-fill-color: mdc-theme-prop-value(surface);\n\n/* Opacity */\n$mdc-drawer-title-ink-opacity: mdc-theme-text-emphasis(high);\n$mdc-drawer-subtitle-ink-opacity: mdc-theme-text-emphasis(medium);\n$mdc-drawer-item-inactive-icon-ink-opacity: mdc-theme-text-emphasis(medium);\n$mdc-drawer-item-inactive-text-ink-opacity: mdc-theme-text-emphasis(high);\n$mdc-drawer-item-active-icon-ink-opacity: 1;\n$mdc-drawer-item-active-text-ink-opacity: mdc-theme-text-emphasis(high);\n$mdc-drawer-divider-opacity: 0.12;\n\n/* Widths */\n$mdc-drawer-width: 256px;\n$mdc-drawer-list-item-spacing: 4px;\n$mdc-drawer-surface-padding: 16px;\n\n/* Animations */\n$mdc-drawer-animation-enter: 250ms;\n$mdc-drawer-animation-exit: 200ms;\n\n/* Scrim */\n$mdc-drawer-modal-scrim-color: mdc-theme-prop-value(on-surface);\n$mdc-drawer-modal-scrim-opacity: 0.32;\n\n$mdc-drawer-z-index: 6;\n$mdc-drawer-modal-elevation: 16;</code></pre>\n'},nbki:function(t,e){t.exports='<pre><code class="language-html">&lt;div id=&quot;light-on-bg&quot; class=&quot;demo-color-combo&quot;&gt;\n  &lt;div&gt;\n    &lt;ui-icon-button :class=&quot;$themeColor(&#39;on-primary&#39;)&quot; :toggle=&quot;icon1&quot;&gt;\n    &lt;/ui-icon-button&gt;\n  &lt;/div&gt;\n  &lt;div :class=&quot;$themeColor(&#39;on-primary&#39;)&quot;&gt;Light icon on background&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div id=&quot;dark-on-bg&quot; class=&quot;demo-color-combo&quot;&gt;\n  &lt;div :class=&quot;$themeColor(&#39;primary&#39;)&quot;&gt;\n    &lt;ui-icon-button :toggle=&quot;icon1&quot;&gt; &lt;/ui-icon-button&gt;\n  &lt;/div&gt;\n  &lt;div&gt;Dark icon on background&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div id=&quot;custom-color-combo&quot; class=&quot;demo-color-combo&quot;&gt;\n  &lt;div&gt;\n    &lt;ui-icon-button :toggle=&quot;icon1&quot;&gt; &lt;/ui-icon-button&gt;\n  &lt;/div&gt;\n  &lt;div&gt;Custom color&lt;/div&gt;\n&lt;/div&gt;</code></pre>\n<pre><code class="language-css">/* SASS code */\n.demo-color-combo {\n  width: 250px;\n  padding: 1rem;\n  border-radius: 4px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-right: 8px;\n}\n\n#light-on-bg {\n  background-color: #3e82f7;\n}\n#light-on-bg .mdc-icon-button {\n  @include mdc-icon-toggle-ink-color(white);\n  @include mdc-states-base-color(white);\n  @include mdc-states-hover-opacity(0.1);\n  @include mdc-states-focus-opacity(0.3);\n  @include mdc-states-press-opacity(0.4);\n}\n\n#dark-on-bg {\n  background-color: #00bcd6;\n}\n#dark-on-bg .mdc-icon-button {\n  @include mdc-icon-toggle-ink-color(black);\n  @include mdc-states(black);\n}\n\n#custom-color-combo .mdc-icon-button {\n  @include mdc-icon-toggle-ink-color(#de442c);\n  @include mdc-states-base-color(#de442c);\n  @include mdc-states-hover-opacity(0.09);\n  @include mdc-states-focus-opacity(0.26);\n  @include mdc-states-press-opacity(0.35);\n}</code></pre>\n'},nw5c:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-drawer-app-content&gt;&lt;!-- Content --&gt;&lt;/ui-drawer-app-content&gt;</code></pre>\n<blockquote>\n<p><code>&lt;ui-drawer type=&quot;dismissible&quot;&gt;</code> only</p>\n</blockquote>\n'},o4Sd:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-select-icon&gt;&lt;!-- the material design icon name --&gt;&lt;/ui-select-icon&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>unclickable</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Display un-clickable icons.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the select icon and can contain HTML. See <a href="/#/icons">Material Icons</a> list.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the select icon is clicked.</td>\n</tr>\n</tbody></table>\n'},o6KT:function(t,e){t.exports='<pre><code class="language-html">&lt;section class=&quot;example&quot;&gt;\n  &lt;div&gt;\n    &lt;h2&gt;Theme Styles&lt;/h2&gt;\n    &lt;div :class=&quot;[&#39;demo-surface&#39;, $themeColor(&#39;primary&#39;)]&quot;\n      v-ripple=&quot;1&quot;\n      v-shadow=&quot;1&quot;&gt;\n      Primary\n    &lt;/div&gt;\n    &lt;div :class=&quot;[&#39;demo-surface&#39;, $themeColor(&#39;secondary&#39;)]&quot;\n      v-ripple=&quot;2&quot;\n      v-shadow=&quot;2&quot;&gt;\n      Secondary\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div&gt;\n    &lt;h2&gt;Theme Styles - CSS Only&lt;/h2&gt;\n    &lt;div :class=&quot;[&#39;demo-surface&#39;, $themeColor(&#39;primary&#39;)]&quot;\n      v-ripple:cssOnly=&quot;1&quot;\n      v-shadow=&quot;2&quot;&gt;\n      Primary\n    &lt;/div&gt;\n    &lt;div :class=&quot;[&#39;demo-surface&#39;, $themeColor(&#39;secondary&#39;)]&quot;\n      v-ripple:cssOnly=&quot;2&quot;\n      v-shadow=&quot;2&quot;&gt;\n      Secondary\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/section&gt;</code></pre>\n'},oM9C:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-textfield&gt;` props.\n  UiTextfield: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiTextfieldComponents from &#39;balm-ui/components/textfield&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/textfield.css&#39;;\nimport &#39;balm-ui/components/icon.css&#39;; // Optional\n\nVue.use(UiTextfieldComponents, {\n  // Optional. Overwrite `&lt;ui-textfield&gt;` props.\n  UiTextfield: {\n    // some props\n  }\n});</code></pre>\n'},otEg:function(t,e){t.exports='<pre><code class="language-css">$mdc-layout-grid-breakpoints: (\n  desktop: 840px,\n  tablet: 480px,\n  phone: 0px\n);\n\n$mdc-layout-grid-columns: (\n  desktop: 12,\n  tablet: 8,\n  phone: 4\n);\n\n$mdc-layout-grid-default-margin: (\n  desktop: 24px,\n  tablet: 16px,\n  phone: 16px\n);\n\n$mdc-layout-grid-default-gutter: (\n  desktop: 24px,\n  tablet: 16px,\n  phone: 16px\n);\n\n$mdc-layout-grid-column-width: (\n  desktop: 72px,\n  tablet: 72px,\n  phone: 72px\n);\n\n$mdc-layout-grid-default-column-span: 4;\n\n$mdc-layout-grid-max-width: null;</code></pre>\n'},"p/y3":function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;demo-theme-color-section__row&quot;&gt;\n  &lt;fieldset class=&quot;demo-fieldset--color&quot;&gt;\n    &lt;legend :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Text on user-defined light background&lt;/legend&gt;\n\n    &lt;div class=&quot;demo-theme-color-group&quot;&gt;\n      &lt;div :class=&quot;[&#39;demo-theme-text-row demo-theme-bg--custom-light&#39;]&quot;&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;primary&#39;, &#39;light&#39;)]&quot;&gt;Primary&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;secondary&#39;, &#39;light&#39;)]&quot;&gt;Secondary&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;hint&#39;, &#39;light&#39;)]&quot;&gt;Hint&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;disabled&#39;, &#39;light&#39;)]&quot;&gt;Disabled&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;icon&#39;, &#39;light&#39;), &#39;material-icons&#39;]&quot;&gt;favorite&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n\n  &lt;fieldset class=&quot;demo-fieldset--color&quot;&gt;\n    &lt;legend :class=&quot;$tt(&#39;subtitle1&#39;)&quot;&gt;Text on user-defined dark background&lt;/legend&gt;\n\n    &lt;div class=&quot;demo-theme-color-group&quot;&gt;\n      &lt;div :class=&quot;[&#39;demo-theme-text-row demo-theme-bg--custom-dark&#39;]&quot;&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;primary&#39;, &#39;dark&#39;)]&quot;&gt;Primary&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;secondary&#39;, &#39;dark&#39;)]&quot;&gt;Secondary&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;hint&#39;, &#39;dark&#39;)]&quot;&gt;Hint&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;disabled&#39;, &#39;dark&#39;)]&quot;&gt;Disabled&lt;/span&gt;\n        &lt;span :class=&quot;[&#39;demo-theme-text-style&#39;, $textColor(&#39;icon&#39;, &#39;dark&#39;), &#39;material-icons&#39;]&quot;&gt;favorite&lt;/span&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/div&gt;</code></pre>\n'},p2pw:function(t,e){t.exports='<pre><code class="language-css">$mdc-button-height: 36px;\n$mdc-button-horizontal-padding: 8px;\n$mdc-button-contained-horizontal-padding: 16px;\n\n$mdc-button-minimum-height: 24px;\n$mdc-button-maximum-height: $mdc-button-height;\n$mdc-button-density-scale: $mdc-density-default-scale;\n$mdc-button-density-config: (\n  height: (\n    default: $mdc-button-height,\n    maximum: $mdc-button-maximum-height,\n    minimum: $mdc-button-minimum-height\n  )\n);\n\n$mdc-button-outlined-border-width: 1px;\n$mdc-button-shape-radius: small;\n\n$mdc-button-disabled-ink-color: rgba(mdc-theme-prop-value(on-surface), 0.37);</code></pre>\n'},pCC8:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport shape from &#39;balm-ui/directives/shape&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/directives/shape.css&#39;;\n\nVue.directive(shape.name, shape);</code></pre>\n'},pFXc:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-icon-button&gt;&lt;/ui-icon-button&gt;\n\n&lt;ui-icon-a&gt;&lt;/ui-icon-a&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Sets the toggle state.</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>A material icon of the icon button. See <a href="/#/icons">Material Icons</a> list.</td>\n</tr>\n<tr>\n<td><code>toggle</code></td>\n<td>object</td>\n<td><code>{}</code></td>\n<td>Two icons of the icon button toggle. (Format: <code>{on, off}</code>)</td>\n</tr>\n<tr>\n<td><code>url</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Applicable only for the <code>&lt;ui-icon-a&gt;</code>, add the <code>href</code> attribute directly to the <code>&lt;a&gt;</code>.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>Configuring the icon button toggle states by <code>toggle.on</code> and <code>toggle.off</code> props.</p>\n</blockquote>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td><code>onClass</code>, <code>offClass</code></td>\n<td>The default slot holds the toggle or link custom icons and can contain HTML.</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;template #default=&quot;{ onClass, offClass }&quot;&gt;\n  &lt;i :class=&quot;onClass&quot;&gt;ON&lt;/i&gt;\n  &lt;i :class=&quot;offClass&quot;&gt;OFF&lt;/i&gt;\n&lt;/template&gt;</code></pre>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>click</code></td>\n<td><code>function(event: object)</code></td>\n<td>Emits when the icon button is clicked.</td>\n</tr>\n<tr>\n<td><code>change</code></td>\n<td><code>function(model: boolean)</code></td>\n<td>Emits when the icon button is toggled.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the icon button using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-icon-button v-model=&quot;value&quot;&gt;&lt;/ui-icon-button&gt;\n\n// Manual\n&lt;ui-icon-button\n  :model=&quot;value&quot;\n  @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-icon-button&gt;</code></pre>\n'},pHdh:function(t,e){t.exports='<pre><code class="language-html">&lt;div class=&quot;container&quot; v-anchor&gt;\n  &lt;div v-anchor.html&gt;\n    &lt;a class=&quot;v-anchor&quot; data-href=&quot;#target3&quot; href=&quot;javascript:void(0)&quot;&gt;Anchor 3&lt;/a&gt;\n    &lt;a class=&quot;v-anchor&quot; data-href=&quot;#target4&quot; href=&quot;javascript:void(0)&quot;&gt;Anchor 4&lt;/a&gt;\n\n    &lt;div id=&quot;target3&quot;&gt;Target 3&lt;/div&gt;\n    &lt;div id=&quot;target4&quot;&gt;Target 4&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre>\n'},poPe:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button raised @click=&quot;$balmUI.onOpen(&#39;open&#39;)&quot;&gt;Show Dialog&lt;/ui-button&gt;\n\n&lt;ui-dialog\n  v-model=&quot;open&quot;\n  @confirm=&quot;onConfirm&quot;&gt;\n  &lt;ui-dialog-title&gt;Use Google&#39;s location service?&lt;/ui-dialog-title&gt;\n  &lt;ui-dialog-content&gt;\n    &lt;p&gt;Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running.&lt;/p&gt;\n  &lt;/ui-dialog-content&gt;\n  &lt;ui-dialog-actions&gt;&lt;/ui-dialog-actions&gt;\n&lt;/ui-dialog&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      open: false\n    };\n  },\n  methods: {\n    onConfirm(result) {\n      if (result) {\n        console.log(&#39;ok&#39;);\n      } else {\n        console.log(&#39;cancel&#39;);\n      }\n    }\n  }\n};</code></pre>\n'},q9qa:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-html">&lt;!-- build:css css/plugins.css --&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/node_modules/flatpickr/dist/flatpickr.min.css&quot; /&gt;\n&lt;!-- endbuild --&gt;</code></pre>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\n\nVue.use(BalmUIPlus, {\n  // Optional. Overwrite `&lt;ui-datepicker&gt;` props.\n  UiDatepicker: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiDatepicker from &#39;balm-ui/components/datepicker&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/textfield.css&#39;;\nimport &#39;balm-ui/components/datepicker.css&#39;;\nimport &#39;flatpickr/dist/flatpickr.min.css&#39;;\n\n// Optional. Overwrite `&lt;ui-datepicker&gt;` props.\nVue.use(UiDatepicker, {\n  // some props\n});</code></pre>\n'},qB7q:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-pagination&gt;&lt;/ui-pagination&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>page</code></td>\n<td>number</td>\n<td><code>1</code></td>\n<td>Current page number.</td>\n</tr>\n<tr>\n<td><code>pageSize</code></td>\n<td>number</td>\n<td><code>10</code></td>\n<td>The number of data items per page.</td>\n</tr>\n<tr>\n<td><code>total</code></td>\n<td>number</td>\n<td><code>0</code></td>\n<td>The total number of data items.</td>\n</tr>\n<tr>\n<td><code>pageSpan</code></td>\n<td>number</td>\n<td><code>3</code></td>\n<td>Display the first N pages of the current page.</td>\n</tr>\n<tr>\n<td><code>prev</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The previous button text.</td>\n</tr>\n<tr>\n<td><code>next</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The next button text.</td>\n</tr>\n<tr>\n<td><code>showJumper</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Determine whether you can jump to pages directly.</td>\n</tr>\n<tr>\n<td><code>jumperBeforeText</code></td>\n<td>string</td>\n<td><code>&#39;Goto&#39;</code></td>\n<td>Add text before jumper.</td>\n</tr>\n<tr>\n<td><code>jumperAfterText</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Add text after jumper.</td>\n</tr>\n<tr>\n<td><code>jumperButtonText</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The jumper button text.</td>\n</tr>\n<tr>\n<td><code>position</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The pagination postion. [<code>left</code>, <code>right</code>]</td>\n</tr>\n<tr>\n<td><code>mini</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Whether to use simple mode.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>prev</code></td>\n<td></td>\n<td>The custom previous button.</td>\n</tr>\n<tr>\n<td><code>next</code></td>\n<td></td>\n<td>The custom next button.</td>\n</tr>\n<tr>\n<td><code>before</code></td>\n<td><code>recordClass</code>, <code>pageCount</code>, <code>currentMinRow</code>, <code>currentMaxRow</code></td>\n<td>The custom record info and can contain HTML.</td>\n</tr>\n<tr>\n<td><code>before-jumper</code></td>\n<td><code>recordClass</code>, <code>pageCount</code>, <code>currentMinRow</code>, <code>currentMaxRow</code></td>\n<td>The custom before jumper area content.</td>\n</tr>\n<tr>\n<td><code>after-jumper</code></td>\n<td><code>recordClass</code>, <code>pageCount</code>, <code>currentMinRow</code>, <code>currentMaxRow</code></td>\n<td>The custom after jumper area content.</td>\n</tr>\n</tbody></table>\n<ul>\n<li><code>pageCount</code>: Total number of rows.</li>\n<li><code>currentMinRow</code> &amp; <code>currentMaxRow</code>: The range currently in view.</li>\n</ul>\n<pre><code class="language-html">&lt;template #before=&quot;{ recordClass, pageCount, currentMinRow, currentMaxRow }&quot;&gt;\n  &lt;ui-form-field :class=&quot;recordClass&quot;&gt;\n    &lt;label&gt;Rows per page:&lt;/label&gt;\n    &lt;ui-select\n      outlined\n      noLabel\n      v-model=&quot;pageSize&quot;\n      :options=&quot;pageSizeOptions&quot;\n    &gt;&lt;/ui-select&gt;\n    &lt;span&gt;\n      {{ currentMinRow }}-{{ currentMaxRow }} of {{ total }}\n    &lt;/span&gt;\n  &lt;/ui-form-field&gt;\n&lt;/template&gt;</code></pre>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(page: number)</code></td>\n<td>Emits when the pagination page is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the select using <code>@change</code> and update the <code>page</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-pagination v-model=&quot;page&quot;&gt;&lt;/ui-pagination&gt;\n\n// Manual\n&lt;ui-pagination\n  :page=&quot;page&quot;\n  @change=&quot;$balmUI.onChange(&#39;page&#39;, $event)&quot;\n&gt;&lt;/ui-pagination&gt;</code></pre>\n'},rOZF:function(t,e){t.exports='<ul>\n<li><code>&lt;ui-tab&gt;</code></li>\n</ul>\n<pre><code class="language-css">$mdc-tab-icon-size: 24px;\n$mdc-tab-height: 48px;\n$mdc-tab-stacked-height: 72px;\n$mdc-tab-horizontal-padding: 24px;\n$mdc-tab-text-label-opacity: 0.6;\n$mdc-tab-icon-opacity: 0.54;\n$mdc-tab-text-label-color-default: rgba(\n  mdc-theme-prop-value(on-surface),\n  $mdc-tab-text-label-opacity\n);\n$mdc-tab-icon-color-default: rgba(\n  mdc-theme-prop-value(on-surface),\n  $mdc-tab-icon-opacity\n);\n$mdc-tab-text-label-color-active: primary;\n$mdc-tab-icon-color-active: primary;</code></pre>\n<ul>\n<li><code>&lt;ui-tab-bar&gt;</code></li>\n</ul>\n<pre><code class="language-css">$mdc-tab-bar-height: $mdc-tab-height;\n$mdc-tab-bar-minimum-height: 30px;\n$mdc-tab-bar-maximum-height: $mdc-tab-bar-height;\n$mdc-tab-bar-density-scale: $mdc-density-default-scale;\n$mdc-tab-bar-density-config: (\n  height: (\n    default: $mdc-tab-bar-height,\n    maximum: $mdc-tab-bar-maximum-height,\n    minimum: $mdc-tab-bar-minimum-height\n  )\n);\n$mdc-tab-bar-stacked-height: $mdc-tab-stacked-height;\n$mdc-tab-bar-stacked-minimum-height: 56px;\n$mdc-tab-bar-stacked-maximum-height: $mdc-tab-bar-stacked-height;\n$mdc-tab-bar-stacked-density-scale: $mdc-density-default-scale;\n$mdc-tab-bar-stacked-density-config: (\n  height: (\n    default: $mdc-tab-bar-stacked-height,\n    maximum: $mdc-tab-bar-stacked-maximum-height,\n    minimum: $mdc-tab-bar-stacked-minimum-height\n  )\n);</code></pre>\n<ul>\n<li><code>&lt;ui-tab-scroller&gt;</code></li>\n</ul>\n<pre><code class="language-css">$mdc-tab-scroller-transition-duration: 250ms;</code></pre>\n'},rusb:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-image-text&gt;&lt;!-- Text labels --&gt;&lt;/ui-image-text&gt;</code></pre>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>Text labels display one line of text related to an image list item.</td>\n</tr>\n<tr>\n<td><code>action</code></td>\n<td></td>\n<td>Optional. Actionable iconography can represent related actions.</td>\n</tr>\n</tbody></table>\n'},sK9k:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button&gt;Text&lt;/ui-button&gt;\n&lt;ui-button outlined&gt;Outlined&lt;/ui-button&gt;\n&lt;ui-button raised&gt;Raised&lt;/ui-button&gt;\n\n&lt;ui-button icon=&quot;favorite&quot;&gt;Icon&lt;/ui-button&gt;\n&lt;ui-button&gt;\n  Trailing Icon\n  &lt;template #after=&quot;{ iconClass }&quot;&gt;\n    &lt;!-- Custom SVG --&gt;\n    &lt;svg-logo :class=&quot;iconClass&quot;&gt;&lt;/svg-logo&gt;\n  &lt;/template&gt;\n&lt;/ui-button&gt;\n\n&lt;ui-a&gt;Link&lt;/ui-a&gt;</code></pre>\n'},stBE:function(t,e){t.exports='<pre><code class="language-js">// Usage 1\n$toast(message);\n\n// Usage 2\n$toast(options);</code></pre>\n<h4 id="options">Options</h4>\n<table>\n<thead>\n<tr>\n<th>Option</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>className</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The custom class name for the toast.</td>\n</tr>\n<tr>\n<td><code>timeoutMs</code></td>\n<td>number</td>\n<td><code>4000</code></td>\n<td>The amount of time in milliseconds to show the toast.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>The text message to display.</td>\n</tr>\n</tbody></table>\n'},tDea:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI);</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport theme from &#39;balm-ui/plugins/theme&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;; // (Include &#39;plugins/theme.css&#39;)\n// OR\nimport &#39;balm-ui/plugins/theme.css&#39;;\n\nVue.use(theme);</code></pre>\n'},"tU+b":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-image-list type=&quot;masonry&quot; :textProtection=&quot;labelsType === 2&quot;&gt;\n  &lt;ui-image-item\n    v-for=&quot;(item, index) in list&quot;\n    :key=&quot;index&quot;\n    :image=&quot;require(`@/assets/photos/${item}.jpg`)&quot;\n  &gt;\n    &lt;ui-image-text v-if=&quot;labelsType&quot;&gt;\n      Text label\n      &lt;template #action&gt;\n        &lt;ui-icon-button icon=&quot;favorite_border&quot;&gt;&lt;/ui-icon-button&gt;\n      &lt;/template&gt;\n    &lt;/ui-image-text&gt;\n  &lt;/ui-image-item&gt;\n&lt;/ui-image-list&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      labelsType: 1\n    };\n  }\n};</code></pre>\n'},tZAW:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield outlined&gt;\n  Your Name\n&lt;/ui-textfield&gt;</code></pre>\n'},uV3v:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-text-divider&gt;Text&lt;/ui-text-divider&gt;</code></pre>\n'},uaR4:function(t,e){t.exports='<pre><code class="language-html">&lt;transition-group class=&quot;preview-list&quot; name=&quot;list&quot; tag=&quot;ul&quot;&gt;\n  &lt;li v-for=&quot;(file, index) in files&quot; :key=&quot;file.uuid&quot; class=&quot;item&quot;&gt;\n    &lt;div class=&quot;inner&quot;&gt;\n      &lt;span class=&quot;preview&quot; :style=&quot;setBg(file)&quot;&gt;&lt;/span&gt;\n      &lt;span class=&quot;actions&quot;&gt;\n        &lt;ui-fab\n          v-if=&quot;!file.uploaded&quot;\n          icon=&quot;file_upload&quot;\n          mini\n          @click=&quot;upload(file)&quot;&gt;&lt;/ui-fab&gt;\n        &lt;ui-fab\n          icon=&quot;delete&quot;\n          mini\n          @click=&quot;remove(index)&quot;&gt;&lt;/ui-fab&gt;\n      &lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/li&gt;\n  &lt;li v-if=&quot;files.length &lt; limit&quot; key=&quot;add&quot; class=&quot;item add-btn&quot;&gt;\n    &lt;div class=&quot;inner&quot;&gt;\n      &lt;ui-file\n        accept=&quot;image/*&quot;\n        multiple\n        preview\n        @change=&quot;onChange&quot;&gt;\n        &lt;ui-icon class=&quot;add-icon&quot;&gt;add&lt;/ui-icon&gt;\n      &lt;/ui-file&gt;\n    &lt;/div&gt;\n  &lt;/li&gt;\n&lt;/transition-group&gt;\n&lt;p&gt;\n  &lt;ui-button raised @click=&quot;uploadAllFiles&quot;&gt;\n    &lt;ui-icon&gt;file_upload&lt;/ui-icon&gt;\n    Upload All\n  &lt;/ui-button&gt;\n&lt;/p&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      files: [],\n      limit: 5,\n      postUrl: &#39;/api/upload&#39;\n    };\n  },\n  methods: {\n    setBg({ previewSrc }) {\n      return previewSrc ? { backgroundImage: `url(${previewSrc})` } : {};\n    },\n    onChange(files) {\n      if (files.length &gt; this.limit - this.files3.length) {\n        this.$toast(`Image Limit: ${this.limit}`);\n      } else {\n        files.forEach(file =&gt; {\n          file.uploaded = false;\n          this.files3.push(file);\n        });\n      }\n    },\n    async upload(file) {\n      try {\n        let response = await this.$http.post(this.postUrl, {\n          file: file.sourceFile\n        });\n        file.uploaded = true;\n        console.log(`${file.name} is uploaded`);\n      } catch (e) {\n        // your code\n      }\n    },\n    uploadAllFiles() {\n      if (this.files3.length) {\n        this.files3.forEach(file =&gt; {\n          this.upload(file);\n        });\n      } else {\n        this.$toast(&#39;No files&#39;);\n      }\n    },\n    remove(index) {\n      this.files3.splice(index, 1);\n    }\n  }\n};</code></pre>\n<pre><code class="language-css">/* extends demo2 */\n.preview-list {\n  &amp; &gt; .item {\n    .actions {\n      display: flex;\n      align-items: center;\n      justify-content: space-around;\n      height: 48px;\n    }\n    &amp;.add-btn {\n      .mdc-file {\n        position: relative;\n        width: 100%;\n        height: 0;\n        padding-bottom: 100%;\n        border: 1px solid #ddd;\n        border-radius: 3px;\n        cursor: pointer;\n        background-color: #fff;\n      }\n      .add-icon {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 48px;\n      }\n    }\n  }\n}</code></pre>\n'},"up3+":function(t,e){t.exports='<pre><code class="language-css">$mdi-font-path: &#39;../fonts&#39;;\n\n$mdc-icon-sizes: 18 24 36 48;\n$mdc-icon-color-dark: rgba(0, 0, 0, 0.54);\n$mdc-icon-color-dark-inactive: rgba(0, 0, 0, 0.26);\n$mdc-icon-color-light: rgba(255, 255, 255, 1);\n$mdc-icon-color-light-inactive: rgba(255, 255, 255, 0.3);</code></pre>\n'},"v/FX":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid&quot; fixedColumnWidth position=&quot;right&quot;&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;1&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;1&quot;&gt;&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;1&quot;&gt;&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n'},wloq:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-card&gt;` props.\n  UiCard: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-card-media&gt;` props.\n  UiCardMedia: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-card-actions&gt;` props.\n  UiCardActions: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiCardComponents from &#39;balm-ui/components/card&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/card.css&#39;;\n\nVue.use(UiCardComponents, {\n  // Optional. Overwrite `&lt;ui-card&gt;` props.\n  UiCard: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-card-media&gt;` props.\n  UiCardMedia: {\n    // some props\n  },\n  // Optional. Overwrite `&lt;ui-card-actions&gt;` props.\n  UiCardActions: {\n    // some props\n  }\n});</code></pre>\n'},wyS6:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-datepicker&gt;&lt;/ui-datepicker&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>model</code> (<code>v-model</code>)</td>\n<td>string, number, array</td>\n<td><code>&#39;&#39;</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>outlined</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the datepicker as an outlined text field.</td>\n</tr>\n<tr>\n<td><code>id</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>id</em> attribute of the <code>&lt;input&gt;</code> and the <em>for</em> attribute of the <code>&lt;label&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>label</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>A text caption or description for the datepicker, which use the input&#39;s <code>placeholder</code> attribute instead.</td>\n</tr>\n<tr>\n<td><code>noLabel</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the datepicker that has no label.</td>\n</tr>\n<tr>\n<td><code>placeholder</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>The <em>placeholder</em> attribute of the <code>&lt;input&gt;</code>.</td>\n</tr>\n<tr>\n<td><code>fullwidth</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the datepicker as a full width text field.</td>\n</tr>\n<tr>\n<td><code>disabled</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Styles the datepicker as a disabled text field.</td>\n</tr>\n<tr>\n<td><code>leadingIcon</code></td>\n<td>boolean, string</td>\n<td><code>false</code></td>\n<td>Styles the datepicker as a text field with a leading icon. (Use with <code>before</code> slot)</td>\n</tr>\n<tr>\n<td><code>icon</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional. Indicates an icon element with a leading icon. See <a href="/#/icons">Material Icons</a> list. (No need to configure <code>leadingIcon</code>)</td>\n</tr>\n<tr>\n<td><code>config</code></td>\n<td>object</td>\n<td><code>{}</code></td>\n<td>See <a href="https://flatpickr.js.org/options/">Flatpickr configuration</a>.</td>\n</tr>\n<tr>\n<td><code>toggle</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Show calendar icon button.</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Show clear icon button.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>toggle</code></td>\n<td></td>\n<td>The custom toggle icon button.</td>\n</tr>\n<tr>\n<td><code>clear</code></td>\n<td></td>\n<td>The custom clear icon button.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(value: string|array)</code></td>\n<td>Emits when the datepicker value is changed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the datepicker using <code>@change</code> and update the <code>model</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-datepicker v-model=&quot;value&quot;&gt;&lt;/ui-datepicker&gt;\n\n// Manual\n&lt;ui-datepicker\n  :model=&quot;value&quot;\n  @change=&quot;$balmUI.onChange(&#39;value&#39;, $event)&quot;\n&gt;&lt;/ui-datepicker&gt;</code></pre>\n<h4 id="\u26a0\ufe0f-notice">\u26a0\ufe0f Notice</h4>\n<p>Datepicker uses third-party plugin - <a href="https://flatpickr.js.org/">flatpickr</a>, so we need to load extra flatpickr styles.</p>\n<p><strong><code>flatpickr</code> styles configuration:</strong></p>\n<ul>\n<li>scheme I (Recommended)</li>\n</ul>\n<p>In the <a href="https://balmjs.com/">BalmJS</a> workflow environment, you can directly call third-party plugin styles or scripts in the HTML file for development, and a customized third-party package is synthesized when packaging. No additional configuration is required, so it is recommended.</p>\n<pre><code class="language-html">&lt;!-- index.html --&gt;\n\n...\n&lt;link rel=&quot;stylesheet&quot; href=&quot;%PUBLIC_URL%/styles/main.css&quot; /&gt;\n&lt;!-- build:css css/plugins.css --&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/node_modules/flatpickr/dist/flatpickr.min.css&quot; /&gt;\n&lt;!-- endbuild --&gt;\n...</code></pre>\n<blockquote>\n<p>In the example, <code>css/plugins.css</code> is the target directory and file when packaging</p>\n</blockquote>\n<ul>\n<li>scheme II</li>\n</ul>\n<p>Generally, there is a <code>config/balmrc.js</code> in the scaffolding project generated by the <a href="https://github.com/balmjs/balm-cli">Balm CLI</a>, you can modify it. (Non-BalmJS environment, please modify the webpack configuration by yourself, the effect is the same.)</p>\n<pre><code class="language-js">// balmrc.js\n\nmodule.exports = {\n  ...\n  scripts: {\n    ...\n    alias: {\n      flatpickrCss: &#39;flatpickr/dist/flatpickr.min.css&#39;,\n      flatpickrLangZh: &#39;flatpickr/dist/l10n/zh.js&#39;\n    }\n  },\n  ...\n};</code></pre>\n<pre><code class="language-js">// entry.js\n\nimport Vue from &#39;vue&#39;;\nimport BalmUIPlus from &#39;balm-ui/dist/balm-ui-plus&#39;;\nimport &#39;flatpickrCss&#39;;\n\nVue.use(BalmUIPlus);</code></pre>\n<blockquote>\n<p>With regard to CSSinJS, styles can be extracted through BalmJS configuration, but the idea of BalmJS is more recommended to separate and manage styles and scripts to achieve more flexible module configuration and management. So recommend to use <strong>scheme I</strong>.</p>\n</blockquote>\n'},x9bS:function(t,e){t.exports='<p>Default Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport BalmUI from &#39;balm-ui&#39;;\n\nVue.use(BalmUI, {\n  // Optional. Overwrite `&lt;ui-radio&gt;` props.\n  UiRadio: {\n    // some props\n  }\n});</code></pre>\n<p>Standalone Usage</p>\n<pre><code class="language-js">import Vue from &#39;vue&#39;;\nimport UiFormField from &#39;balm-ui/components/form-field&#39;;\nimport UiRadio from &#39;balm-ui/components/radio&#39;;\n\n// (Recommended) Splitting CSS out from the main application, see BalmUI advanced usage.\nimport &#39;balm-ui/components/core.css&#39;;\nimport &#39;balm-ui/components/form-field.css&#39;;\nimport &#39;balm-ui/components/radio.css&#39;;\n\nVue.use(UiFormField);\n// Optional. Overwrite `&lt;ui-radio&gt;` props.\nVue.use(UiRadio, {\n  // some props\n});</code></pre>\n'},xBbm:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-drawer-backdrop&gt;&lt;/ui-drawer-backdrop&gt;</code></pre>\n<blockquote>\n<p><code>&lt;ui-drawer type=&quot;modal&quot;&gt;</code> only</p>\n</blockquote>\n'},xDz5:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-card-media&gt;&lt;!-- the card media content component --&gt;&lt;/ui-card-media&gt;</code></pre>\n<blockquote>\n<p>Media area that displays a custom <code>background-image</code> with <code>background-size: cover</code>.</p>\n</blockquote>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>square</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Automatically scales the media area&#39;s height to equal its width</td>\n</tr>\n<tr>\n<td><code>rectangle</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Automatically scales the media area&#39;s height according to its width, maintaining a 16:9 aspect ratio</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the card media content component and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},xNpe:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-file\n  accept=&quot;image/*&quot;\n  @change=&quot;$balmUI.onChange(&#39;files&#39;, $event)&quot;&gt;&lt;/ui-file&gt;\n&lt;p&gt;Files: {{ files }}&lt;/p&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      files: []\n    };\n  }\n};</code></pre>\n'},xXqP:function(t,e){t.exports='<pre><code class="language-css">$mdc-switch-track-width: 32px;\n$mdc-switch-track-height: 14px;\n$mdc-switch-thumb-diameter: 20px;\n$mdc-switch-tap-target-size: 48px;\n\n$mdc-switch-minimum-size: 28px;\n$mdc-switch-maximum-size: $mdc-switch-ripple-size;\n$mdc-switch-density-scale: $mdc-density-default-scale;\n$mdc-switch-density-config: (\n  size: (\n    minimum: $mdc-switch-minimum-size,\n    default: $mdc-switch-maximum-size,\n    maximum: $mdc-switch-maximum-size\n  )\n);\n\n/* Amount the edge of the thumb should be offset from the edge of the track. */\n$mdc-switch-thumb-offset: 4px;\n\n$mdc-switch-thumb-active-margin: $mdc-switch-track-width -\n  $mdc-switch-thumb-diameter + $mdc-switch-thumb-offset * 2;\n\n$mdc-switch-toggled-off-thumb-color: mdc-theme-prop-value(surface);\n$mdc-switch-toggled-off-track-color: mdc-theme-prop-value(on-surface);\n$mdc-switch-toggled-off-ripple-color: #9e9e9e;\n$mdc-switch-disabled-thumb-color: mdc-theme-prop-value(surface);\n$mdc-switch-disabled-track-color: mdc-theme-prop-value(on-surface);\n\n$mdc-switch-baseline-theme-color: secondary;</code></pre>\n'},"yAg/":function(t,e){t.exports='<pre><code class="language-html">&lt;ui-select\n  defaultLabel=&quot;Province&quot;\n  :options=&quot;provinces&quot;\n  v-model=&quot;formData.province&quot;\n  @change=&quot;onChangeProvince($event)&quot;\n&gt;&lt;/ui-select&gt;\n\n&lt;ui-select\n  defaultLabel=&quot;City&quot;\n  :options=&quot;cities&quot;\n  v-model=&quot;formData.city&quot;\n&gt;&lt;/ui-select&gt;</code></pre>\n<pre><code class="language-js">const PROVINCES = [\n  {\n    value: 1,\n    label: &#39;Beijing&#39;\n  },\n  {\n    value: 2,\n    label: &#39;Shanghai&#39;\n  },\n  {\n    value: 3,\n    label: &#39;Guangzhou&#39;\n  }\n];\n\nconst CITIES = [\n  [],\n  [\n    {\n      value: 11,\n      label: &#39;\u6d77\u5b9a&#39;\n    },\n    {\n      value: 12,\n      label: &#39;\u671d\u9633&#39;\n    }\n  ],\n  [\n    {\n      value: 21,\n      label: &#39;\u9ec4\u6d66&#39;\n    },\n    {\n      value: 22,\n      label: &#39;\u5f90\u6c47&#39;\n    }\n  ],\n  [\n    {\n      value: 31,\n      label: &#39;Guangzhou&#39;\n    }\n  ]\n];\n\nexport default {\n  data() {\n    return {\n      provinces: PROVINCES,\n      cities: [],\n      formData: {\n        province: &#39;&#39;,\n        city: &#39;&#39;\n      }\n    };\n  },\n  methods: {\n    onChangeProvince(value) {\n      this.formData.provinces = value;\n\n      let key = value || -1;\n      this.cities = key &gt; -1 ? CITIES[key] : [];\n      this.formData.city = this.cities.length ? this.cities[0].value : &#39;&#39;;\n    }\n  }\n};</code></pre>\n'},yUax:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-textfield inputType=&quot;textarea&quot; rows=&quot;8&quot; cols=&quot;40&quot;&gt;\n  Textarea Label\n&lt;/ui-textfield&gt;</code></pre>\n'},ynvr:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid class=&quot;demo-grid&quot;&gt;\n  &lt;ui-grid-cell nested class=&quot;demo-parent-cell&quot; columns=&quot;4&quot;&gt;\n    &lt;ui-grid-cell class=&quot;demo-child-cell demo-cell&quot; columns=&quot;4&quot;&gt;\n      &lt;span&gt;Child 4&lt;/span&gt;\n    &lt;/ui-grid-cell&gt;\n    &lt;ui-grid-cell class=&quot;demo-child-cell demo-cell&quot; columns=&quot;4&quot;&gt;\n      &lt;span&gt;Child 4&lt;/span&gt;\n    &lt;/ui-grid-cell&gt;\n    &lt;ui-grid-cell class=&quot;demo-child-cell demo-cell&quot; columns=&quot;4&quot;&gt;\n      &lt;span&gt;Child 4&lt;/span&gt;\n    &lt;/ui-grid-cell&gt;\n    &lt;span&gt;Parent 4&lt;/span&gt;\n  &lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;4&lt;/ui-grid-cell&gt;\n  &lt;ui-grid-cell class=&quot;demo-cell&quot; columns=&quot;4&quot;&gt;4&lt;/ui-grid-cell&gt;\n&lt;/ui-grid&gt;</code></pre>\n'},z9gS:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-button raised @click=&quot;$balmUI.onShow(&#39;open&#39;)&quot;&gt;Show Scrolling Dialog&lt;/ui-button&gt;\n\n&lt;ui-dialog scrollable\n  v-model=&quot;open&quot;\n  @confirm=&quot;onConfirm&quot;&gt;\n  &lt;ui-dialog-title&gt;Choose a Ringtone&lt;/ui-dialog-title&gt;\n  &lt;ui-dialog-content&gt;\n    &lt;ui-list&gt;\n      &lt;ui-item v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;\n        {{ item }}\n      &lt;/ui-item&gt;\n    &lt;/ui-list&gt;\n  &lt;/ui-dialog-content&gt;\n  &lt;ui-dialog-actions&gt;&lt;/ui-dialog-actions&gt;\n&lt;/ui-dialog&gt;</code></pre>\n<pre><code class="language-js">export default {\n  data() {\n    return {\n      open: false\n    };\n  },\n  methods: {\n    onConfirm(result) {\n      if (result) {\n        console.log(&#39;ok&#39;);\n      } else {\n        console.log(&#39;cancel&#39;);\n      }\n    }\n  }\n};</code></pre>\n'},zHa3:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-snackbar&gt;&lt;!-- the message text --&gt;&lt;/ui-snackbar&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>actionType</code></td>\n<td>number</td>\n<td><code>0</code></td>\n<td>Mandatory. Set action button or dismiss icon for the snackbar. (<code>0</code>: action button, <code>1</code>: dismiss icon)</td>\n</tr>\n<tr>\n<td><code>open</code> (<code>v-model</code>)</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Mandatory.</td>\n</tr>\n<tr>\n<td><code>timeoutMs</code></td>\n<td>number, string</td>\n<td><code>5000</code></td>\n<td>Optional. The automatic dismiss timeout in milliseconds. Value must be between <code>4000</code> and <code>10000</code> or an error will be thrown.</td>\n</tr>\n<tr>\n<td><code>message</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Mandatory. Message text.</td>\n</tr>\n<tr>\n<td><code>actionButtonText</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Optional. The action button/icon elements, if present.</td>\n</tr>\n<tr>\n<td><code>stacked</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Positions the action button/icon below the message instead of alongside it.</td>\n</tr>\n<tr>\n<td><code>leading</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional. Positions the snackbar on the leading edge of the screen (left in LTR, right in RTL) instead of centered. (tablet and desktop only)</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the message text for the snackbar.</td>\n</tr>\n<tr>\n<td><code>action</code></td>\n<td></td>\n<td>The custom action button or dismiss icon content.</td>\n</tr>\n</tbody></table>\n<h4 id="events">Events</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>change</code></td>\n<td><code>function(open: boolean)</code></td>\n<td>Emits when the snackbar is hidden.</td>\n</tr>\n<tr>\n<td><code>closed</code></td>\n<td><code>function()</code></td>\n<td>Emits when the snackbar is closed.</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>NOTE: If you are not using <code>v-model</code>, you should listen for the snackbar using <code>@change</code> and update the <code>open</code> prop.</p>\n</blockquote>\n<pre><code class="language-html">// Automatic\n&lt;ui-snackbar v-model=&quot;open&quot;&gt;&lt;/ui-snackbar&gt;\n\n// Manual\n&lt;ui-snackbar\n  :open=&quot;open&quot;\n  @change=&quot;$balmUI.onChange(&#39;open&#39;, $event)&quot;\n&gt;&lt;/ui-snackbar&gt;</code></pre>\n'},zMId:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-grid&gt;&lt;!-- the grid cell --&gt;&lt;/ui-grid&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>fixedColumnWidth</code></td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>Optional, specifies the grid should have fixed column width.</td>\n</tr>\n<tr>\n<td><code>position</code></td>\n<td>string</td>\n<td><code>&#39;&#39;</code></td>\n<td>Optional, specifies the alignment of the whole grid. (Grid position: <code>&#39;left&#39;</code> or <code>&#39;right&#39;</code>)</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the grid cell and can contain HTML.</td>\n</tr>\n</tbody></table>\n'},zenm:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-dialog-actions&gt;&lt;!-- the dialog actions --&gt;&lt;/ui-dialog-actions&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>acceptText</code></td>\n<td>string</td>\n<td><code>&#39;OK&#39;</code></td>\n<td>The accept button text.</td>\n</tr>\n<tr>\n<td><code>cancelText</code></td>\n<td>string</td>\n<td><code>&#39;Cancel&#39;</code></td>\n<td>The cancel button text.</td>\n</tr>\n</tbody></table>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td><code>buttonClass</code></td>\n<td>The default slot holds the dialog actions and can contain HTML.</td>\n</tr>\n</tbody></table>\n<pre><code class="language-html">&lt;template #default=&quot;{ buttonClass }&quot;&gt;\n  &lt;ui-button :class=&quot;buttonClass&quot;&gt;BUTTON&lt;/ui-button&gt;\n&lt;/template&gt;</code></pre>\n'},zyvQ:function(t,e){t.exports='<pre><code class="language-html">&lt;ui-menu-anchor&gt;&lt;!-- the menu component --&gt;&lt;/ui-menu-anchor&gt;</code></pre>\n<h4 id="props">Props</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Default</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>position</code></td>\n<td>string</td>\n<td><code>null</code></td>\n<td>Menu button position to the menu anchor.</td>\n</tr>\n<tr>\n<td><code>middleValue</code></td>\n<td>string</td>\n<td><code>&#39;45%&#39;</code></td>\n<td>Output <code>top: ${middleValue};</code> for the menu anchor.</td>\n</tr>\n</tbody></table>\n<ul>\n<li>Menu button positions: <code>top left</code>, <code>top right</code>, <code>middle left</code>, <code>middle right</code>, <code>bottom left</code>, <code>bottom right</code>.</li>\n</ul>\n<h4 id="slots">Slots</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Slots</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>default</code></td>\n<td></td>\n<td>The default slot holds the menu component.</td>\n</tr>\n</tbody></table>\n'}}]);